Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt_list statement
Rule 3     stmt_list -> statement
Rule 4     statement -> declaration NL
Rule 5     statement -> assignment NL
Rule 6     statement -> for NL
Rule 7     statement -> if NL
Rule 8     statement -> operation NL
Rule 9     statement -> function NL
Rule 10    statement -> function_call NL
Rule 11    statement -> errors NL
Rule 12    statement -> errors
Rule 13    declaration -> type VARIABLE EQ expression
Rule 14    declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
Rule 15    decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET
Rule 16    decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
Rule 17    decl_list -> expr_list
Rule 18    expr_list -> expr_list COMMA expression
Rule 19    expr_list -> expression
Rule 20    type -> int
Rule 21    type -> bool
Rule 22    int -> INT
Rule 23    int -> CINT
Rule 24    int -> VINT
Rule 25    int -> MINT
Rule 26    int -> CVINT
Rule 27    int -> CMINT
Rule 28    type -> errors
Rule 29    bool -> BOOL
Rule 30    bool -> CBOOL
Rule 31    bool -> VBOOL
Rule 32    bool -> MBOOL
Rule 33    bool -> CVBOOL
Rule 34    bool -> CMBOOL
Rule 35    func_list -> func_list COMMA func
Rule 36    func_list -> func
Rule 37    func -> type VARIABLE
Rule 38    func -> type VARIABLE EQ const
Rule 39    func -> type VARIABLE EQ decl_list
Rule 40    func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
Rule 41    expression -> math_expression
Rule 42    expression -> const
Rule 43    expression -> variable
Rule 44    math_expression -> expression PLUS expression
Rule 45    math_expression -> expression MINUS expression
Rule 46    math_expression -> expression MUL_MATRIX expression
Rule 47    math_expression -> expression MUL_ELEM expression
Rule 48    math_expression -> expression TRANSPOSE
Rule 49    math_expression -> SUM LBRACKET expression RBRACKET
Rule 50    math_expression -> expression STL
Rule 51    math_expression -> expression STR
Rule 52    math_expression -> DENY expression
Rule 53    math_expression -> expression AND expression
Rule 54    math_expression -> expression LESS expression
Rule 55    math_expression -> expression GREATER expression
Rule 56    const -> TRUE
Rule 57    const -> FALSE
Rule 58    const -> INT_DEC
Rule 59    const -> INT_BIN
Rule 60    variable -> VARIABLE
Rule 61    variable -> VARIABLE LBRACKET index RBRACKET
Rule 62    ind -> COMMA
Rule 63    ind -> COMMA COLON
Rule 64    ind -> COLON COMMA
Rule 65    index -> expression
Rule 66    index -> expr_list
Rule 67    index -> expr_list ind
Rule 68    index -> ind expr_list
Rule 69    index -> decl_list ind
Rule 70    index -> ind decl_list
Rule 71    index -> decl_list
Rule 72    operation -> MOVE LBRACKET math_expression RBRACKET
Rule 73    operation -> RIGHT
Rule 74    operation -> LEFT
Rule 75    operation -> WALL
Rule 76    operation -> EXIT
Rule 77    assignment -> variable ASSIGNMENT expression
Rule 78    assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
Rule 79    for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
Rule 80    for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
Rule 81    if -> IF math_expression BEGINIF NL stmt_list ENDIF
Rule 82    if -> IF math_expression BEGIN NL stmt_list END
Rule 83    return_list -> return_list COMMA type VARIABLE
Rule 84    return_list -> type VARIABLE
Rule 85    call_list -> call_list COMMA expression
Rule 86    call_list -> expression
Rule 87    function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 88    function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 89    function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 90    function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 91    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 92    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 93    function_call -> VARIABLE
Rule 94    function_call -> VARIABLE call_list
Rule 95    function_call -> ret_list ASSIGNMENT VARIABLE call_list
Rule 96    function_call -> ret_list ASSIGNMENT VARIABLE
Rule 97    function_call -> variable ASSIGNMENT VARIABLE call_list
Rule 98    ret_list -> variable
Rule 99    ret_list -> ret_list COMMA variable
Rule 100   errors -> errors error
Rule 101   errors -> error

Terminals, with rules where they appear

AND                  : 53
ASSIGNMENT           : 77 78 95 96 97
BEGIN                : 80 82 87 88 89 90 91 92
BEGINFOR             : 79
BEGINIF              : 81
BOOL                 : 29
CBOOL                : 30
CINT                 : 23
CMBOOL               : 34
CMINT                : 27
COLON                : 63 64 79 80
COMMA                : 16 18 35 62 63 64 83 85 99
CVBOOL               : 33
CVINT                : 26
DENY                 : 52
END                  : 80 82 87 88 89 90 91 92
ENDFOR               : 79
ENDIF                : 81
EQ                   : 13 14 38 39 40 79 80 87 89 91 92
EXIT                 : 76
FALSE                : 57
FOR                  : 79 80
FUNCTION             : 87 88 89 90 91 92
GREATER              : 55
IF                   : 81 82
INT                  : 22
INT_BIN              : 59
INT_DEC              : 58
LBRACKET             : 49 61 72 87 88 89 90 91 92
LEFT                 : 74
LESS                 : 54
L_FIGBRACKET         : 14 15 16 40 78
MBOOL                : 32
MINT                 : 25
MINUS                : 45
MOVE                 : 72
MUL_ELEM             : 47
MUL_MATRIX           : 46
NL                   : 4 5 6 7 8 9 10 11 79 80 81 82 87 88 89 90 91 92
PLUS                 : 44
RBRACKET             : 49 61 72 87 88 89 90 91 92
RIGHT                : 73
R_FIGBRACKET         : 14 15 16 40 78
STL                  : 50
STR                  : 51
SUM                  : 49
TRANSPOSE            : 48
TRUE                 : 56
VARIABLE             : 13 14 37 38 39 40 60 61 79 80 83 84 87 88 89 90 91 91 92 92 93 94 95 96 97
VBOOL                : 31
VINT                 : 24
WALL                 : 75
error                : 100 101

Nonterminals, with rules where they appear

assignment           : 5
bool                 : 21
call_list            : 85 94 95 97
const                : 38 42
decl_list            : 14 16 16 39 40 69 70 71 78
declaration          : 4
errors               : 11 12 28 100
expr_list            : 15 17 18 66 67 68
expression           : 13 18 19 44 44 45 45 46 46 47 47 48 49 50 51 52 53 53 54 54 55 55 65 77 79 79 80 80 85 86
for                  : 6
func                 : 35 36
func_list            : 35 87 88 91
function             : 9
function_call        : 10
if                   : 7
ind                  : 67 68 69 70
index                : 61
int                  : 20
math_expression      : 41 72 81 82
operation            : 8
program              : 0
ret_list             : 95 96 99
return_list          : 83 87 89
statement            : 2 3
stmt_list            : 1 2 79 80 81 82 87 88 89 90 91 92
type                 : 13 14 37 38 39 40 83 84 91 92
variable             : 43 77 78 97 98 99

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    $end            reduce using rule 1 (program -> stmt_list .)
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 3

    (3) stmt_list -> statement .

    FOR             reduce using rule 3 (stmt_list -> statement .)
    IF              reduce using rule 3 (stmt_list -> statement .)
    MOVE            reduce using rule 3 (stmt_list -> statement .)
    RIGHT           reduce using rule 3 (stmt_list -> statement .)
    LEFT            reduce using rule 3 (stmt_list -> statement .)
    WALL            reduce using rule 3 (stmt_list -> statement .)
    EXIT            reduce using rule 3 (stmt_list -> statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> statement .)
    VARIABLE        reduce using rule 3 (stmt_list -> statement .)
    error           reduce using rule 3 (stmt_list -> statement .)
    INT             reduce using rule 3 (stmt_list -> statement .)
    CINT            reduce using rule 3 (stmt_list -> statement .)
    VINT            reduce using rule 3 (stmt_list -> statement .)
    MINT            reduce using rule 3 (stmt_list -> statement .)
    CVINT           reduce using rule 3 (stmt_list -> statement .)
    CMINT           reduce using rule 3 (stmt_list -> statement .)
    BOOL            reduce using rule 3 (stmt_list -> statement .)
    CBOOL           reduce using rule 3 (stmt_list -> statement .)
    VBOOL           reduce using rule 3 (stmt_list -> statement .)
    MBOOL           reduce using rule 3 (stmt_list -> statement .)
    CVBOOL          reduce using rule 3 (stmt_list -> statement .)
    CMBOOL          reduce using rule 3 (stmt_list -> statement .)
    $end            reduce using rule 3 (stmt_list -> statement .)
    ENDIF           reduce using rule 3 (stmt_list -> statement .)
    END             reduce using rule 3 (stmt_list -> statement .)
    ENDFOR          reduce using rule 3 (stmt_list -> statement .)


state 4

    (4) statement -> declaration . NL

    NL              shift and go to state 41


state 5

    (5) statement -> assignment . NL

    NL              shift and go to state 42


state 6

    (6) statement -> for . NL

    NL              shift and go to state 43


state 7

    (7) statement -> if . NL

    NL              shift and go to state 44


state 8

    (8) statement -> operation . NL

    NL              shift and go to state 45


state 9

    (9) statement -> function . NL

    NL              shift and go to state 46


state 10

    (10) statement -> function_call . NL

    NL              shift and go to state 47


state 11

    (11) statement -> errors . NL
    (12) statement -> errors .
    (100) errors -> errors . error
    (28) type -> errors .

  ! shift/reduce conflict for error resolved as shift
  ! reduce/reduce conflict for VARIABLE resolved using rule 12 (statement -> errors .)
    NL              shift and go to state 48
    FOR             reduce using rule 12 (statement -> errors .)
    IF              reduce using rule 12 (statement -> errors .)
    MOVE            reduce using rule 12 (statement -> errors .)
    RIGHT           reduce using rule 12 (statement -> errors .)
    LEFT            reduce using rule 12 (statement -> errors .)
    WALL            reduce using rule 12 (statement -> errors .)
    EXIT            reduce using rule 12 (statement -> errors .)
    FUNCTION        reduce using rule 12 (statement -> errors .)
    VARIABLE        reduce using rule 12 (statement -> errors .)
    INT             reduce using rule 12 (statement -> errors .)
    CINT            reduce using rule 12 (statement -> errors .)
    VINT            reduce using rule 12 (statement -> errors .)
    MINT            reduce using rule 12 (statement -> errors .)
    CVINT           reduce using rule 12 (statement -> errors .)
    CMINT           reduce using rule 12 (statement -> errors .)
    BOOL            reduce using rule 12 (statement -> errors .)
    CBOOL           reduce using rule 12 (statement -> errors .)
    VBOOL           reduce using rule 12 (statement -> errors .)
    MBOOL           reduce using rule 12 (statement -> errors .)
    CVBOOL          reduce using rule 12 (statement -> errors .)
    CMBOOL          reduce using rule 12 (statement -> errors .)
    $end            reduce using rule 12 (statement -> errors .)
    ENDIF           reduce using rule 12 (statement -> errors .)
    END             reduce using rule 12 (statement -> errors .)
    ENDFOR          reduce using rule 12 (statement -> errors .)
    error           shift and go to state 49

  ! error           [ reduce using rule 12 (statement -> errors .) ]
  ! VARIABLE        [ reduce using rule 28 (type -> errors .) ]


state 12

    (13) declaration -> type . VARIABLE EQ expression
    (14) declaration -> type . VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (91) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (84) return_list -> type . VARIABLE

    VARIABLE        shift and go to state 50


state 13

    (93) function_call -> VARIABLE .
    (94) function_call -> VARIABLE . call_list
    (60) variable -> VARIABLE .
    (61) variable -> VARIABLE . LBRACKET index RBRACKET
    (85) call_list -> . call_list COMMA expression
    (86) call_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    NL              reduce using rule 93 (function_call -> VARIABLE .)
    ASSIGNMENT      reduce using rule 60 (variable -> VARIABLE .)
    COMMA           reduce using rule 60 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 53
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    call_list                      shift and go to state 52
    expression                     shift and go to state 54
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 14

    (77) assignment -> variable . ASSIGNMENT expression
    (78) assignment -> variable . ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (97) function_call -> variable . ASSIGNMENT VARIABLE call_list
    (98) ret_list -> variable .

  ! shift/reduce conflict for ASSIGNMENT resolved as shift
    ASSIGNMENT      shift and go to state 64
    COMMA           reduce using rule 98 (ret_list -> variable .)

  ! ASSIGNMENT      [ reduce using rule 98 (ret_list -> variable .) ]


state 15

    (79) for -> FOR . VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> FOR . VARIABLE EQ expression COLON expression BEGIN NL stmt_list END

    VARIABLE        shift and go to state 65


state 16

    (81) if -> IF . math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> IF . math_expression BEGIN NL stmt_list END
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    math_expression                shift and go to state 66
    expression                     shift and go to state 67
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 17

    (72) operation -> MOVE . LBRACKET math_expression RBRACKET

    LBRACKET        shift and go to state 68


state 18

    (73) operation -> RIGHT .

    NL              reduce using rule 73 (operation -> RIGHT .)


state 19

    (74) operation -> LEFT .

    NL              reduce using rule 74 (operation -> LEFT .)


state 20

    (75) operation -> WALL .

    NL              reduce using rule 75 (operation -> WALL .)


state 21

    (76) operation -> EXIT .

    NL              reduce using rule 76 (operation -> EXIT .)


state 22

    (87) function -> return_list . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> return_list . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) return_list -> return_list . COMMA type VARIABLE

    EQ              shift and go to state 69
    COMMA           shift and go to state 70


state 23

    (88) function -> FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (90) function -> FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 71


state 24

    (95) function_call -> ret_list . ASSIGNMENT VARIABLE call_list
    (96) function_call -> ret_list . ASSIGNMENT VARIABLE
    (99) ret_list -> ret_list . COMMA variable

    ASSIGNMENT      shift and go to state 72
    COMMA           shift and go to state 73


state 25

    (101) errors -> error .

    NL              reduce using rule 101 (errors -> error .)
    error           reduce using rule 101 (errors -> error .)
    FOR             reduce using rule 101 (errors -> error .)
    IF              reduce using rule 101 (errors -> error .)
    MOVE            reduce using rule 101 (errors -> error .)
    RIGHT           reduce using rule 101 (errors -> error .)
    LEFT            reduce using rule 101 (errors -> error .)
    WALL            reduce using rule 101 (errors -> error .)
    EXIT            reduce using rule 101 (errors -> error .)
    FUNCTION        reduce using rule 101 (errors -> error .)
    VARIABLE        reduce using rule 101 (errors -> error .)
    INT             reduce using rule 101 (errors -> error .)
    CINT            reduce using rule 101 (errors -> error .)
    VINT            reduce using rule 101 (errors -> error .)
    MINT            reduce using rule 101 (errors -> error .)
    CVINT           reduce using rule 101 (errors -> error .)
    CMINT           reduce using rule 101 (errors -> error .)
    BOOL            reduce using rule 101 (errors -> error .)
    CBOOL           reduce using rule 101 (errors -> error .)
    VBOOL           reduce using rule 101 (errors -> error .)
    MBOOL           reduce using rule 101 (errors -> error .)
    CVBOOL          reduce using rule 101 (errors -> error .)
    CMBOOL          reduce using rule 101 (errors -> error .)
    $end            reduce using rule 101 (errors -> error .)
    ENDIF           reduce using rule 101 (errors -> error .)
    END             reduce using rule 101 (errors -> error .)
    ENDFOR          reduce using rule 101 (errors -> error .)


state 26

    (20) type -> int .

    VARIABLE        reduce using rule 20 (type -> int .)


state 27

    (21) type -> bool .

    VARIABLE        reduce using rule 21 (type -> bool .)


state 28

    (22) int -> INT .

    VARIABLE        reduce using rule 22 (int -> INT .)


state 29

    (23) int -> CINT .

    VARIABLE        reduce using rule 23 (int -> CINT .)


state 30

    (24) int -> VINT .

    VARIABLE        reduce using rule 24 (int -> VINT .)


state 31

    (25) int -> MINT .

    VARIABLE        reduce using rule 25 (int -> MINT .)


state 32

    (26) int -> CVINT .

    VARIABLE        reduce using rule 26 (int -> CVINT .)


state 33

    (27) int -> CMINT .

    VARIABLE        reduce using rule 27 (int -> CMINT .)


state 34

    (29) bool -> BOOL .

    VARIABLE        reduce using rule 29 (bool -> BOOL .)


state 35

    (30) bool -> CBOOL .

    VARIABLE        reduce using rule 30 (bool -> CBOOL .)


state 36

    (31) bool -> VBOOL .

    VARIABLE        reduce using rule 31 (bool -> VBOOL .)


state 37

    (32) bool -> MBOOL .

    VARIABLE        reduce using rule 32 (bool -> MBOOL .)


state 38

    (33) bool -> CVBOOL .

    VARIABLE        reduce using rule 33 (bool -> CVBOOL .)


state 39

    (34) bool -> CMBOOL .

    VARIABLE        reduce using rule 34 (bool -> CMBOOL .)


state 40

    (2) stmt_list -> stmt_list statement .

    FOR             reduce using rule 2 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 2 (stmt_list -> stmt_list statement .)
    MOVE            reduce using rule 2 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    WALL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    EXIT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 2 (stmt_list -> stmt_list statement .)
    VARIABLE        reduce using rule 2 (stmt_list -> stmt_list statement .)
    error           reduce using rule 2 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 2 (stmt_list -> stmt_list statement .)
    CINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    VINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    MINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    VBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    MBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDIF           reduce using rule 2 (stmt_list -> stmt_list statement .)
    END             reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDFOR          reduce using rule 2 (stmt_list -> stmt_list statement .)


state 41

    (4) statement -> declaration NL .

    FOR             reduce using rule 4 (statement -> declaration NL .)
    IF              reduce using rule 4 (statement -> declaration NL .)
    MOVE            reduce using rule 4 (statement -> declaration NL .)
    RIGHT           reduce using rule 4 (statement -> declaration NL .)
    LEFT            reduce using rule 4 (statement -> declaration NL .)
    WALL            reduce using rule 4 (statement -> declaration NL .)
    EXIT            reduce using rule 4 (statement -> declaration NL .)
    FUNCTION        reduce using rule 4 (statement -> declaration NL .)
    VARIABLE        reduce using rule 4 (statement -> declaration NL .)
    error           reduce using rule 4 (statement -> declaration NL .)
    INT             reduce using rule 4 (statement -> declaration NL .)
    CINT            reduce using rule 4 (statement -> declaration NL .)
    VINT            reduce using rule 4 (statement -> declaration NL .)
    MINT            reduce using rule 4 (statement -> declaration NL .)
    CVINT           reduce using rule 4 (statement -> declaration NL .)
    CMINT           reduce using rule 4 (statement -> declaration NL .)
    BOOL            reduce using rule 4 (statement -> declaration NL .)
    CBOOL           reduce using rule 4 (statement -> declaration NL .)
    VBOOL           reduce using rule 4 (statement -> declaration NL .)
    MBOOL           reduce using rule 4 (statement -> declaration NL .)
    CVBOOL          reduce using rule 4 (statement -> declaration NL .)
    CMBOOL          reduce using rule 4 (statement -> declaration NL .)
    $end            reduce using rule 4 (statement -> declaration NL .)
    ENDIF           reduce using rule 4 (statement -> declaration NL .)
    END             reduce using rule 4 (statement -> declaration NL .)
    ENDFOR          reduce using rule 4 (statement -> declaration NL .)


state 42

    (5) statement -> assignment NL .

    FOR             reduce using rule 5 (statement -> assignment NL .)
    IF              reduce using rule 5 (statement -> assignment NL .)
    MOVE            reduce using rule 5 (statement -> assignment NL .)
    RIGHT           reduce using rule 5 (statement -> assignment NL .)
    LEFT            reduce using rule 5 (statement -> assignment NL .)
    WALL            reduce using rule 5 (statement -> assignment NL .)
    EXIT            reduce using rule 5 (statement -> assignment NL .)
    FUNCTION        reduce using rule 5 (statement -> assignment NL .)
    VARIABLE        reduce using rule 5 (statement -> assignment NL .)
    error           reduce using rule 5 (statement -> assignment NL .)
    INT             reduce using rule 5 (statement -> assignment NL .)
    CINT            reduce using rule 5 (statement -> assignment NL .)
    VINT            reduce using rule 5 (statement -> assignment NL .)
    MINT            reduce using rule 5 (statement -> assignment NL .)
    CVINT           reduce using rule 5 (statement -> assignment NL .)
    CMINT           reduce using rule 5 (statement -> assignment NL .)
    BOOL            reduce using rule 5 (statement -> assignment NL .)
    CBOOL           reduce using rule 5 (statement -> assignment NL .)
    VBOOL           reduce using rule 5 (statement -> assignment NL .)
    MBOOL           reduce using rule 5 (statement -> assignment NL .)
    CVBOOL          reduce using rule 5 (statement -> assignment NL .)
    CMBOOL          reduce using rule 5 (statement -> assignment NL .)
    $end            reduce using rule 5 (statement -> assignment NL .)
    ENDIF           reduce using rule 5 (statement -> assignment NL .)
    END             reduce using rule 5 (statement -> assignment NL .)
    ENDFOR          reduce using rule 5 (statement -> assignment NL .)


state 43

    (6) statement -> for NL .

    FOR             reduce using rule 6 (statement -> for NL .)
    IF              reduce using rule 6 (statement -> for NL .)
    MOVE            reduce using rule 6 (statement -> for NL .)
    RIGHT           reduce using rule 6 (statement -> for NL .)
    LEFT            reduce using rule 6 (statement -> for NL .)
    WALL            reduce using rule 6 (statement -> for NL .)
    EXIT            reduce using rule 6 (statement -> for NL .)
    FUNCTION        reduce using rule 6 (statement -> for NL .)
    VARIABLE        reduce using rule 6 (statement -> for NL .)
    error           reduce using rule 6 (statement -> for NL .)
    INT             reduce using rule 6 (statement -> for NL .)
    CINT            reduce using rule 6 (statement -> for NL .)
    VINT            reduce using rule 6 (statement -> for NL .)
    MINT            reduce using rule 6 (statement -> for NL .)
    CVINT           reduce using rule 6 (statement -> for NL .)
    CMINT           reduce using rule 6 (statement -> for NL .)
    BOOL            reduce using rule 6 (statement -> for NL .)
    CBOOL           reduce using rule 6 (statement -> for NL .)
    VBOOL           reduce using rule 6 (statement -> for NL .)
    MBOOL           reduce using rule 6 (statement -> for NL .)
    CVBOOL          reduce using rule 6 (statement -> for NL .)
    CMBOOL          reduce using rule 6 (statement -> for NL .)
    $end            reduce using rule 6 (statement -> for NL .)
    ENDIF           reduce using rule 6 (statement -> for NL .)
    END             reduce using rule 6 (statement -> for NL .)
    ENDFOR          reduce using rule 6 (statement -> for NL .)


state 44

    (7) statement -> if NL .

    FOR             reduce using rule 7 (statement -> if NL .)
    IF              reduce using rule 7 (statement -> if NL .)
    MOVE            reduce using rule 7 (statement -> if NL .)
    RIGHT           reduce using rule 7 (statement -> if NL .)
    LEFT            reduce using rule 7 (statement -> if NL .)
    WALL            reduce using rule 7 (statement -> if NL .)
    EXIT            reduce using rule 7 (statement -> if NL .)
    FUNCTION        reduce using rule 7 (statement -> if NL .)
    VARIABLE        reduce using rule 7 (statement -> if NL .)
    error           reduce using rule 7 (statement -> if NL .)
    INT             reduce using rule 7 (statement -> if NL .)
    CINT            reduce using rule 7 (statement -> if NL .)
    VINT            reduce using rule 7 (statement -> if NL .)
    MINT            reduce using rule 7 (statement -> if NL .)
    CVINT           reduce using rule 7 (statement -> if NL .)
    CMINT           reduce using rule 7 (statement -> if NL .)
    BOOL            reduce using rule 7 (statement -> if NL .)
    CBOOL           reduce using rule 7 (statement -> if NL .)
    VBOOL           reduce using rule 7 (statement -> if NL .)
    MBOOL           reduce using rule 7 (statement -> if NL .)
    CVBOOL          reduce using rule 7 (statement -> if NL .)
    CMBOOL          reduce using rule 7 (statement -> if NL .)
    $end            reduce using rule 7 (statement -> if NL .)
    ENDIF           reduce using rule 7 (statement -> if NL .)
    END             reduce using rule 7 (statement -> if NL .)
    ENDFOR          reduce using rule 7 (statement -> if NL .)


state 45

    (8) statement -> operation NL .

    FOR             reduce using rule 8 (statement -> operation NL .)
    IF              reduce using rule 8 (statement -> operation NL .)
    MOVE            reduce using rule 8 (statement -> operation NL .)
    RIGHT           reduce using rule 8 (statement -> operation NL .)
    LEFT            reduce using rule 8 (statement -> operation NL .)
    WALL            reduce using rule 8 (statement -> operation NL .)
    EXIT            reduce using rule 8 (statement -> operation NL .)
    FUNCTION        reduce using rule 8 (statement -> operation NL .)
    VARIABLE        reduce using rule 8 (statement -> operation NL .)
    error           reduce using rule 8 (statement -> operation NL .)
    INT             reduce using rule 8 (statement -> operation NL .)
    CINT            reduce using rule 8 (statement -> operation NL .)
    VINT            reduce using rule 8 (statement -> operation NL .)
    MINT            reduce using rule 8 (statement -> operation NL .)
    CVINT           reduce using rule 8 (statement -> operation NL .)
    CMINT           reduce using rule 8 (statement -> operation NL .)
    BOOL            reduce using rule 8 (statement -> operation NL .)
    CBOOL           reduce using rule 8 (statement -> operation NL .)
    VBOOL           reduce using rule 8 (statement -> operation NL .)
    MBOOL           reduce using rule 8 (statement -> operation NL .)
    CVBOOL          reduce using rule 8 (statement -> operation NL .)
    CMBOOL          reduce using rule 8 (statement -> operation NL .)
    $end            reduce using rule 8 (statement -> operation NL .)
    ENDIF           reduce using rule 8 (statement -> operation NL .)
    END             reduce using rule 8 (statement -> operation NL .)
    ENDFOR          reduce using rule 8 (statement -> operation NL .)


state 46

    (9) statement -> function NL .

    FOR             reduce using rule 9 (statement -> function NL .)
    IF              reduce using rule 9 (statement -> function NL .)
    MOVE            reduce using rule 9 (statement -> function NL .)
    RIGHT           reduce using rule 9 (statement -> function NL .)
    LEFT            reduce using rule 9 (statement -> function NL .)
    WALL            reduce using rule 9 (statement -> function NL .)
    EXIT            reduce using rule 9 (statement -> function NL .)
    FUNCTION        reduce using rule 9 (statement -> function NL .)
    VARIABLE        reduce using rule 9 (statement -> function NL .)
    error           reduce using rule 9 (statement -> function NL .)
    INT             reduce using rule 9 (statement -> function NL .)
    CINT            reduce using rule 9 (statement -> function NL .)
    VINT            reduce using rule 9 (statement -> function NL .)
    MINT            reduce using rule 9 (statement -> function NL .)
    CVINT           reduce using rule 9 (statement -> function NL .)
    CMINT           reduce using rule 9 (statement -> function NL .)
    BOOL            reduce using rule 9 (statement -> function NL .)
    CBOOL           reduce using rule 9 (statement -> function NL .)
    VBOOL           reduce using rule 9 (statement -> function NL .)
    MBOOL           reduce using rule 9 (statement -> function NL .)
    CVBOOL          reduce using rule 9 (statement -> function NL .)
    CMBOOL          reduce using rule 9 (statement -> function NL .)
    $end            reduce using rule 9 (statement -> function NL .)
    ENDIF           reduce using rule 9 (statement -> function NL .)
    END             reduce using rule 9 (statement -> function NL .)
    ENDFOR          reduce using rule 9 (statement -> function NL .)


state 47

    (10) statement -> function_call NL .

    FOR             reduce using rule 10 (statement -> function_call NL .)
    IF              reduce using rule 10 (statement -> function_call NL .)
    MOVE            reduce using rule 10 (statement -> function_call NL .)
    RIGHT           reduce using rule 10 (statement -> function_call NL .)
    LEFT            reduce using rule 10 (statement -> function_call NL .)
    WALL            reduce using rule 10 (statement -> function_call NL .)
    EXIT            reduce using rule 10 (statement -> function_call NL .)
    FUNCTION        reduce using rule 10 (statement -> function_call NL .)
    VARIABLE        reduce using rule 10 (statement -> function_call NL .)
    error           reduce using rule 10 (statement -> function_call NL .)
    INT             reduce using rule 10 (statement -> function_call NL .)
    CINT            reduce using rule 10 (statement -> function_call NL .)
    VINT            reduce using rule 10 (statement -> function_call NL .)
    MINT            reduce using rule 10 (statement -> function_call NL .)
    CVINT           reduce using rule 10 (statement -> function_call NL .)
    CMINT           reduce using rule 10 (statement -> function_call NL .)
    BOOL            reduce using rule 10 (statement -> function_call NL .)
    CBOOL           reduce using rule 10 (statement -> function_call NL .)
    VBOOL           reduce using rule 10 (statement -> function_call NL .)
    MBOOL           reduce using rule 10 (statement -> function_call NL .)
    CVBOOL          reduce using rule 10 (statement -> function_call NL .)
    CMBOOL          reduce using rule 10 (statement -> function_call NL .)
    $end            reduce using rule 10 (statement -> function_call NL .)
    ENDIF           reduce using rule 10 (statement -> function_call NL .)
    END             reduce using rule 10 (statement -> function_call NL .)
    ENDFOR          reduce using rule 10 (statement -> function_call NL .)


state 48

    (11) statement -> errors NL .

    FOR             reduce using rule 11 (statement -> errors NL .)
    IF              reduce using rule 11 (statement -> errors NL .)
    MOVE            reduce using rule 11 (statement -> errors NL .)
    RIGHT           reduce using rule 11 (statement -> errors NL .)
    LEFT            reduce using rule 11 (statement -> errors NL .)
    WALL            reduce using rule 11 (statement -> errors NL .)
    EXIT            reduce using rule 11 (statement -> errors NL .)
    FUNCTION        reduce using rule 11 (statement -> errors NL .)
    VARIABLE        reduce using rule 11 (statement -> errors NL .)
    error           reduce using rule 11 (statement -> errors NL .)
    INT             reduce using rule 11 (statement -> errors NL .)
    CINT            reduce using rule 11 (statement -> errors NL .)
    VINT            reduce using rule 11 (statement -> errors NL .)
    MINT            reduce using rule 11 (statement -> errors NL .)
    CVINT           reduce using rule 11 (statement -> errors NL .)
    CMINT           reduce using rule 11 (statement -> errors NL .)
    BOOL            reduce using rule 11 (statement -> errors NL .)
    CBOOL           reduce using rule 11 (statement -> errors NL .)
    VBOOL           reduce using rule 11 (statement -> errors NL .)
    MBOOL           reduce using rule 11 (statement -> errors NL .)
    CVBOOL          reduce using rule 11 (statement -> errors NL .)
    CMBOOL          reduce using rule 11 (statement -> errors NL .)
    $end            reduce using rule 11 (statement -> errors NL .)
    ENDIF           reduce using rule 11 (statement -> errors NL .)
    END             reduce using rule 11 (statement -> errors NL .)
    ENDFOR          reduce using rule 11 (statement -> errors NL .)


state 49

    (100) errors -> errors error .

    NL              reduce using rule 100 (errors -> errors error .)
    error           reduce using rule 100 (errors -> errors error .)
    FOR             reduce using rule 100 (errors -> errors error .)
    IF              reduce using rule 100 (errors -> errors error .)
    MOVE            reduce using rule 100 (errors -> errors error .)
    RIGHT           reduce using rule 100 (errors -> errors error .)
    LEFT            reduce using rule 100 (errors -> errors error .)
    WALL            reduce using rule 100 (errors -> errors error .)
    EXIT            reduce using rule 100 (errors -> errors error .)
    FUNCTION        reduce using rule 100 (errors -> errors error .)
    VARIABLE        reduce using rule 100 (errors -> errors error .)
    INT             reduce using rule 100 (errors -> errors error .)
    CINT            reduce using rule 100 (errors -> errors error .)
    VINT            reduce using rule 100 (errors -> errors error .)
    MINT            reduce using rule 100 (errors -> errors error .)
    CVINT           reduce using rule 100 (errors -> errors error .)
    CMINT           reduce using rule 100 (errors -> errors error .)
    BOOL            reduce using rule 100 (errors -> errors error .)
    CBOOL           reduce using rule 100 (errors -> errors error .)
    VBOOL           reduce using rule 100 (errors -> errors error .)
    MBOOL           reduce using rule 100 (errors -> errors error .)
    CVBOOL          reduce using rule 100 (errors -> errors error .)
    CMBOOL          reduce using rule 100 (errors -> errors error .)
    $end            reduce using rule 100 (errors -> errors error .)
    ENDIF           reduce using rule 100 (errors -> errors error .)
    END             reduce using rule 100 (errors -> errors error .)
    ENDFOR          reduce using rule 100 (errors -> errors error .)


state 50

    (13) declaration -> type VARIABLE . EQ expression
    (14) declaration -> type VARIABLE . EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (91) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (84) return_list -> type VARIABLE .

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 74
    COMMA           reduce using rule 84 (return_list -> type VARIABLE .)

  ! EQ              [ reduce using rule 84 (return_list -> type VARIABLE .) ]


state 51

    (60) variable -> VARIABLE .
    (61) variable -> VARIABLE . LBRACKET index RBRACKET

    PLUS            reduce using rule 60 (variable -> VARIABLE .)
    MINUS           reduce using rule 60 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 60 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 60 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 60 (variable -> VARIABLE .)
    STL             reduce using rule 60 (variable -> VARIABLE .)
    STR             reduce using rule 60 (variable -> VARIABLE .)
    AND             reduce using rule 60 (variable -> VARIABLE .)
    LESS            reduce using rule 60 (variable -> VARIABLE .)
    GREATER         reduce using rule 60 (variable -> VARIABLE .)
    COMMA           reduce using rule 60 (variable -> VARIABLE .)
    NL              reduce using rule 60 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 60 (variable -> VARIABLE .)
    COLON           reduce using rule 60 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 60 (variable -> VARIABLE .)
    BEGIN           reduce using rule 60 (variable -> VARIABLE .)
    R_FIGBRACKET    reduce using rule 60 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 60 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 60 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 53


state 52

    (94) function_call -> VARIABLE call_list .
    (85) call_list -> call_list . COMMA expression

    NL              reduce using rule 94 (function_call -> VARIABLE call_list .)
    COMMA           shift and go to state 75


state 53

    (61) variable -> VARIABLE LBRACKET . index RBRACKET
    (65) index -> . expression
    (66) index -> . expr_list
    (67) index -> . expr_list ind
    (68) index -> . ind expr_list
    (69) index -> . decl_list ind
    (70) index -> . ind decl_list
    (71) index -> . decl_list
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (62) ind -> . COMMA
    (63) ind -> . COMMA COLON
    (64) ind -> . COLON COMMA
    (15) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (16) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (17) decl_list -> . expr_list
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    COMMA           shift and go to state 81
    COLON           shift and go to state 82
    L_FIGBRACKET    shift and go to state 83
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    index                          shift and go to state 76
    expression                     shift and go to state 77
    expr_list                      shift and go to state 78
    ind                            shift and go to state 79
    decl_list                      shift and go to state 80
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 54

    (86) call_list -> expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 86 (call_list -> expression .)
    NL              reduce using rule 86 (call_list -> expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 55

    (41) expression -> math_expression .

    PLUS            reduce using rule 41 (expression -> math_expression .)
    MINUS           reduce using rule 41 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 41 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 41 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 41 (expression -> math_expression .)
    STL             reduce using rule 41 (expression -> math_expression .)
    STR             reduce using rule 41 (expression -> math_expression .)
    AND             reduce using rule 41 (expression -> math_expression .)
    LESS            reduce using rule 41 (expression -> math_expression .)
    GREATER         reduce using rule 41 (expression -> math_expression .)
    COMMA           reduce using rule 41 (expression -> math_expression .)
    NL              reduce using rule 41 (expression -> math_expression .)
    RBRACKET        reduce using rule 41 (expression -> math_expression .)
    COLON           reduce using rule 41 (expression -> math_expression .)
    BEGINIF         reduce using rule 41 (expression -> math_expression .)
    BEGIN           reduce using rule 41 (expression -> math_expression .)
    R_FIGBRACKET    reduce using rule 41 (expression -> math_expression .)
    BEGINFOR        reduce using rule 41 (expression -> math_expression .)


state 56

    (42) expression -> const .

    PLUS            reduce using rule 42 (expression -> const .)
    MINUS           reduce using rule 42 (expression -> const .)
    MUL_MATRIX      reduce using rule 42 (expression -> const .)
    MUL_ELEM        reduce using rule 42 (expression -> const .)
    TRANSPOSE       reduce using rule 42 (expression -> const .)
    STL             reduce using rule 42 (expression -> const .)
    STR             reduce using rule 42 (expression -> const .)
    AND             reduce using rule 42 (expression -> const .)
    LESS            reduce using rule 42 (expression -> const .)
    GREATER         reduce using rule 42 (expression -> const .)
    COMMA           reduce using rule 42 (expression -> const .)
    NL              reduce using rule 42 (expression -> const .)
    RBRACKET        reduce using rule 42 (expression -> const .)
    COLON           reduce using rule 42 (expression -> const .)
    BEGINIF         reduce using rule 42 (expression -> const .)
    BEGIN           reduce using rule 42 (expression -> const .)
    R_FIGBRACKET    reduce using rule 42 (expression -> const .)
    BEGINFOR        reduce using rule 42 (expression -> const .)


state 57

    (43) expression -> variable .

    PLUS            reduce using rule 43 (expression -> variable .)
    MINUS           reduce using rule 43 (expression -> variable .)
    MUL_MATRIX      reduce using rule 43 (expression -> variable .)
    MUL_ELEM        reduce using rule 43 (expression -> variable .)
    TRANSPOSE       reduce using rule 43 (expression -> variable .)
    STL             reduce using rule 43 (expression -> variable .)
    STR             reduce using rule 43 (expression -> variable .)
    AND             reduce using rule 43 (expression -> variable .)
    LESS            reduce using rule 43 (expression -> variable .)
    GREATER         reduce using rule 43 (expression -> variable .)
    COMMA           reduce using rule 43 (expression -> variable .)
    NL              reduce using rule 43 (expression -> variable .)
    RBRACKET        reduce using rule 43 (expression -> variable .)
    COLON           reduce using rule 43 (expression -> variable .)
    BEGINIF         reduce using rule 43 (expression -> variable .)
    BEGIN           reduce using rule 43 (expression -> variable .)
    R_FIGBRACKET    reduce using rule 43 (expression -> variable .)
    BEGINFOR        reduce using rule 43 (expression -> variable .)


state 58

    (49) math_expression -> SUM . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 94


state 59

    (52) math_expression -> DENY . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 95
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 60

    (56) const -> TRUE .

    PLUS            reduce using rule 56 (const -> TRUE .)
    MINUS           reduce using rule 56 (const -> TRUE .)
    MUL_MATRIX      reduce using rule 56 (const -> TRUE .)
    MUL_ELEM        reduce using rule 56 (const -> TRUE .)
    TRANSPOSE       reduce using rule 56 (const -> TRUE .)
    STL             reduce using rule 56 (const -> TRUE .)
    STR             reduce using rule 56 (const -> TRUE .)
    AND             reduce using rule 56 (const -> TRUE .)
    LESS            reduce using rule 56 (const -> TRUE .)
    GREATER         reduce using rule 56 (const -> TRUE .)
    COMMA           reduce using rule 56 (const -> TRUE .)
    NL              reduce using rule 56 (const -> TRUE .)
    RBRACKET        reduce using rule 56 (const -> TRUE .)
    COLON           reduce using rule 56 (const -> TRUE .)
    BEGINIF         reduce using rule 56 (const -> TRUE .)
    BEGIN           reduce using rule 56 (const -> TRUE .)
    R_FIGBRACKET    reduce using rule 56 (const -> TRUE .)
    BEGINFOR        reduce using rule 56 (const -> TRUE .)


state 61

    (57) const -> FALSE .

    PLUS            reduce using rule 57 (const -> FALSE .)
    MINUS           reduce using rule 57 (const -> FALSE .)
    MUL_MATRIX      reduce using rule 57 (const -> FALSE .)
    MUL_ELEM        reduce using rule 57 (const -> FALSE .)
    TRANSPOSE       reduce using rule 57 (const -> FALSE .)
    STL             reduce using rule 57 (const -> FALSE .)
    STR             reduce using rule 57 (const -> FALSE .)
    AND             reduce using rule 57 (const -> FALSE .)
    LESS            reduce using rule 57 (const -> FALSE .)
    GREATER         reduce using rule 57 (const -> FALSE .)
    COMMA           reduce using rule 57 (const -> FALSE .)
    NL              reduce using rule 57 (const -> FALSE .)
    RBRACKET        reduce using rule 57 (const -> FALSE .)
    COLON           reduce using rule 57 (const -> FALSE .)
    BEGINIF         reduce using rule 57 (const -> FALSE .)
    BEGIN           reduce using rule 57 (const -> FALSE .)
    R_FIGBRACKET    reduce using rule 57 (const -> FALSE .)
    BEGINFOR        reduce using rule 57 (const -> FALSE .)


state 62

    (58) const -> INT_DEC .

    PLUS            reduce using rule 58 (const -> INT_DEC .)
    MINUS           reduce using rule 58 (const -> INT_DEC .)
    MUL_MATRIX      reduce using rule 58 (const -> INT_DEC .)
    MUL_ELEM        reduce using rule 58 (const -> INT_DEC .)
    TRANSPOSE       reduce using rule 58 (const -> INT_DEC .)
    STL             reduce using rule 58 (const -> INT_DEC .)
    STR             reduce using rule 58 (const -> INT_DEC .)
    AND             reduce using rule 58 (const -> INT_DEC .)
    LESS            reduce using rule 58 (const -> INT_DEC .)
    GREATER         reduce using rule 58 (const -> INT_DEC .)
    COMMA           reduce using rule 58 (const -> INT_DEC .)
    NL              reduce using rule 58 (const -> INT_DEC .)
    RBRACKET        reduce using rule 58 (const -> INT_DEC .)
    COLON           reduce using rule 58 (const -> INT_DEC .)
    BEGINIF         reduce using rule 58 (const -> INT_DEC .)
    BEGIN           reduce using rule 58 (const -> INT_DEC .)
    R_FIGBRACKET    reduce using rule 58 (const -> INT_DEC .)
    BEGINFOR        reduce using rule 58 (const -> INT_DEC .)


state 63

    (59) const -> INT_BIN .

    PLUS            reduce using rule 59 (const -> INT_BIN .)
    MINUS           reduce using rule 59 (const -> INT_BIN .)
    MUL_MATRIX      reduce using rule 59 (const -> INT_BIN .)
    MUL_ELEM        reduce using rule 59 (const -> INT_BIN .)
    TRANSPOSE       reduce using rule 59 (const -> INT_BIN .)
    STL             reduce using rule 59 (const -> INT_BIN .)
    STR             reduce using rule 59 (const -> INT_BIN .)
    AND             reduce using rule 59 (const -> INT_BIN .)
    LESS            reduce using rule 59 (const -> INT_BIN .)
    GREATER         reduce using rule 59 (const -> INT_BIN .)
    COMMA           reduce using rule 59 (const -> INT_BIN .)
    NL              reduce using rule 59 (const -> INT_BIN .)
    RBRACKET        reduce using rule 59 (const -> INT_BIN .)
    COLON           reduce using rule 59 (const -> INT_BIN .)
    BEGINIF         reduce using rule 59 (const -> INT_BIN .)
    BEGIN           reduce using rule 59 (const -> INT_BIN .)
    R_FIGBRACKET    reduce using rule 59 (const -> INT_BIN .)
    BEGINFOR        reduce using rule 59 (const -> INT_BIN .)


state 64

    (77) assignment -> variable ASSIGNMENT . expression
    (78) assignment -> variable ASSIGNMENT . L_FIGBRACKET decl_list R_FIGBRACKET
    (97) function_call -> variable ASSIGNMENT . VARIABLE call_list
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 97
    VARIABLE        shift and go to state 98
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63

    variable                       shift and go to state 57
    expression                     shift and go to state 96
    math_expression                shift and go to state 55
    const                          shift and go to state 56

state 65

    (79) for -> FOR VARIABLE . EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> FOR VARIABLE . EQ expression COLON expression BEGIN NL stmt_list END

    EQ              shift and go to state 99


state 66

    (81) if -> IF math_expression . BEGINIF NL stmt_list ENDIF
    (82) if -> IF math_expression . BEGIN NL stmt_list END
    (41) expression -> math_expression .

    BEGINIF         shift and go to state 100
    BEGIN           shift and go to state 101
    PLUS            reduce using rule 41 (expression -> math_expression .)
    MINUS           reduce using rule 41 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 41 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 41 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 41 (expression -> math_expression .)
    STL             reduce using rule 41 (expression -> math_expression .)
    STR             reduce using rule 41 (expression -> math_expression .)
    AND             reduce using rule 41 (expression -> math_expression .)
    LESS            reduce using rule 41 (expression -> math_expression .)
    GREATER         reduce using rule 41 (expression -> math_expression .)


state 67

    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 68

    (72) operation -> MOVE LBRACKET . math_expression RBRACKET
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    math_expression                shift and go to state 102
    expression                     shift and go to state 67
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 69

    (87) function -> return_list EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> return_list EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    FUNCTION        shift and go to state 103


state 70

    (83) return_list -> return_list COMMA . type VARIABLE
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL
    (100) errors -> . errors error
    (101) errors -> . error

    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39
    error           shift and go to state 25

    type                           shift and go to state 104
    int                            shift and go to state 26
    bool                           shift and go to state 27
    errors                         shift and go to state 105

state 71

    (88) function -> FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (90) function -> FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 106


state 72

    (95) function_call -> ret_list ASSIGNMENT . VARIABLE call_list
    (96) function_call -> ret_list ASSIGNMENT . VARIABLE

    VARIABLE        shift and go to state 107


state 73

    (99) ret_list -> ret_list COMMA . variable
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    VARIABLE        shift and go to state 51

    variable                       shift and go to state 108

state 74

    (13) declaration -> type VARIABLE EQ . expression
    (14) declaration -> type VARIABLE EQ . L_FIGBRACKET decl_list R_FIGBRACKET
    (91) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 110
    FUNCTION        shift and go to state 111
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 109
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 75

    (85) call_list -> call_list COMMA . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 112
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 76

    (61) variable -> VARIABLE LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 113


state 77

    (65) index -> expression .
    (19) expr_list -> expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! reduce/reduce conflict for RBRACKET resolved using rule 19 (expr_list -> expression .)
    COMMA           reduce using rule 19 (expr_list -> expression .)
    COLON           reduce using rule 19 (expr_list -> expression .)
    RBRACKET        reduce using rule 19 (expr_list -> expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! RBRACKET        [ reduce using rule 65 (index -> expression .) ]


state 78

    (66) index -> expr_list .
    (67) index -> expr_list . ind
    (18) expr_list -> expr_list . COMMA expression
    (17) decl_list -> expr_list .
    (62) ind -> . COMMA
    (63) ind -> . COMMA COLON
    (64) ind -> . COLON COMMA

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 17 (decl_list -> expr_list .)
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           shift and go to state 115
    RBRACKET        reduce using rule 17 (decl_list -> expr_list .)
    COLON           shift and go to state 82

  ! RBRACKET        [ reduce using rule 66 (index -> expr_list .) ]
  ! COMMA           [ reduce using rule 17 (decl_list -> expr_list .) ]
  ! COLON           [ reduce using rule 17 (decl_list -> expr_list .) ]

    ind                            shift and go to state 114

state 79

    (68) index -> ind . expr_list
    (70) index -> ind . decl_list
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (15) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (16) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (17) decl_list -> . expr_list
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 83
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expr_list                      shift and go to state 116
    decl_list                      shift and go to state 117
    expression                     shift and go to state 118
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 80

    (69) index -> decl_list . ind
    (71) index -> decl_list .
    (16) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (62) ind -> . COMMA
    (63) ind -> . COMMA COLON
    (64) ind -> . COLON COMMA

    RBRACKET        reduce using rule 71 (index -> decl_list .)
    COMMA           shift and go to state 120
    COLON           shift and go to state 82

    ind                            shift and go to state 119

state 81

    (62) ind -> COMMA .
    (63) ind -> COMMA . COLON

    L_FIGBRACKET    reduce using rule 62 (ind -> COMMA .)
    SUM             reduce using rule 62 (ind -> COMMA .)
    DENY            reduce using rule 62 (ind -> COMMA .)
    TRUE            reduce using rule 62 (ind -> COMMA .)
    FALSE           reduce using rule 62 (ind -> COMMA .)
    INT_DEC         reduce using rule 62 (ind -> COMMA .)
    INT_BIN         reduce using rule 62 (ind -> COMMA .)
    VARIABLE        reduce using rule 62 (ind -> COMMA .)
    COLON           shift and go to state 121


state 82

    (64) ind -> COLON . COMMA

    COMMA           shift and go to state 122


state 83

    (15) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expr_list                      shift and go to state 123
    expression                     shift and go to state 118
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 84

    (44) math_expression -> expression PLUS . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 124
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 85

    (45) math_expression -> expression MINUS . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 125
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 86

    (46) math_expression -> expression MUL_MATRIX . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 126
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 87

    (47) math_expression -> expression MUL_ELEM . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 127
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 88

    (48) math_expression -> expression TRANSPOSE .

    PLUS            reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    MINUS           reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    MUL_MATRIX      reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    MUL_ELEM        reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    STL             reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    STR             reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    AND             reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    LESS            reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    GREATER         reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    COMMA           reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    NL              reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    BEGINIF         reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    BEGIN           reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    RBRACKET        reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    COLON           reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    R_FIGBRACKET    reduce using rule 48 (math_expression -> expression TRANSPOSE .)
    BEGINFOR        reduce using rule 48 (math_expression -> expression TRANSPOSE .)


state 89

    (50) math_expression -> expression STL .

    PLUS            reduce using rule 50 (math_expression -> expression STL .)
    MINUS           reduce using rule 50 (math_expression -> expression STL .)
    MUL_MATRIX      reduce using rule 50 (math_expression -> expression STL .)
    MUL_ELEM        reduce using rule 50 (math_expression -> expression STL .)
    TRANSPOSE       reduce using rule 50 (math_expression -> expression STL .)
    STL             reduce using rule 50 (math_expression -> expression STL .)
    STR             reduce using rule 50 (math_expression -> expression STL .)
    AND             reduce using rule 50 (math_expression -> expression STL .)
    LESS            reduce using rule 50 (math_expression -> expression STL .)
    GREATER         reduce using rule 50 (math_expression -> expression STL .)
    COMMA           reduce using rule 50 (math_expression -> expression STL .)
    NL              reduce using rule 50 (math_expression -> expression STL .)
    BEGINIF         reduce using rule 50 (math_expression -> expression STL .)
    BEGIN           reduce using rule 50 (math_expression -> expression STL .)
    RBRACKET        reduce using rule 50 (math_expression -> expression STL .)
    COLON           reduce using rule 50 (math_expression -> expression STL .)
    R_FIGBRACKET    reduce using rule 50 (math_expression -> expression STL .)
    BEGINFOR        reduce using rule 50 (math_expression -> expression STL .)


state 90

    (51) math_expression -> expression STR .

    PLUS            reduce using rule 51 (math_expression -> expression STR .)
    MINUS           reduce using rule 51 (math_expression -> expression STR .)
    MUL_MATRIX      reduce using rule 51 (math_expression -> expression STR .)
    MUL_ELEM        reduce using rule 51 (math_expression -> expression STR .)
    TRANSPOSE       reduce using rule 51 (math_expression -> expression STR .)
    STL             reduce using rule 51 (math_expression -> expression STR .)
    STR             reduce using rule 51 (math_expression -> expression STR .)
    AND             reduce using rule 51 (math_expression -> expression STR .)
    LESS            reduce using rule 51 (math_expression -> expression STR .)
    GREATER         reduce using rule 51 (math_expression -> expression STR .)
    COMMA           reduce using rule 51 (math_expression -> expression STR .)
    NL              reduce using rule 51 (math_expression -> expression STR .)
    BEGINIF         reduce using rule 51 (math_expression -> expression STR .)
    BEGIN           reduce using rule 51 (math_expression -> expression STR .)
    RBRACKET        reduce using rule 51 (math_expression -> expression STR .)
    COLON           reduce using rule 51 (math_expression -> expression STR .)
    R_FIGBRACKET    reduce using rule 51 (math_expression -> expression STR .)
    BEGINFOR        reduce using rule 51 (math_expression -> expression STR .)


state 91

    (53) math_expression -> expression AND . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 128
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 92

    (54) math_expression -> expression LESS . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 129
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 93

    (55) math_expression -> expression GREATER . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 130
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 94

    (49) math_expression -> SUM LBRACKET . expression RBRACKET
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 131
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 95

    (52) math_expression -> DENY expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 52 (math_expression -> DENY expression .)
    NL              reduce using rule 52 (math_expression -> DENY expression .)
    BEGINIF         reduce using rule 52 (math_expression -> DENY expression .)
    BEGIN           reduce using rule 52 (math_expression -> DENY expression .)
    RBRACKET        reduce using rule 52 (math_expression -> DENY expression .)
    COLON           reduce using rule 52 (math_expression -> DENY expression .)
    R_FIGBRACKET    reduce using rule 52 (math_expression -> DENY expression .)
    BEGINFOR        reduce using rule 52 (math_expression -> DENY expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! MINUS           [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! MUL_MATRIX      [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! MUL_ELEM        [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! TRANSPOSE       [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! STL             [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! STR             [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! AND             [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! LESS            [ reduce using rule 52 (math_expression -> DENY expression .) ]
  ! GREATER         [ reduce using rule 52 (math_expression -> DENY expression .) ]


state 96

    (77) assignment -> variable ASSIGNMENT expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    NL              reduce using rule 77 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 97

    (78) assignment -> variable ASSIGNMENT L_FIGBRACKET . decl_list R_FIGBRACKET
    (15) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (16) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (17) decl_list -> . expr_list
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 83
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 57
    decl_list                      shift and go to state 132
    expr_list                      shift and go to state 133
    expression                     shift and go to state 118
    math_expression                shift and go to state 55
    const                          shift and go to state 56

state 98

    (97) function_call -> variable ASSIGNMENT VARIABLE . call_list
    (60) variable -> VARIABLE .
    (61) variable -> VARIABLE . LBRACKET index RBRACKET
    (85) call_list -> . call_list COMMA expression
    (86) call_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    PLUS            reduce using rule 60 (variable -> VARIABLE .)
    MINUS           reduce using rule 60 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 60 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 60 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 60 (variable -> VARIABLE .)
    STL             reduce using rule 60 (variable -> VARIABLE .)
    STR             reduce using rule 60 (variable -> VARIABLE .)
    AND             reduce using rule 60 (variable -> VARIABLE .)
    LESS            reduce using rule 60 (variable -> VARIABLE .)
    GREATER         reduce using rule 60 (variable -> VARIABLE .)
    NL              reduce using rule 60 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 53
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 57
    call_list                      shift and go to state 134
    expression                     shift and go to state 54
    math_expression                shift and go to state 55
    const                          shift and go to state 56

state 99

    (79) for -> FOR VARIABLE EQ . expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> FOR VARIABLE EQ . expression COLON expression BEGIN NL stmt_list END
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 135
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 100

    (81) if -> IF math_expression BEGINIF . NL stmt_list ENDIF

    NL              shift and go to state 136


state 101

    (82) if -> IF math_expression BEGIN . NL stmt_list END

    NL              shift and go to state 137


state 102

    (72) operation -> MOVE LBRACKET math_expression . RBRACKET
    (41) expression -> math_expression .

    RBRACKET        shift and go to state 138
    PLUS            reduce using rule 41 (expression -> math_expression .)
    MINUS           reduce using rule 41 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 41 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 41 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 41 (expression -> math_expression .)
    STL             reduce using rule 41 (expression -> math_expression .)
    STR             reduce using rule 41 (expression -> math_expression .)
    AND             reduce using rule 41 (expression -> math_expression .)
    LESS            reduce using rule 41 (expression -> math_expression .)
    GREATER         reduce using rule 41 (expression -> math_expression .)


state 103

    (87) function -> return_list EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> return_list EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 139


state 104

    (83) return_list -> return_list COMMA type . VARIABLE

    VARIABLE        shift and go to state 140


state 105

    (28) type -> errors .
    (100) errors -> errors . error

    VARIABLE        reduce using rule 28 (type -> errors .)
    error           shift and go to state 49


state 106

    (88) function -> FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (90) function -> FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (35) func_list -> . func_list COMMA func
    (36) func_list -> . func
    (37) func -> . type VARIABLE
    (38) func -> . type VARIABLE EQ const
    (39) func -> . type VARIABLE EQ decl_list
    (40) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL
    (100) errors -> . errors error
    (101) errors -> . error

    RBRACKET        shift and go to state 142
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39
    error           shift and go to state 25

    func_list                      shift and go to state 141
    func                           shift and go to state 143
    type                           shift and go to state 144
    int                            shift and go to state 26
    bool                           shift and go to state 27
    errors                         shift and go to state 105

state 107

    (95) function_call -> ret_list ASSIGNMENT VARIABLE . call_list
    (96) function_call -> ret_list ASSIGNMENT VARIABLE .
    (85) call_list -> . call_list COMMA expression
    (86) call_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    NL              reduce using rule 96 (function_call -> ret_list ASSIGNMENT VARIABLE .)
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    call_list                      shift and go to state 145
    expression                     shift and go to state 54
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 108

    (99) ret_list -> ret_list COMMA variable .

    ASSIGNMENT      reduce using rule 99 (ret_list -> ret_list COMMA variable .)
    COMMA           reduce using rule 99 (ret_list -> ret_list COMMA variable .)


state 109

    (13) declaration -> type VARIABLE EQ expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    NL              reduce using rule 13 (declaration -> type VARIABLE EQ expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 110

    (14) declaration -> type VARIABLE EQ L_FIGBRACKET . decl_list R_FIGBRACKET
    (15) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (16) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (17) decl_list -> . expr_list
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 83
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    decl_list                      shift and go to state 146
    expr_list                      shift and go to state 133
    expression                     shift and go to state 118
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 111

    (91) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 147


state 112

    (85) call_list -> call_list COMMA expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 85 (call_list -> call_list COMMA expression .)
    NL              reduce using rule 85 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 113

    (61) variable -> VARIABLE LBRACKET index RBRACKET .

    ASSIGNMENT      reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COMMA           reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    PLUS            reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MINUS           reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_MATRIX      reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_ELEM        reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    TRANSPOSE       reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STL             reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STR             reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    AND             reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    LESS            reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    GREATER         reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    NL              reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    RBRACKET        reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COLON           reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINIF         reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGIN           reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    R_FIGBRACKET    reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINFOR        reduce using rule 61 (variable -> VARIABLE LBRACKET index RBRACKET .)


state 114

    (67) index -> expr_list ind .

    RBRACKET        reduce using rule 67 (index -> expr_list ind .)


state 115

    (18) expr_list -> expr_list COMMA . expression
    (62) ind -> COMMA .
    (63) ind -> COMMA . COLON
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    RBRACKET        reduce using rule 62 (ind -> COMMA .)
    COLON           shift and go to state 121
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 148
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 116

    (68) index -> ind expr_list .
    (18) expr_list -> expr_list . COMMA expression
    (17) decl_list -> expr_list .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 17 (decl_list -> expr_list .)
    COMMA           shift and go to state 149
    RBRACKET        reduce using rule 17 (decl_list -> expr_list .)

  ! RBRACKET        [ reduce using rule 68 (index -> ind expr_list .) ]
  ! COMMA           [ reduce using rule 17 (decl_list -> expr_list .) ]


state 117

    (70) index -> ind decl_list .
    (16) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    RBRACKET        reduce using rule 70 (index -> ind decl_list .)
    COMMA           shift and go to state 150


state 118

    (19) expr_list -> expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 19 (expr_list -> expression .)
    RBRACKET        reduce using rule 19 (expr_list -> expression .)
    R_FIGBRACKET    reduce using rule 19 (expr_list -> expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 119

    (69) index -> decl_list ind .

    RBRACKET        reduce using rule 69 (index -> decl_list ind .)


state 120

    (16) decl_list -> decl_list COMMA . L_FIGBRACKET decl_list R_FIGBRACKET
    (62) ind -> COMMA .
    (63) ind -> COMMA . COLON

    L_FIGBRACKET    shift and go to state 151
    RBRACKET        reduce using rule 62 (ind -> COMMA .)
    COLON           shift and go to state 121


state 121

    (63) ind -> COMMA COLON .

    L_FIGBRACKET    reduce using rule 63 (ind -> COMMA COLON .)
    SUM             reduce using rule 63 (ind -> COMMA COLON .)
    DENY            reduce using rule 63 (ind -> COMMA COLON .)
    TRUE            reduce using rule 63 (ind -> COMMA COLON .)
    FALSE           reduce using rule 63 (ind -> COMMA COLON .)
    INT_DEC         reduce using rule 63 (ind -> COMMA COLON .)
    INT_BIN         reduce using rule 63 (ind -> COMMA COLON .)
    VARIABLE        reduce using rule 63 (ind -> COMMA COLON .)
    RBRACKET        reduce using rule 63 (ind -> COMMA COLON .)


state 122

    (64) ind -> COLON COMMA .

    L_FIGBRACKET    reduce using rule 64 (ind -> COLON COMMA .)
    SUM             reduce using rule 64 (ind -> COLON COMMA .)
    DENY            reduce using rule 64 (ind -> COLON COMMA .)
    TRUE            reduce using rule 64 (ind -> COLON COMMA .)
    FALSE           reduce using rule 64 (ind -> COLON COMMA .)
    INT_DEC         reduce using rule 64 (ind -> COLON COMMA .)
    INT_BIN         reduce using rule 64 (ind -> COLON COMMA .)
    VARIABLE        reduce using rule 64 (ind -> COLON COMMA .)
    RBRACKET        reduce using rule 64 (ind -> COLON COMMA .)


state 123

    (15) decl_list -> L_FIGBRACKET expr_list . R_FIGBRACKET
    (18) expr_list -> expr_list . COMMA expression

    R_FIGBRACKET    shift and go to state 152
    COMMA           shift and go to state 149


state 124

    (44) math_expression -> expression PLUS expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 44 (math_expression -> expression PLUS expression .)
    NL              reduce using rule 44 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 44 (math_expression -> expression PLUS expression .)
    BEGIN           reduce using rule 44 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 44 (math_expression -> expression PLUS expression .)
    COLON           reduce using rule 44 (math_expression -> expression PLUS expression .)
    R_FIGBRACKET    reduce using rule 44 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 44 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! STL             [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! STR             [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 44 (math_expression -> expression PLUS expression .) ]


state 125

    (45) math_expression -> expression MINUS expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 45 (math_expression -> expression MINUS expression .)
    NL              reduce using rule 45 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 45 (math_expression -> expression MINUS expression .)
    BEGIN           reduce using rule 45 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 45 (math_expression -> expression MINUS expression .)
    COLON           reduce using rule 45 (math_expression -> expression MINUS expression .)
    R_FIGBRACKET    reduce using rule 45 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 45 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! STL             [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! STR             [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 45 (math_expression -> expression MINUS expression .) ]


state 126

    (46) math_expression -> expression MUL_MATRIX expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    NL              reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    BEGINIF         reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    BEGIN           reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    RBRACKET        reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    COLON           reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    R_FIGBRACKET    reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    BEGINFOR        reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MINUS           [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_MATRIX      [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_ELEM        [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! TRANSPOSE       [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STL             [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STR             [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! AND             [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! LESS            [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]
  ! GREATER         [ reduce using rule 46 (math_expression -> expression MUL_MATRIX expression .) ]


state 127

    (47) math_expression -> expression MUL_ELEM expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    NL              reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    BEGINIF         reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    BEGIN           reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    RBRACKET        reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    COLON           reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    R_FIGBRACKET    reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    BEGINFOR        reduce using rule 47 (math_expression -> expression MUL_ELEM expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! MINUS           [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_MATRIX      [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_ELEM        [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! TRANSPOSE       [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! STL             [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! STR             [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! AND             [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! LESS            [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]
  ! GREATER         [ reduce using rule 47 (math_expression -> expression MUL_ELEM expression .) ]


state 128

    (53) math_expression -> expression AND expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 53 (math_expression -> expression AND expression .)
    NL              reduce using rule 53 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 53 (math_expression -> expression AND expression .)
    BEGIN           reduce using rule 53 (math_expression -> expression AND expression .)
    RBRACKET        reduce using rule 53 (math_expression -> expression AND expression .)
    COLON           reduce using rule 53 (math_expression -> expression AND expression .)
    R_FIGBRACKET    reduce using rule 53 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 53 (math_expression -> expression AND expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! MUL_MATRIX      [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! MUL_ELEM        [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! TRANSPOSE       [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! STL             [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! STR             [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 53 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 53 (math_expression -> expression AND expression .) ]


state 129

    (54) math_expression -> expression LESS expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 54 (math_expression -> expression LESS expression .)
    NL              reduce using rule 54 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 54 (math_expression -> expression LESS expression .)
    BEGIN           reduce using rule 54 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 54 (math_expression -> expression LESS expression .)
    COLON           reduce using rule 54 (math_expression -> expression LESS expression .)
    R_FIGBRACKET    reduce using rule 54 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 54 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! MUL_ELEM        [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! TRANSPOSE       [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! STL             [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! STR             [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! AND             [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 54 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 54 (math_expression -> expression LESS expression .) ]


state 130

    (55) math_expression -> expression GREATER expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 55 (math_expression -> expression GREATER expression .)
    NL              reduce using rule 55 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 55 (math_expression -> expression GREATER expression .)
    BEGIN           reduce using rule 55 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 55 (math_expression -> expression GREATER expression .)
    COLON           reduce using rule 55 (math_expression -> expression GREATER expression .)
    R_FIGBRACKET    reduce using rule 55 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 55 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93

  ! PLUS            [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! MUL_MATRIX      [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! MUL_ELEM        [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! TRANSPOSE       [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! STL             [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! STR             [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! AND             [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 55 (math_expression -> expression GREATER expression .) ]


state 131

    (49) math_expression -> SUM LBRACKET expression . RBRACKET
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    RBRACKET        shift and go to state 153
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 132

    (78) assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list . R_FIGBRACKET
    (16) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 154
    COMMA           shift and go to state 150


state 133

    (17) decl_list -> expr_list .
    (18) expr_list -> expr_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    R_FIGBRACKET    reduce using rule 17 (decl_list -> expr_list .)
    RBRACKET        reduce using rule 17 (decl_list -> expr_list .)
    COMMA           shift and go to state 149

  ! COMMA           [ reduce using rule 17 (decl_list -> expr_list .) ]


state 134

    (97) function_call -> variable ASSIGNMENT VARIABLE call_list .
    (85) call_list -> call_list . COMMA expression

    NL              reduce using rule 97 (function_call -> variable ASSIGNMENT VARIABLE call_list .)
    COMMA           shift and go to state 75


state 135

    (79) for -> FOR VARIABLE EQ expression . COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> FOR VARIABLE EQ expression . COLON expression BEGIN NL stmt_list END
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    COLON           shift and go to state 155
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 136

    (81) if -> IF math_expression BEGINIF NL . stmt_list ENDIF
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    stmt_list                      shift and go to state 156
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 137

    (82) if -> IF math_expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    stmt_list                      shift and go to state 157
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 138

    (72) operation -> MOVE LBRACKET math_expression RBRACKET .

    NL              reduce using rule 72 (operation -> MOVE LBRACKET math_expression RBRACKET .)


state 139

    (87) function -> return_list EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> return_list EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 158


state 140

    (83) return_list -> return_list COMMA type VARIABLE .

    EQ              reduce using rule 83 (return_list -> return_list COMMA type VARIABLE .)
    COMMA           reduce using rule 83 (return_list -> return_list COMMA type VARIABLE .)


state 141

    (88) function -> FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (35) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 159
    COMMA           shift and go to state 160


state 142

    (90) function -> FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 161


state 143

    (36) func_list -> func .

    RBRACKET        reduce using rule 36 (func_list -> func .)
    COMMA           reduce using rule 36 (func_list -> func .)


state 144

    (37) func -> type . VARIABLE
    (38) func -> type . VARIABLE EQ const
    (39) func -> type . VARIABLE EQ decl_list
    (40) func -> type . VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET

    VARIABLE        shift and go to state 162


state 145

    (95) function_call -> ret_list ASSIGNMENT VARIABLE call_list .
    (85) call_list -> call_list . COMMA expression

    NL              reduce using rule 95 (function_call -> ret_list ASSIGNMENT VARIABLE call_list .)
    COMMA           shift and go to state 75


state 146

    (14) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list . R_FIGBRACKET
    (16) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 163
    COMMA           shift and go to state 150


state 147

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 164


state 148

    (18) expr_list -> expr_list COMMA expression .
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 18 (expr_list -> expr_list COMMA expression .)
    COLON           reduce using rule 18 (expr_list -> expr_list COMMA expression .)
    RBRACKET        reduce using rule 18 (expr_list -> expr_list COMMA expression .)
    R_FIGBRACKET    reduce using rule 18 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 149

    (18) expr_list -> expr_list COMMA . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 148
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 150

    (16) decl_list -> decl_list COMMA . L_FIGBRACKET decl_list R_FIGBRACKET

    L_FIGBRACKET    shift and go to state 151


state 151

    (16) decl_list -> decl_list COMMA L_FIGBRACKET . decl_list R_FIGBRACKET
    (15) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (16) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (17) decl_list -> . expr_list
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 83
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    decl_list                      shift and go to state 165
    expr_list                      shift and go to state 133
    expression                     shift and go to state 118
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 152

    (15) decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .

    COMMA           reduce using rule 15 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    COLON           reduce using rule 15 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    RBRACKET        reduce using rule 15 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    R_FIGBRACKET    reduce using rule 15 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)


state 153

    (49) math_expression -> SUM LBRACKET expression RBRACKET .

    PLUS            reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_MATRIX      reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_ELEM        reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    TRANSPOSE       reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STL             reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STR             reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    AND             reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    LESS            reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    NL              reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINIF         reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COLON           reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    R_FIGBRACKET    reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINFOR        reduce using rule 49 (math_expression -> SUM LBRACKET expression RBRACKET .)


state 154

    (78) assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 78 (assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET .)


state 155

    (79) for -> FOR VARIABLE EQ expression COLON . expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> FOR VARIABLE EQ expression COLON . expression BEGIN NL stmt_list END
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    expression                     shift and go to state 166
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 156

    (81) if -> IF math_expression BEGINIF NL stmt_list . ENDIF
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    ENDIF           shift and go to state 167
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 157

    (82) if -> IF math_expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 168
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 158

    (87) function -> return_list EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> return_list EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (35) func_list -> . func_list COMMA func
    (36) func_list -> . func
    (37) func -> . type VARIABLE
    (38) func -> . type VARIABLE EQ const
    (39) func -> . type VARIABLE EQ decl_list
    (40) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL
    (100) errors -> . errors error
    (101) errors -> . error

    RBRACKET        shift and go to state 170
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39
    error           shift and go to state 25

    func_list                      shift and go to state 169
    func                           shift and go to state 143
    type                           shift and go to state 144
    int                            shift and go to state 26
    bool                           shift and go to state 27
    errors                         shift and go to state 105

state 159

    (88) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 171


state 160

    (35) func_list -> func_list COMMA . func
    (37) func -> . type VARIABLE
    (38) func -> . type VARIABLE EQ const
    (39) func -> . type VARIABLE EQ decl_list
    (40) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL
    (100) errors -> . errors error
    (101) errors -> . error

    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39
    error           shift and go to state 25

    func                           shift and go to state 172
    type                           shift and go to state 144
    int                            shift and go to state 26
    bool                           shift and go to state 27
    errors                         shift and go to state 105

state 161

    (90) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 173


state 162

    (37) func -> type VARIABLE .
    (38) func -> type VARIABLE . EQ const
    (39) func -> type VARIABLE . EQ decl_list
    (40) func -> type VARIABLE . EQ L_FIGBRACKET decl_list R_FIGBRACKET

    RBRACKET        reduce using rule 37 (func -> type VARIABLE .)
    COMMA           reduce using rule 37 (func -> type VARIABLE .)
    EQ              shift and go to state 174


state 163

    (14) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 14 (declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)


state 164

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (35) func_list -> . func_list COMMA func
    (36) func_list -> . func
    (37) func -> . type VARIABLE
    (38) func -> . type VARIABLE EQ const
    (39) func -> . type VARIABLE EQ decl_list
    (40) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL
    (100) errors -> . errors error
    (101) errors -> . error

    RBRACKET        shift and go to state 176
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39
    error           shift and go to state 25

    type                           shift and go to state 144
    func_list                      shift and go to state 175
    func                           shift and go to state 143
    int                            shift and go to state 26
    bool                           shift and go to state 27
    errors                         shift and go to state 105

state 165

    (16) decl_list -> decl_list COMMA L_FIGBRACKET decl_list . R_FIGBRACKET
    (16) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 177
    COMMA           shift and go to state 150


state 166

    (79) for -> FOR VARIABLE EQ expression COLON expression . BEGINFOR NL stmt_list ENDFOR
    (80) for -> FOR VARIABLE EQ expression COLON expression . BEGIN NL stmt_list END
    (44) math_expression -> expression . PLUS expression
    (45) math_expression -> expression . MINUS expression
    (46) math_expression -> expression . MUL_MATRIX expression
    (47) math_expression -> expression . MUL_ELEM expression
    (48) math_expression -> expression . TRANSPOSE
    (50) math_expression -> expression . STL
    (51) math_expression -> expression . STR
    (53) math_expression -> expression . AND expression
    (54) math_expression -> expression . LESS expression
    (55) math_expression -> expression . GREATER expression

    BEGINFOR        shift and go to state 178
    BEGIN           shift and go to state 179
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL_MATRIX      shift and go to state 86
    MUL_ELEM        shift and go to state 87
    TRANSPOSE       shift and go to state 88
    STL             shift and go to state 89
    STR             shift and go to state 90
    AND             shift and go to state 91
    LESS            shift and go to state 92
    GREATER         shift and go to state 93


state 167

    (81) if -> IF math_expression BEGINIF NL stmt_list ENDIF .

    NL              reduce using rule 81 (if -> IF math_expression BEGINIF NL stmt_list ENDIF .)


state 168

    (82) if -> IF math_expression BEGIN NL stmt_list END .

    NL              reduce using rule 82 (if -> IF math_expression BEGIN NL stmt_list END .)


state 169

    (87) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (35) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 180
    COMMA           shift and go to state 160


state 170

    (89) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 181


state 171

    (88) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 182


state 172

    (35) func_list -> func_list COMMA func .

    RBRACKET        reduce using rule 35 (func_list -> func_list COMMA func .)
    COMMA           reduce using rule 35 (func_list -> func_list COMMA func .)


state 173

    (90) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    stmt_list                      shift and go to state 183
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 174

    (38) func -> type VARIABLE EQ . const
    (39) func -> type VARIABLE EQ . decl_list
    (40) func -> type VARIABLE EQ . L_FIGBRACKET decl_list R_FIGBRACKET
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (15) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (16) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (17) decl_list -> . expr_list
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 186
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    VARIABLE        shift and go to state 51

    const                          shift and go to state 184
    decl_list                      shift and go to state 185
    expr_list                      shift and go to state 133
    expression                     shift and go to state 118
    math_expression                shift and go to state 55
    variable                       shift and go to state 57

state 175

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (35) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 187
    COMMA           shift and go to state 160


state 176

    (92) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 188


state 177

    (16) decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .

    COMMA           reduce using rule 16 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    COLON           reduce using rule 16 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    RBRACKET        reduce using rule 16 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    R_FIGBRACKET    reduce using rule 16 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)


state 178

    (79) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR . NL stmt_list ENDFOR

    NL              shift and go to state 189


state 179

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGIN . NL stmt_list END

    NL              shift and go to state 190


state 180

    (87) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 191


state 181

    (89) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 192


state 182

    (88) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    stmt_list                      shift and go to state 193
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 183

    (90) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 194
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 184

    (38) func -> type VARIABLE EQ const .
    (42) expression -> const .

  ! reduce/reduce conflict for COMMA resolved using rule 38 (func -> type VARIABLE EQ const .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 38 (func -> type VARIABLE EQ const .)
    RBRACKET        reduce using rule 38 (func -> type VARIABLE EQ const .)
    COMMA           reduce using rule 38 (func -> type VARIABLE EQ const .)
    PLUS            reduce using rule 42 (expression -> const .)
    MINUS           reduce using rule 42 (expression -> const .)
    MUL_MATRIX      reduce using rule 42 (expression -> const .)
    MUL_ELEM        reduce using rule 42 (expression -> const .)
    TRANSPOSE       reduce using rule 42 (expression -> const .)
    STL             reduce using rule 42 (expression -> const .)
    STR             reduce using rule 42 (expression -> const .)
    AND             reduce using rule 42 (expression -> const .)
    LESS            reduce using rule 42 (expression -> const .)
    GREATER         reduce using rule 42 (expression -> const .)

  ! COMMA           [ reduce using rule 42 (expression -> const .) ]
  ! RBRACKET        [ reduce using rule 42 (expression -> const .) ]


state 185

    (39) func -> type VARIABLE EQ decl_list .
    (16) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    RBRACKET        reduce using rule 39 (func -> type VARIABLE EQ decl_list .)
    COMMA           shift and go to state 150

  ! COMMA           [ reduce using rule 39 (func -> type VARIABLE EQ decl_list .) ]


state 186

    (40) func -> type VARIABLE EQ L_FIGBRACKET . decl_list R_FIGBRACKET
    (15) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (15) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (16) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (17) decl_list -> . expr_list
    (18) expr_list -> . expr_list COMMA expression
    (19) expr_list -> . expression
    (41) expression -> . math_expression
    (42) expression -> . const
    (43) expression -> . variable
    (44) math_expression -> . expression PLUS expression
    (45) math_expression -> . expression MINUS expression
    (46) math_expression -> . expression MUL_MATRIX expression
    (47) math_expression -> . expression MUL_ELEM expression
    (48) math_expression -> . expression TRANSPOSE
    (49) math_expression -> . SUM LBRACKET expression RBRACKET
    (50) math_expression -> . expression STL
    (51) math_expression -> . expression STR
    (52) math_expression -> . DENY expression
    (53) math_expression -> . expression AND expression
    (54) math_expression -> . expression LESS expression
    (55) math_expression -> . expression GREATER expression
    (56) const -> . TRUE
    (57) const -> . FALSE
    (58) const -> . INT_DEC
    (59) const -> . INT_BIN
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 83
    SUM             shift and go to state 58
    DENY            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    INT_DEC         shift and go to state 62
    INT_BIN         shift and go to state 63
    VARIABLE        shift and go to state 51

    decl_list                      shift and go to state 195
    expr_list                      shift and go to state 196
    expression                     shift and go to state 118
    math_expression                shift and go to state 55
    const                          shift and go to state 56
    variable                       shift and go to state 57

state 187

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 197


state 188

    (92) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 198


state 189

    (79) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL . stmt_list ENDFOR
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    stmt_list                      shift and go to state 199
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 190

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    stmt_list                      shift and go to state 200
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 191

    (87) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 201


state 192

    (89) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    return_list                    shift and go to state 22
    stmt_list                      shift and go to state 202
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 193

    (88) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 203
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 194

    (90) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 90 (function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 195

    (40) func -> type VARIABLE EQ L_FIGBRACKET decl_list . R_FIGBRACKET
    (16) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 204
    COMMA           shift and go to state 150


state 196

    (15) decl_list -> L_FIGBRACKET expr_list . R_FIGBRACKET
    (17) decl_list -> expr_list .
    (18) expr_list -> expr_list . COMMA expression

  ! shift/reduce conflict for R_FIGBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    R_FIGBRACKET    shift and go to state 152
    COMMA           shift and go to state 149

  ! R_FIGBRACKET    [ reduce using rule 17 (decl_list -> expr_list .) ]
  ! COMMA           [ reduce using rule 17 (decl_list -> expr_list .) ]


state 197

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 205


state 198

    (92) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    type                           shift and go to state 12
    stmt_list                      shift and go to state 206
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 199

    (79) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list . ENDFOR
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    ENDFOR          shift and go to state 207
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 200

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 208
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 201

    (87) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    return_list                    shift and go to state 22
    stmt_list                      shift and go to state 209
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 202

    (89) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 210
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    return_list                    shift and go to state 22
    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 203

    (88) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 88 (function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 204

    (40) func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .

    RBRACKET        reduce using rule 40 (func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)
    COMMA           reduce using rule 40 (func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)


state 205

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    type                           shift and go to state 12
    stmt_list                      shift and go to state 211
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 206

    (92) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 212
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    type                           shift and go to state 12
    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 207

    (79) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .

    NL              reduce using rule 79 (for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .)


state 208

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .

    NL              reduce using rule 80 (for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .)


state 209

    (87) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 213
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    return_list                    shift and go to state 22
    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    type                           shift and go to state 12
    variable                       shift and go to state 14
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 210

    (89) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 89 (function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 211

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) statement -> . errors NL
    (12) statement -> . errors
    (13) declaration -> . type VARIABLE EQ expression
    (14) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (81) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (82) if -> . IF math_expression BEGIN NL stmt_list END
    (72) operation -> . MOVE LBRACKET math_expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (87) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (88) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (91) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function_call -> . VARIABLE
    (94) function_call -> . VARIABLE call_list
    (95) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (96) function_call -> . ret_list ASSIGNMENT VARIABLE
    (97) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (100) errors -> . errors error
    (101) errors -> . error
    (20) type -> . int
    (21) type -> . bool
    (28) type -> . errors
    (60) variable -> . VARIABLE
    (61) variable -> . VARIABLE LBRACKET index RBRACKET
    (83) return_list -> . return_list COMMA type VARIABLE
    (84) return_list -> . type VARIABLE
    (98) ret_list -> . variable
    (99) ret_list -> . ret_list COMMA variable
    (22) int -> . INT
    (23) int -> . CINT
    (24) int -> . VINT
    (25) int -> . MINT
    (26) int -> . CVINT
    (27) int -> . CMINT
    (29) bool -> . BOOL
    (30) bool -> . CBOOL
    (31) bool -> . VBOOL
    (32) bool -> . MBOOL
    (33) bool -> . CVBOOL
    (34) bool -> . CMBOOL

    END             shift and go to state 214
    FOR             shift and go to state 15
    IF              shift and go to state 16
    MOVE            shift and go to state 17
    RIGHT           shift and go to state 18
    LEFT            shift and go to state 19
    WALL            shift and go to state 20
    EXIT            shift and go to state 21
    FUNCTION        shift and go to state 23
    VARIABLE        shift and go to state 13
    error           shift and go to state 25
    INT             shift and go to state 28
    CINT            shift and go to state 29
    VINT            shift and go to state 30
    MINT            shift and go to state 31
    CVINT           shift and go to state 32
    CMINT           shift and go to state 33
    BOOL            shift and go to state 34
    CBOOL           shift and go to state 35
    VBOOL           shift and go to state 36
    MBOOL           shift and go to state 37
    CVBOOL          shift and go to state 38
    CMBOOL          shift and go to state 39

    type                           shift and go to state 12
    statement                      shift and go to state 40
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    errors                         shift and go to state 11
    variable                       shift and go to state 14
    return_list                    shift and go to state 22
    ret_list                       shift and go to state 24
    int                            shift and go to state 26
    bool                           shift and go to state 27

state 212

    (92) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 92 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 213

    (87) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 87 (function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 214

    (91) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 91 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 11 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMENT in state 14 resolved as shift
WARNING: shift/reduce conflict for EQ in state 50 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 78 resolved as shift
WARNING: shift/reduce conflict for COLON in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 95 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 95 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 95 resolved as shift
WARNING: shift/reduce conflict for STL in state 95 resolved as shift
WARNING: shift/reduce conflict for STR in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 124 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 124 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 124 resolved as shift
WARNING: shift/reduce conflict for STL in state 124 resolved as shift
WARNING: shift/reduce conflict for STR in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for LESS in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 125 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 125 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 125 resolved as shift
WARNING: shift/reduce conflict for STL in state 125 resolved as shift
WARNING: shift/reduce conflict for STR in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 126 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 126 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 126 resolved as shift
WARNING: shift/reduce conflict for STL in state 126 resolved as shift
WARNING: shift/reduce conflict for STR in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 127 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 127 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 127 resolved as shift
WARNING: shift/reduce conflict for STL in state 127 resolved as shift
WARNING: shift/reduce conflict for STR in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for LESS in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 128 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 128 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 128 resolved as shift
WARNING: shift/reduce conflict for STL in state 128 resolved as shift
WARNING: shift/reduce conflict for STR in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for LESS in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 129 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 129 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 129 resolved as shift
WARNING: shift/reduce conflict for STL in state 129 resolved as shift
WARNING: shift/reduce conflict for STR in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for LESS in state 129 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 130 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 130 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 130 resolved as shift
WARNING: shift/reduce conflict for STL in state 130 resolved as shift
WARNING: shift/reduce conflict for STR in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS in state 130 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 130 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 133 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 185 resolved as shift
WARNING: shift/reduce conflict for R_FIGBRACKET in state 196 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 196 resolved as shift
WARNING: reduce/reduce conflict in state 11 resolved using rule (statement -> errors)
WARNING: rejected rule (type -> errors) in state 11
WARNING: reduce/reduce conflict in state 77 resolved using rule (expr_list -> expression)
WARNING: rejected rule (index -> expression) in state 77
WARNING: reduce/reduce conflict in state 78 resolved using rule (decl_list -> expr_list)
WARNING: rejected rule (index -> expr_list) in state 78
WARNING: reduce/reduce conflict in state 116 resolved using rule (decl_list -> expr_list)
WARNING: rejected rule (index -> ind expr_list) in state 116
WARNING: reduce/reduce conflict in state 184 resolved using rule (func -> type VARIABLE EQ const)
WARNING: rejected rule (expression -> const) in state 184
WARNING: Rule (index -> expression) is never reduced
WARNING: Rule (index -> expr_list) is never reduced
WARNING: Rule (index -> ind expr_list) is never reduced
