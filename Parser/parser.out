Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt_list statement
Rule 3     stmt_list -> statement
Rule 4     statement -> declaration NL
Rule 5     statement -> assignment NL
Rule 6     statement -> for NL
Rule 7     statement -> if NL
Rule 8     statement -> operation NL
Rule 9     statement -> function NL
Rule 10    statement -> function_call NL
Rule 11    declaration -> type VARIABLE EQ expression
Rule 12    declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
Rule 13    declaration -> type VARIABLE error
Rule 14    decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET
Rule 15    decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
Rule 16    decl_list -> expr_list
Rule 17    expr_list -> expr_list COMMA expression
Rule 18    expr_list -> expression
Rule 19    type -> int
Rule 20    type -> bool
Rule 21    int -> INT
Rule 22    int -> CINT
Rule 23    int -> VINT
Rule 24    int -> MINT
Rule 25    int -> CVINT
Rule 26    int -> CMINT
Rule 27    bool -> BOOL
Rule 28    bool -> CBOOL
Rule 29    bool -> VBOOL
Rule 30    bool -> MBOOL
Rule 31    bool -> CVBOOL
Rule 32    bool -> CMBOOL
Rule 33    func_list -> func_list COMMA func
Rule 34    func_list -> func
Rule 35    func -> type VARIABLE
Rule 36    func -> type VARIABLE EQ const
Rule 37    func -> type VARIABLE EQ decl_list
Rule 38    func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
Rule 39    expression -> math_expression
Rule 40    expression -> const
Rule 41    expression -> variable
Rule 42    expression -> operation
Rule 43    math_expression -> expression PLUS expression
Rule 44    math_expression -> expression MINUS expression
Rule 45    math_expression -> expression MUL_MATRIX expression
Rule 46    math_expression -> expression MUL_ELEM expression
Rule 47    math_expression -> expression TRANSPOSE
Rule 48    math_expression -> SUM LBRACKET expression RBRACKET
Rule 49    math_expression -> expression STL
Rule 50    math_expression -> expression STR
Rule 51    math_expression -> DENY expression
Rule 52    math_expression -> expression AND expression
Rule 53    math_expression -> expression LESS expression
Rule 54    math_expression -> expression GREATER expression
Rule 55    const -> TRUE
Rule 56    const -> FALSE
Rule 57    const -> INT_DEC
Rule 58    const -> INT_BIN
Rule 59    variable -> VARIABLE
Rule 60    variable -> VARIABLE LBRACKET index RBRACKET
Rule 61    ind -> COMMA
Rule 62    ind -> COMMA COLON
Rule 63    ind -> COLON COMMA
Rule 64    index -> expression
Rule 65    index -> expr_list
Rule 66    index -> expr_list ind
Rule 67    index -> ind expr_list
Rule 68    index -> decl_list ind
Rule 69    index -> ind decl_list
Rule 70    index -> decl_list
Rule 71    index -> L_FIGBRACKET decl_list R_FIGBRACKET
Rule 72    operation -> MOVE LBRACKET expression RBRACKET
Rule 73    operation -> RIGHT
Rule 74    operation -> LEFT
Rule 75    operation -> WALL
Rule 76    operation -> EXIT
Rule 77    assignment -> variable ASSIGNMENT expression
Rule 78    assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
Rule 79    assignment -> variable ASSIGNMENT error
Rule 80    for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
Rule 81    for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
Rule 82    for -> FOR VARIABLE EQ expression COLON expression error
Rule 83    if -> IF expression BEGINIF NL stmt_list ENDIF
Rule 84    if -> IF expression BEGIN NL stmt_list END
Rule 85    if -> IF expression error
Rule 86    return_list -> return_list COMMA type VARIABLE
Rule 87    return_list -> type VARIABLE
Rule 88    call_list -> call_list COMMA expression
Rule 89    call_list -> expression
Rule 90    function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 91    function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 92    function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 93    function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 94    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 95    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 96    function_call -> VARIABLE
Rule 97    function_call -> VARIABLE call_list
Rule 98    function_call -> ret_list ASSIGNMENT VARIABLE call_list
Rule 99    function_call -> ret_list ASSIGNMENT VARIABLE
Rule 100   function_call -> variable ASSIGNMENT VARIABLE call_list
Rule 101   function_call -> type VARIABLE EQ VARIABLE call_list
Rule 102   ret_list -> variable
Rule 103   ret_list -> ret_list COMMA variable

Terminals, with rules where they appear

AND                  : 52
ASSIGNMENT           : 77 78 79 98 99 100
BEGIN                : 81 84 90 91 92 93 94 95
BEGINFOR             : 80
BEGINIF              : 83
BOOL                 : 27
CBOOL                : 28
CINT                 : 22
CMBOOL               : 32
CMINT                : 26
COLON                : 62 63 80 81 82
COMMA                : 15 17 33 61 62 63 86 88 103
CVBOOL               : 31
CVINT                : 25
DENY                 : 51
END                  : 81 84 90 91 92 93 94 95
ENDFOR               : 80
ENDIF                : 83
EQ                   : 11 12 36 37 38 80 81 82 90 92 94 95 101
EXIT                 : 76
FALSE                : 56
FOR                  : 80 81 82
FUNCTION             : 90 91 92 93 94 95
GREATER              : 54
IF                   : 83 84 85
INT                  : 21
INT_BIN              : 58
INT_DEC              : 57
LBRACKET             : 48 60 72 90 91 92 93 94 95
LEFT                 : 74
LESS                 : 53
L_FIGBRACKET         : 12 14 15 38 71 78
MBOOL                : 30
MINT                 : 24
MINUS                : 44
MOVE                 : 72
MUL_ELEM             : 46
MUL_MATRIX           : 45
NL                   : 4 5 6 7 8 9 10 80 81 83 84 90 91 92 93 94 95
PLUS                 : 43
RBRACKET             : 48 60 72 90 91 92 93 94 95
RIGHT                : 73
R_FIGBRACKET         : 12 14 15 38 71 78
STL                  : 49
STR                  : 50
SUM                  : 48
TRANSPOSE            : 47
TRUE                 : 55
VARIABLE             : 11 12 13 35 36 37 38 59 60 80 81 82 86 87 90 91 92 93 94 94 95 95 96 97 98 99 100 101 101
VBOOL                : 29
VINT                 : 23
WALL                 : 75
error                : 13 79 82 85

Nonterminals, with rules where they appear

assignment           : 5
bool                 : 20
call_list            : 88 97 98 100 101
const                : 36 40
decl_list            : 12 15 15 37 38 68 69 70 71 78
declaration          : 4
expr_list            : 14 16 17 65 66 67
expression           : 11 17 18 43 43 44 44 45 45 46 46 47 48 49 50 51 52 52 53 53 54 54 64 72 77 80 80 81 81 82 82 83 84 85 88 89
for                  : 6
func                 : 33 34
func_list            : 33 90 91 94
function             : 9
function_call        : 10
if                   : 7
ind                  : 66 67 68 69
index                : 60
int                  : 19
math_expression      : 39
operation            : 8 42
program              : 0
ret_list             : 98 99 103
return_list          : 86 90 92
statement            : 2 3
stmt_list            : 1 2 80 81 83 84 90 91 92 93 94 95
type                 : 11 12 13 35 36 37 38 86 87 94 95 101
variable             : 41 77 78 79 100 102 103

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    $end            reduce using rule 1 (program -> stmt_list .)
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 3

    (3) stmt_list -> statement .

    FOR             reduce using rule 3 (stmt_list -> statement .)
    IF              reduce using rule 3 (stmt_list -> statement .)
    MOVE            reduce using rule 3 (stmt_list -> statement .)
    RIGHT           reduce using rule 3 (stmt_list -> statement .)
    LEFT            reduce using rule 3 (stmt_list -> statement .)
    WALL            reduce using rule 3 (stmt_list -> statement .)
    EXIT            reduce using rule 3 (stmt_list -> statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> statement .)
    VARIABLE        reduce using rule 3 (stmt_list -> statement .)
    INT             reduce using rule 3 (stmt_list -> statement .)
    CINT            reduce using rule 3 (stmt_list -> statement .)
    VINT            reduce using rule 3 (stmt_list -> statement .)
    MINT            reduce using rule 3 (stmt_list -> statement .)
    CVINT           reduce using rule 3 (stmt_list -> statement .)
    CMINT           reduce using rule 3 (stmt_list -> statement .)
    BOOL            reduce using rule 3 (stmt_list -> statement .)
    CBOOL           reduce using rule 3 (stmt_list -> statement .)
    VBOOL           reduce using rule 3 (stmt_list -> statement .)
    MBOOL           reduce using rule 3 (stmt_list -> statement .)
    CVBOOL          reduce using rule 3 (stmt_list -> statement .)
    CMBOOL          reduce using rule 3 (stmt_list -> statement .)
    $end            reduce using rule 3 (stmt_list -> statement .)
    ENDIF           reduce using rule 3 (stmt_list -> statement .)
    END             reduce using rule 3 (stmt_list -> statement .)
    ENDFOR          reduce using rule 3 (stmt_list -> statement .)


state 4

    (4) statement -> declaration . NL

    NL              shift and go to state 39


state 5

    (5) statement -> assignment . NL

    NL              shift and go to state 40


state 6

    (6) statement -> for . NL

    NL              shift and go to state 41


state 7

    (7) statement -> if . NL

    NL              shift and go to state 42


state 8

    (8) statement -> operation . NL

    NL              shift and go to state 43


state 9

    (9) statement -> function . NL

    NL              shift and go to state 44


state 10

    (10) statement -> function_call . NL

    NL              shift and go to state 45


state 11

    (11) declaration -> type . VARIABLE EQ expression
    (12) declaration -> type . VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> type . VARIABLE error
    (94) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (101) function_call -> type . VARIABLE EQ VARIABLE call_list
    (87) return_list -> type . VARIABLE

    VARIABLE        shift and go to state 46


state 12

    (96) function_call -> VARIABLE .
    (97) function_call -> VARIABLE . call_list
    (59) variable -> VARIABLE .
    (60) variable -> VARIABLE . LBRACKET index RBRACKET
    (88) call_list -> . call_list COMMA expression
    (89) call_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    NL              reduce using rule 96 (function_call -> VARIABLE .)
    ASSIGNMENT      reduce using rule 59 (variable -> VARIABLE .)
    COMMA           reduce using rule 59 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 49
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    call_list                      shift and go to state 48
    expression                     shift and go to state 50
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 13

    (77) assignment -> variable . ASSIGNMENT expression
    (78) assignment -> variable . ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> variable . ASSIGNMENT error
    (100) function_call -> variable . ASSIGNMENT VARIABLE call_list
    (102) ret_list -> variable .

  ! shift/reduce conflict for ASSIGNMENT resolved as shift
    ASSIGNMENT      shift and go to state 61
    COMMA           reduce using rule 102 (ret_list -> variable .)

  ! ASSIGNMENT      [ reduce using rule 102 (ret_list -> variable .) ]


state 14

    (80) for -> FOR . VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> FOR . VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> FOR . VARIABLE EQ expression COLON expression error

    VARIABLE        shift and go to state 62


state 15

    (83) if -> IF . expression BEGINIF NL stmt_list ENDIF
    (84) if -> IF . expression BEGIN NL stmt_list END
    (85) if -> IF . expression error
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 63
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 16

    (72) operation -> MOVE . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 64


state 17

    (73) operation -> RIGHT .

    NL              reduce using rule 73 (operation -> RIGHT .)
    PLUS            reduce using rule 73 (operation -> RIGHT .)
    MINUS           reduce using rule 73 (operation -> RIGHT .)
    MUL_MATRIX      reduce using rule 73 (operation -> RIGHT .)
    MUL_ELEM        reduce using rule 73 (operation -> RIGHT .)
    TRANSPOSE       reduce using rule 73 (operation -> RIGHT .)
    STL             reduce using rule 73 (operation -> RIGHT .)
    STR             reduce using rule 73 (operation -> RIGHT .)
    AND             reduce using rule 73 (operation -> RIGHT .)
    LESS            reduce using rule 73 (operation -> RIGHT .)
    GREATER         reduce using rule 73 (operation -> RIGHT .)
    COMMA           reduce using rule 73 (operation -> RIGHT .)
    BEGINIF         reduce using rule 73 (operation -> RIGHT .)
    BEGIN           reduce using rule 73 (operation -> RIGHT .)
    error           reduce using rule 73 (operation -> RIGHT .)
    RBRACKET        reduce using rule 73 (operation -> RIGHT .)
    COLON           reduce using rule 73 (operation -> RIGHT .)
    R_FIGBRACKET    reduce using rule 73 (operation -> RIGHT .)
    BEGINFOR        reduce using rule 73 (operation -> RIGHT .)


state 18

    (74) operation -> LEFT .

    NL              reduce using rule 74 (operation -> LEFT .)
    PLUS            reduce using rule 74 (operation -> LEFT .)
    MINUS           reduce using rule 74 (operation -> LEFT .)
    MUL_MATRIX      reduce using rule 74 (operation -> LEFT .)
    MUL_ELEM        reduce using rule 74 (operation -> LEFT .)
    TRANSPOSE       reduce using rule 74 (operation -> LEFT .)
    STL             reduce using rule 74 (operation -> LEFT .)
    STR             reduce using rule 74 (operation -> LEFT .)
    AND             reduce using rule 74 (operation -> LEFT .)
    LESS            reduce using rule 74 (operation -> LEFT .)
    GREATER         reduce using rule 74 (operation -> LEFT .)
    COMMA           reduce using rule 74 (operation -> LEFT .)
    BEGINIF         reduce using rule 74 (operation -> LEFT .)
    BEGIN           reduce using rule 74 (operation -> LEFT .)
    error           reduce using rule 74 (operation -> LEFT .)
    RBRACKET        reduce using rule 74 (operation -> LEFT .)
    COLON           reduce using rule 74 (operation -> LEFT .)
    R_FIGBRACKET    reduce using rule 74 (operation -> LEFT .)
    BEGINFOR        reduce using rule 74 (operation -> LEFT .)


state 19

    (75) operation -> WALL .

    NL              reduce using rule 75 (operation -> WALL .)
    PLUS            reduce using rule 75 (operation -> WALL .)
    MINUS           reduce using rule 75 (operation -> WALL .)
    MUL_MATRIX      reduce using rule 75 (operation -> WALL .)
    MUL_ELEM        reduce using rule 75 (operation -> WALL .)
    TRANSPOSE       reduce using rule 75 (operation -> WALL .)
    STL             reduce using rule 75 (operation -> WALL .)
    STR             reduce using rule 75 (operation -> WALL .)
    AND             reduce using rule 75 (operation -> WALL .)
    LESS            reduce using rule 75 (operation -> WALL .)
    GREATER         reduce using rule 75 (operation -> WALL .)
    COMMA           reduce using rule 75 (operation -> WALL .)
    BEGINIF         reduce using rule 75 (operation -> WALL .)
    BEGIN           reduce using rule 75 (operation -> WALL .)
    error           reduce using rule 75 (operation -> WALL .)
    RBRACKET        reduce using rule 75 (operation -> WALL .)
    COLON           reduce using rule 75 (operation -> WALL .)
    R_FIGBRACKET    reduce using rule 75 (operation -> WALL .)
    BEGINFOR        reduce using rule 75 (operation -> WALL .)


state 20

    (76) operation -> EXIT .

    NL              reduce using rule 76 (operation -> EXIT .)
    PLUS            reduce using rule 76 (operation -> EXIT .)
    MINUS           reduce using rule 76 (operation -> EXIT .)
    MUL_MATRIX      reduce using rule 76 (operation -> EXIT .)
    MUL_ELEM        reduce using rule 76 (operation -> EXIT .)
    TRANSPOSE       reduce using rule 76 (operation -> EXIT .)
    STL             reduce using rule 76 (operation -> EXIT .)
    STR             reduce using rule 76 (operation -> EXIT .)
    AND             reduce using rule 76 (operation -> EXIT .)
    LESS            reduce using rule 76 (operation -> EXIT .)
    GREATER         reduce using rule 76 (operation -> EXIT .)
    COMMA           reduce using rule 76 (operation -> EXIT .)
    BEGINIF         reduce using rule 76 (operation -> EXIT .)
    BEGIN           reduce using rule 76 (operation -> EXIT .)
    error           reduce using rule 76 (operation -> EXIT .)
    RBRACKET        reduce using rule 76 (operation -> EXIT .)
    COLON           reduce using rule 76 (operation -> EXIT .)
    R_FIGBRACKET    reduce using rule 76 (operation -> EXIT .)
    BEGINFOR        reduce using rule 76 (operation -> EXIT .)


state 21

    (90) function -> return_list . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> return_list . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (86) return_list -> return_list . COMMA type VARIABLE

    EQ              shift and go to state 65
    COMMA           shift and go to state 66


state 22

    (91) function -> FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (93) function -> FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 67


state 23

    (98) function_call -> ret_list . ASSIGNMENT VARIABLE call_list
    (99) function_call -> ret_list . ASSIGNMENT VARIABLE
    (103) ret_list -> ret_list . COMMA variable

    ASSIGNMENT      shift and go to state 68
    COMMA           shift and go to state 69


state 24

    (19) type -> int .

    VARIABLE        reduce using rule 19 (type -> int .)


state 25

    (20) type -> bool .

    VARIABLE        reduce using rule 20 (type -> bool .)


state 26

    (21) int -> INT .

    VARIABLE        reduce using rule 21 (int -> INT .)


state 27

    (22) int -> CINT .

    VARIABLE        reduce using rule 22 (int -> CINT .)


state 28

    (23) int -> VINT .

    VARIABLE        reduce using rule 23 (int -> VINT .)


state 29

    (24) int -> MINT .

    VARIABLE        reduce using rule 24 (int -> MINT .)


state 30

    (25) int -> CVINT .

    VARIABLE        reduce using rule 25 (int -> CVINT .)


state 31

    (26) int -> CMINT .

    VARIABLE        reduce using rule 26 (int -> CMINT .)


state 32

    (27) bool -> BOOL .

    VARIABLE        reduce using rule 27 (bool -> BOOL .)


state 33

    (28) bool -> CBOOL .

    VARIABLE        reduce using rule 28 (bool -> CBOOL .)


state 34

    (29) bool -> VBOOL .

    VARIABLE        reduce using rule 29 (bool -> VBOOL .)


state 35

    (30) bool -> MBOOL .

    VARIABLE        reduce using rule 30 (bool -> MBOOL .)


state 36

    (31) bool -> CVBOOL .

    VARIABLE        reduce using rule 31 (bool -> CVBOOL .)


state 37

    (32) bool -> CMBOOL .

    VARIABLE        reduce using rule 32 (bool -> CMBOOL .)


state 38

    (2) stmt_list -> stmt_list statement .

    FOR             reduce using rule 2 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 2 (stmt_list -> stmt_list statement .)
    MOVE            reduce using rule 2 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    WALL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    EXIT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 2 (stmt_list -> stmt_list statement .)
    VARIABLE        reduce using rule 2 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 2 (stmt_list -> stmt_list statement .)
    CINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    VINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    MINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    VBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    MBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDIF           reduce using rule 2 (stmt_list -> stmt_list statement .)
    END             reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDFOR          reduce using rule 2 (stmt_list -> stmt_list statement .)


state 39

    (4) statement -> declaration NL .

    FOR             reduce using rule 4 (statement -> declaration NL .)
    IF              reduce using rule 4 (statement -> declaration NL .)
    MOVE            reduce using rule 4 (statement -> declaration NL .)
    RIGHT           reduce using rule 4 (statement -> declaration NL .)
    LEFT            reduce using rule 4 (statement -> declaration NL .)
    WALL            reduce using rule 4 (statement -> declaration NL .)
    EXIT            reduce using rule 4 (statement -> declaration NL .)
    FUNCTION        reduce using rule 4 (statement -> declaration NL .)
    VARIABLE        reduce using rule 4 (statement -> declaration NL .)
    INT             reduce using rule 4 (statement -> declaration NL .)
    CINT            reduce using rule 4 (statement -> declaration NL .)
    VINT            reduce using rule 4 (statement -> declaration NL .)
    MINT            reduce using rule 4 (statement -> declaration NL .)
    CVINT           reduce using rule 4 (statement -> declaration NL .)
    CMINT           reduce using rule 4 (statement -> declaration NL .)
    BOOL            reduce using rule 4 (statement -> declaration NL .)
    CBOOL           reduce using rule 4 (statement -> declaration NL .)
    VBOOL           reduce using rule 4 (statement -> declaration NL .)
    MBOOL           reduce using rule 4 (statement -> declaration NL .)
    CVBOOL          reduce using rule 4 (statement -> declaration NL .)
    CMBOOL          reduce using rule 4 (statement -> declaration NL .)
    $end            reduce using rule 4 (statement -> declaration NL .)
    ENDIF           reduce using rule 4 (statement -> declaration NL .)
    END             reduce using rule 4 (statement -> declaration NL .)
    ENDFOR          reduce using rule 4 (statement -> declaration NL .)


state 40

    (5) statement -> assignment NL .

    FOR             reduce using rule 5 (statement -> assignment NL .)
    IF              reduce using rule 5 (statement -> assignment NL .)
    MOVE            reduce using rule 5 (statement -> assignment NL .)
    RIGHT           reduce using rule 5 (statement -> assignment NL .)
    LEFT            reduce using rule 5 (statement -> assignment NL .)
    WALL            reduce using rule 5 (statement -> assignment NL .)
    EXIT            reduce using rule 5 (statement -> assignment NL .)
    FUNCTION        reduce using rule 5 (statement -> assignment NL .)
    VARIABLE        reduce using rule 5 (statement -> assignment NL .)
    INT             reduce using rule 5 (statement -> assignment NL .)
    CINT            reduce using rule 5 (statement -> assignment NL .)
    VINT            reduce using rule 5 (statement -> assignment NL .)
    MINT            reduce using rule 5 (statement -> assignment NL .)
    CVINT           reduce using rule 5 (statement -> assignment NL .)
    CMINT           reduce using rule 5 (statement -> assignment NL .)
    BOOL            reduce using rule 5 (statement -> assignment NL .)
    CBOOL           reduce using rule 5 (statement -> assignment NL .)
    VBOOL           reduce using rule 5 (statement -> assignment NL .)
    MBOOL           reduce using rule 5 (statement -> assignment NL .)
    CVBOOL          reduce using rule 5 (statement -> assignment NL .)
    CMBOOL          reduce using rule 5 (statement -> assignment NL .)
    $end            reduce using rule 5 (statement -> assignment NL .)
    ENDIF           reduce using rule 5 (statement -> assignment NL .)
    END             reduce using rule 5 (statement -> assignment NL .)
    ENDFOR          reduce using rule 5 (statement -> assignment NL .)


state 41

    (6) statement -> for NL .

    FOR             reduce using rule 6 (statement -> for NL .)
    IF              reduce using rule 6 (statement -> for NL .)
    MOVE            reduce using rule 6 (statement -> for NL .)
    RIGHT           reduce using rule 6 (statement -> for NL .)
    LEFT            reduce using rule 6 (statement -> for NL .)
    WALL            reduce using rule 6 (statement -> for NL .)
    EXIT            reduce using rule 6 (statement -> for NL .)
    FUNCTION        reduce using rule 6 (statement -> for NL .)
    VARIABLE        reduce using rule 6 (statement -> for NL .)
    INT             reduce using rule 6 (statement -> for NL .)
    CINT            reduce using rule 6 (statement -> for NL .)
    VINT            reduce using rule 6 (statement -> for NL .)
    MINT            reduce using rule 6 (statement -> for NL .)
    CVINT           reduce using rule 6 (statement -> for NL .)
    CMINT           reduce using rule 6 (statement -> for NL .)
    BOOL            reduce using rule 6 (statement -> for NL .)
    CBOOL           reduce using rule 6 (statement -> for NL .)
    VBOOL           reduce using rule 6 (statement -> for NL .)
    MBOOL           reduce using rule 6 (statement -> for NL .)
    CVBOOL          reduce using rule 6 (statement -> for NL .)
    CMBOOL          reduce using rule 6 (statement -> for NL .)
    $end            reduce using rule 6 (statement -> for NL .)
    ENDIF           reduce using rule 6 (statement -> for NL .)
    END             reduce using rule 6 (statement -> for NL .)
    ENDFOR          reduce using rule 6 (statement -> for NL .)


state 42

    (7) statement -> if NL .

    FOR             reduce using rule 7 (statement -> if NL .)
    IF              reduce using rule 7 (statement -> if NL .)
    MOVE            reduce using rule 7 (statement -> if NL .)
    RIGHT           reduce using rule 7 (statement -> if NL .)
    LEFT            reduce using rule 7 (statement -> if NL .)
    WALL            reduce using rule 7 (statement -> if NL .)
    EXIT            reduce using rule 7 (statement -> if NL .)
    FUNCTION        reduce using rule 7 (statement -> if NL .)
    VARIABLE        reduce using rule 7 (statement -> if NL .)
    INT             reduce using rule 7 (statement -> if NL .)
    CINT            reduce using rule 7 (statement -> if NL .)
    VINT            reduce using rule 7 (statement -> if NL .)
    MINT            reduce using rule 7 (statement -> if NL .)
    CVINT           reduce using rule 7 (statement -> if NL .)
    CMINT           reduce using rule 7 (statement -> if NL .)
    BOOL            reduce using rule 7 (statement -> if NL .)
    CBOOL           reduce using rule 7 (statement -> if NL .)
    VBOOL           reduce using rule 7 (statement -> if NL .)
    MBOOL           reduce using rule 7 (statement -> if NL .)
    CVBOOL          reduce using rule 7 (statement -> if NL .)
    CMBOOL          reduce using rule 7 (statement -> if NL .)
    $end            reduce using rule 7 (statement -> if NL .)
    ENDIF           reduce using rule 7 (statement -> if NL .)
    END             reduce using rule 7 (statement -> if NL .)
    ENDFOR          reduce using rule 7 (statement -> if NL .)


state 43

    (8) statement -> operation NL .

    FOR             reduce using rule 8 (statement -> operation NL .)
    IF              reduce using rule 8 (statement -> operation NL .)
    MOVE            reduce using rule 8 (statement -> operation NL .)
    RIGHT           reduce using rule 8 (statement -> operation NL .)
    LEFT            reduce using rule 8 (statement -> operation NL .)
    WALL            reduce using rule 8 (statement -> operation NL .)
    EXIT            reduce using rule 8 (statement -> operation NL .)
    FUNCTION        reduce using rule 8 (statement -> operation NL .)
    VARIABLE        reduce using rule 8 (statement -> operation NL .)
    INT             reduce using rule 8 (statement -> operation NL .)
    CINT            reduce using rule 8 (statement -> operation NL .)
    VINT            reduce using rule 8 (statement -> operation NL .)
    MINT            reduce using rule 8 (statement -> operation NL .)
    CVINT           reduce using rule 8 (statement -> operation NL .)
    CMINT           reduce using rule 8 (statement -> operation NL .)
    BOOL            reduce using rule 8 (statement -> operation NL .)
    CBOOL           reduce using rule 8 (statement -> operation NL .)
    VBOOL           reduce using rule 8 (statement -> operation NL .)
    MBOOL           reduce using rule 8 (statement -> operation NL .)
    CVBOOL          reduce using rule 8 (statement -> operation NL .)
    CMBOOL          reduce using rule 8 (statement -> operation NL .)
    $end            reduce using rule 8 (statement -> operation NL .)
    ENDIF           reduce using rule 8 (statement -> operation NL .)
    END             reduce using rule 8 (statement -> operation NL .)
    ENDFOR          reduce using rule 8 (statement -> operation NL .)


state 44

    (9) statement -> function NL .

    FOR             reduce using rule 9 (statement -> function NL .)
    IF              reduce using rule 9 (statement -> function NL .)
    MOVE            reduce using rule 9 (statement -> function NL .)
    RIGHT           reduce using rule 9 (statement -> function NL .)
    LEFT            reduce using rule 9 (statement -> function NL .)
    WALL            reduce using rule 9 (statement -> function NL .)
    EXIT            reduce using rule 9 (statement -> function NL .)
    FUNCTION        reduce using rule 9 (statement -> function NL .)
    VARIABLE        reduce using rule 9 (statement -> function NL .)
    INT             reduce using rule 9 (statement -> function NL .)
    CINT            reduce using rule 9 (statement -> function NL .)
    VINT            reduce using rule 9 (statement -> function NL .)
    MINT            reduce using rule 9 (statement -> function NL .)
    CVINT           reduce using rule 9 (statement -> function NL .)
    CMINT           reduce using rule 9 (statement -> function NL .)
    BOOL            reduce using rule 9 (statement -> function NL .)
    CBOOL           reduce using rule 9 (statement -> function NL .)
    VBOOL           reduce using rule 9 (statement -> function NL .)
    MBOOL           reduce using rule 9 (statement -> function NL .)
    CVBOOL          reduce using rule 9 (statement -> function NL .)
    CMBOOL          reduce using rule 9 (statement -> function NL .)
    $end            reduce using rule 9 (statement -> function NL .)
    ENDIF           reduce using rule 9 (statement -> function NL .)
    END             reduce using rule 9 (statement -> function NL .)
    ENDFOR          reduce using rule 9 (statement -> function NL .)


state 45

    (10) statement -> function_call NL .

    FOR             reduce using rule 10 (statement -> function_call NL .)
    IF              reduce using rule 10 (statement -> function_call NL .)
    MOVE            reduce using rule 10 (statement -> function_call NL .)
    RIGHT           reduce using rule 10 (statement -> function_call NL .)
    LEFT            reduce using rule 10 (statement -> function_call NL .)
    WALL            reduce using rule 10 (statement -> function_call NL .)
    EXIT            reduce using rule 10 (statement -> function_call NL .)
    FUNCTION        reduce using rule 10 (statement -> function_call NL .)
    VARIABLE        reduce using rule 10 (statement -> function_call NL .)
    INT             reduce using rule 10 (statement -> function_call NL .)
    CINT            reduce using rule 10 (statement -> function_call NL .)
    VINT            reduce using rule 10 (statement -> function_call NL .)
    MINT            reduce using rule 10 (statement -> function_call NL .)
    CVINT           reduce using rule 10 (statement -> function_call NL .)
    CMINT           reduce using rule 10 (statement -> function_call NL .)
    BOOL            reduce using rule 10 (statement -> function_call NL .)
    CBOOL           reduce using rule 10 (statement -> function_call NL .)
    VBOOL           reduce using rule 10 (statement -> function_call NL .)
    MBOOL           reduce using rule 10 (statement -> function_call NL .)
    CVBOOL          reduce using rule 10 (statement -> function_call NL .)
    CMBOOL          reduce using rule 10 (statement -> function_call NL .)
    $end            reduce using rule 10 (statement -> function_call NL .)
    ENDIF           reduce using rule 10 (statement -> function_call NL .)
    END             reduce using rule 10 (statement -> function_call NL .)
    ENDFOR          reduce using rule 10 (statement -> function_call NL .)


state 46

    (11) declaration -> type VARIABLE . EQ expression
    (12) declaration -> type VARIABLE . EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> type VARIABLE . error
    (94) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (101) function_call -> type VARIABLE . EQ VARIABLE call_list
    (87) return_list -> type VARIABLE .

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 70
    error           shift and go to state 71
    COMMA           reduce using rule 87 (return_list -> type VARIABLE .)

  ! EQ              [ reduce using rule 87 (return_list -> type VARIABLE .) ]


state 47

    (59) variable -> VARIABLE .
    (60) variable -> VARIABLE . LBRACKET index RBRACKET

    PLUS            reduce using rule 59 (variable -> VARIABLE .)
    MINUS           reduce using rule 59 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 59 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 59 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 59 (variable -> VARIABLE .)
    STL             reduce using rule 59 (variable -> VARIABLE .)
    STR             reduce using rule 59 (variable -> VARIABLE .)
    AND             reduce using rule 59 (variable -> VARIABLE .)
    LESS            reduce using rule 59 (variable -> VARIABLE .)
    GREATER         reduce using rule 59 (variable -> VARIABLE .)
    COMMA           reduce using rule 59 (variable -> VARIABLE .)
    NL              reduce using rule 59 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 59 (variable -> VARIABLE .)
    BEGIN           reduce using rule 59 (variable -> VARIABLE .)
    error           reduce using rule 59 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 59 (variable -> VARIABLE .)
    COLON           reduce using rule 59 (variable -> VARIABLE .)
    R_FIGBRACKET    reduce using rule 59 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 59 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 59 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 49


state 48

    (97) function_call -> VARIABLE call_list .
    (88) call_list -> call_list . COMMA expression

    NL              reduce using rule 97 (function_call -> VARIABLE call_list .)
    COMMA           shift and go to state 72


state 49

    (60) variable -> VARIABLE LBRACKET . index RBRACKET
    (64) index -> . expression
    (65) index -> . expr_list
    (66) index -> . expr_list ind
    (67) index -> . ind expr_list
    (68) index -> . decl_list ind
    (69) index -> . ind decl_list
    (70) index -> . decl_list
    (71) index -> . L_FIGBRACKET decl_list R_FIGBRACKET
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (61) ind -> . COMMA
    (62) ind -> . COMMA COLON
    (63) ind -> . COLON COMMA
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 78
    COMMA           shift and go to state 79
    COLON           shift and go to state 80
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    index                          shift and go to state 73
    expression                     shift and go to state 74
    expr_list                      shift and go to state 75
    ind                            shift and go to state 76
    decl_list                      shift and go to state 77
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 50

    (89) call_list -> expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 89 (call_list -> expression .)
    NL              reduce using rule 89 (call_list -> expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 51

    (39) expression -> math_expression .

    PLUS            reduce using rule 39 (expression -> math_expression .)
    MINUS           reduce using rule 39 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 39 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 39 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 39 (expression -> math_expression .)
    STL             reduce using rule 39 (expression -> math_expression .)
    STR             reduce using rule 39 (expression -> math_expression .)
    AND             reduce using rule 39 (expression -> math_expression .)
    LESS            reduce using rule 39 (expression -> math_expression .)
    GREATER         reduce using rule 39 (expression -> math_expression .)
    COMMA           reduce using rule 39 (expression -> math_expression .)
    NL              reduce using rule 39 (expression -> math_expression .)
    BEGINIF         reduce using rule 39 (expression -> math_expression .)
    BEGIN           reduce using rule 39 (expression -> math_expression .)
    error           reduce using rule 39 (expression -> math_expression .)
    RBRACKET        reduce using rule 39 (expression -> math_expression .)
    COLON           reduce using rule 39 (expression -> math_expression .)
    R_FIGBRACKET    reduce using rule 39 (expression -> math_expression .)
    BEGINFOR        reduce using rule 39 (expression -> math_expression .)


state 52

    (40) expression -> const .

    PLUS            reduce using rule 40 (expression -> const .)
    MINUS           reduce using rule 40 (expression -> const .)
    MUL_MATRIX      reduce using rule 40 (expression -> const .)
    MUL_ELEM        reduce using rule 40 (expression -> const .)
    TRANSPOSE       reduce using rule 40 (expression -> const .)
    STL             reduce using rule 40 (expression -> const .)
    STR             reduce using rule 40 (expression -> const .)
    AND             reduce using rule 40 (expression -> const .)
    LESS            reduce using rule 40 (expression -> const .)
    GREATER         reduce using rule 40 (expression -> const .)
    COMMA           reduce using rule 40 (expression -> const .)
    NL              reduce using rule 40 (expression -> const .)
    BEGINIF         reduce using rule 40 (expression -> const .)
    BEGIN           reduce using rule 40 (expression -> const .)
    error           reduce using rule 40 (expression -> const .)
    RBRACKET        reduce using rule 40 (expression -> const .)
    COLON           reduce using rule 40 (expression -> const .)
    R_FIGBRACKET    reduce using rule 40 (expression -> const .)
    BEGINFOR        reduce using rule 40 (expression -> const .)


state 53

    (41) expression -> variable .

    PLUS            reduce using rule 41 (expression -> variable .)
    MINUS           reduce using rule 41 (expression -> variable .)
    MUL_MATRIX      reduce using rule 41 (expression -> variable .)
    MUL_ELEM        reduce using rule 41 (expression -> variable .)
    TRANSPOSE       reduce using rule 41 (expression -> variable .)
    STL             reduce using rule 41 (expression -> variable .)
    STR             reduce using rule 41 (expression -> variable .)
    AND             reduce using rule 41 (expression -> variable .)
    LESS            reduce using rule 41 (expression -> variable .)
    GREATER         reduce using rule 41 (expression -> variable .)
    COMMA           reduce using rule 41 (expression -> variable .)
    NL              reduce using rule 41 (expression -> variable .)
    BEGINIF         reduce using rule 41 (expression -> variable .)
    BEGIN           reduce using rule 41 (expression -> variable .)
    error           reduce using rule 41 (expression -> variable .)
    RBRACKET        reduce using rule 41 (expression -> variable .)
    COLON           reduce using rule 41 (expression -> variable .)
    R_FIGBRACKET    reduce using rule 41 (expression -> variable .)
    BEGINFOR        reduce using rule 41 (expression -> variable .)


state 54

    (42) expression -> operation .

    PLUS            reduce using rule 42 (expression -> operation .)
    MINUS           reduce using rule 42 (expression -> operation .)
    MUL_MATRIX      reduce using rule 42 (expression -> operation .)
    MUL_ELEM        reduce using rule 42 (expression -> operation .)
    TRANSPOSE       reduce using rule 42 (expression -> operation .)
    STL             reduce using rule 42 (expression -> operation .)
    STR             reduce using rule 42 (expression -> operation .)
    AND             reduce using rule 42 (expression -> operation .)
    LESS            reduce using rule 42 (expression -> operation .)
    GREATER         reduce using rule 42 (expression -> operation .)
    COMMA           reduce using rule 42 (expression -> operation .)
    NL              reduce using rule 42 (expression -> operation .)
    BEGINIF         reduce using rule 42 (expression -> operation .)
    BEGIN           reduce using rule 42 (expression -> operation .)
    error           reduce using rule 42 (expression -> operation .)
    RBRACKET        reduce using rule 42 (expression -> operation .)
    COLON           reduce using rule 42 (expression -> operation .)
    R_FIGBRACKET    reduce using rule 42 (expression -> operation .)
    BEGINFOR        reduce using rule 42 (expression -> operation .)


state 55

    (48) math_expression -> SUM . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 91


state 56

    (51) math_expression -> DENY . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 92
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 57

    (55) const -> TRUE .

    PLUS            reduce using rule 55 (const -> TRUE .)
    MINUS           reduce using rule 55 (const -> TRUE .)
    MUL_MATRIX      reduce using rule 55 (const -> TRUE .)
    MUL_ELEM        reduce using rule 55 (const -> TRUE .)
    TRANSPOSE       reduce using rule 55 (const -> TRUE .)
    STL             reduce using rule 55 (const -> TRUE .)
    STR             reduce using rule 55 (const -> TRUE .)
    AND             reduce using rule 55 (const -> TRUE .)
    LESS            reduce using rule 55 (const -> TRUE .)
    GREATER         reduce using rule 55 (const -> TRUE .)
    COMMA           reduce using rule 55 (const -> TRUE .)
    NL              reduce using rule 55 (const -> TRUE .)
    BEGINIF         reduce using rule 55 (const -> TRUE .)
    BEGIN           reduce using rule 55 (const -> TRUE .)
    error           reduce using rule 55 (const -> TRUE .)
    RBRACKET        reduce using rule 55 (const -> TRUE .)
    COLON           reduce using rule 55 (const -> TRUE .)
    R_FIGBRACKET    reduce using rule 55 (const -> TRUE .)
    BEGINFOR        reduce using rule 55 (const -> TRUE .)


state 58

    (56) const -> FALSE .

    PLUS            reduce using rule 56 (const -> FALSE .)
    MINUS           reduce using rule 56 (const -> FALSE .)
    MUL_MATRIX      reduce using rule 56 (const -> FALSE .)
    MUL_ELEM        reduce using rule 56 (const -> FALSE .)
    TRANSPOSE       reduce using rule 56 (const -> FALSE .)
    STL             reduce using rule 56 (const -> FALSE .)
    STR             reduce using rule 56 (const -> FALSE .)
    AND             reduce using rule 56 (const -> FALSE .)
    LESS            reduce using rule 56 (const -> FALSE .)
    GREATER         reduce using rule 56 (const -> FALSE .)
    COMMA           reduce using rule 56 (const -> FALSE .)
    NL              reduce using rule 56 (const -> FALSE .)
    BEGINIF         reduce using rule 56 (const -> FALSE .)
    BEGIN           reduce using rule 56 (const -> FALSE .)
    error           reduce using rule 56 (const -> FALSE .)
    RBRACKET        reduce using rule 56 (const -> FALSE .)
    COLON           reduce using rule 56 (const -> FALSE .)
    R_FIGBRACKET    reduce using rule 56 (const -> FALSE .)
    BEGINFOR        reduce using rule 56 (const -> FALSE .)


state 59

    (57) const -> INT_DEC .

    PLUS            reduce using rule 57 (const -> INT_DEC .)
    MINUS           reduce using rule 57 (const -> INT_DEC .)
    MUL_MATRIX      reduce using rule 57 (const -> INT_DEC .)
    MUL_ELEM        reduce using rule 57 (const -> INT_DEC .)
    TRANSPOSE       reduce using rule 57 (const -> INT_DEC .)
    STL             reduce using rule 57 (const -> INT_DEC .)
    STR             reduce using rule 57 (const -> INT_DEC .)
    AND             reduce using rule 57 (const -> INT_DEC .)
    LESS            reduce using rule 57 (const -> INT_DEC .)
    GREATER         reduce using rule 57 (const -> INT_DEC .)
    COMMA           reduce using rule 57 (const -> INT_DEC .)
    NL              reduce using rule 57 (const -> INT_DEC .)
    BEGINIF         reduce using rule 57 (const -> INT_DEC .)
    BEGIN           reduce using rule 57 (const -> INT_DEC .)
    error           reduce using rule 57 (const -> INT_DEC .)
    RBRACKET        reduce using rule 57 (const -> INT_DEC .)
    COLON           reduce using rule 57 (const -> INT_DEC .)
    R_FIGBRACKET    reduce using rule 57 (const -> INT_DEC .)
    BEGINFOR        reduce using rule 57 (const -> INT_DEC .)


state 60

    (58) const -> INT_BIN .

    PLUS            reduce using rule 58 (const -> INT_BIN .)
    MINUS           reduce using rule 58 (const -> INT_BIN .)
    MUL_MATRIX      reduce using rule 58 (const -> INT_BIN .)
    MUL_ELEM        reduce using rule 58 (const -> INT_BIN .)
    TRANSPOSE       reduce using rule 58 (const -> INT_BIN .)
    STL             reduce using rule 58 (const -> INT_BIN .)
    STR             reduce using rule 58 (const -> INT_BIN .)
    AND             reduce using rule 58 (const -> INT_BIN .)
    LESS            reduce using rule 58 (const -> INT_BIN .)
    GREATER         reduce using rule 58 (const -> INT_BIN .)
    COMMA           reduce using rule 58 (const -> INT_BIN .)
    NL              reduce using rule 58 (const -> INT_BIN .)
    BEGINIF         reduce using rule 58 (const -> INT_BIN .)
    BEGIN           reduce using rule 58 (const -> INT_BIN .)
    error           reduce using rule 58 (const -> INT_BIN .)
    RBRACKET        reduce using rule 58 (const -> INT_BIN .)
    COLON           reduce using rule 58 (const -> INT_BIN .)
    R_FIGBRACKET    reduce using rule 58 (const -> INT_BIN .)
    BEGINFOR        reduce using rule 58 (const -> INT_BIN .)


state 61

    (77) assignment -> variable ASSIGNMENT . expression
    (78) assignment -> variable ASSIGNMENT . L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> variable ASSIGNMENT . error
    (100) function_call -> variable ASSIGNMENT . VARIABLE call_list
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 94
    error           shift and go to state 95
    VARIABLE        shift and go to state 96
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    variable                       shift and go to state 53
    expression                     shift and go to state 93
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    operation                      shift and go to state 54

state 62

    (80) for -> FOR VARIABLE . EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> FOR VARIABLE . EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> FOR VARIABLE . EQ expression COLON expression error

    EQ              shift and go to state 97


state 63

    (83) if -> IF expression . BEGINIF NL stmt_list ENDIF
    (84) if -> IF expression . BEGIN NL stmt_list END
    (85) if -> IF expression . error
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    BEGINIF         shift and go to state 98
    BEGIN           shift and go to state 99
    error           shift and go to state 100
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 64

    (72) operation -> MOVE LBRACKET . expression RBRACKET
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 101
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 65

    (90) function -> return_list EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> return_list EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    FUNCTION        shift and go to state 102


state 66

    (86) return_list -> return_list COMMA . type VARIABLE
    (19) type -> . int
    (20) type -> . bool
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 103
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 67

    (91) function -> FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (93) function -> FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 104


state 68

    (98) function_call -> ret_list ASSIGNMENT . VARIABLE call_list
    (99) function_call -> ret_list ASSIGNMENT . VARIABLE

    VARIABLE        shift and go to state 105


state 69

    (103) ret_list -> ret_list COMMA . variable
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET

    VARIABLE        shift and go to state 47

    variable                       shift and go to state 106

state 70

    (11) declaration -> type VARIABLE EQ . expression
    (12) declaration -> type VARIABLE EQ . L_FIGBRACKET decl_list R_FIGBRACKET
    (94) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (101) function_call -> type VARIABLE EQ . VARIABLE call_list
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 109
    FUNCTION        shift and go to state 110
    VARIABLE        shift and go to state 107
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 108
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 71

    (13) declaration -> type VARIABLE error .

    NL              reduce using rule 13 (declaration -> type VARIABLE error .)


state 72

    (88) call_list -> call_list COMMA . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 111
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 73

    (60) variable -> VARIABLE LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 112


state 74

    (64) index -> expression .
    (18) expr_list -> expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

  ! reduce/reduce conflict for RBRACKET resolved using rule 18 (expr_list -> expression .)
    COMMA           reduce using rule 18 (expr_list -> expression .)
    COLON           reduce using rule 18 (expr_list -> expression .)
    RBRACKET        reduce using rule 18 (expr_list -> expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90

  ! RBRACKET        [ reduce using rule 64 (index -> expression .) ]


state 75

    (65) index -> expr_list .
    (66) index -> expr_list . ind
    (17) expr_list -> expr_list . COMMA expression
    (16) decl_list -> expr_list .
    (61) ind -> . COMMA
    (62) ind -> . COMMA COLON
    (63) ind -> . COLON COMMA

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 16 (decl_list -> expr_list .)
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           shift and go to state 114
    RBRACKET        reduce using rule 16 (decl_list -> expr_list .)
    COLON           shift and go to state 80

  ! RBRACKET        [ reduce using rule 65 (index -> expr_list .) ]
  ! COMMA           [ reduce using rule 16 (decl_list -> expr_list .) ]
  ! COLON           [ reduce using rule 16 (decl_list -> expr_list .) ]

    ind                            shift and go to state 113

state 76

    (67) index -> ind . expr_list
    (69) index -> ind . decl_list
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 118
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expr_list                      shift and go to state 115
    decl_list                      shift and go to state 116
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 77

    (68) index -> decl_list . ind
    (70) index -> decl_list .
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (61) ind -> . COMMA
    (62) ind -> . COMMA COLON
    (63) ind -> . COLON COMMA

    RBRACKET        reduce using rule 70 (index -> decl_list .)
    COMMA           shift and go to state 120
    COLON           shift and go to state 80

    ind                            shift and go to state 119

state 78

    (71) index -> L_FIGBRACKET . decl_list R_FIGBRACKET
    (14) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 118
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    decl_list                      shift and go to state 121
    expr_list                      shift and go to state 122
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 79

    (61) ind -> COMMA .
    (62) ind -> COMMA . COLON

    L_FIGBRACKET    reduce using rule 61 (ind -> COMMA .)
    SUM             reduce using rule 61 (ind -> COMMA .)
    DENY            reduce using rule 61 (ind -> COMMA .)
    TRUE            reduce using rule 61 (ind -> COMMA .)
    FALSE           reduce using rule 61 (ind -> COMMA .)
    INT_DEC         reduce using rule 61 (ind -> COMMA .)
    INT_BIN         reduce using rule 61 (ind -> COMMA .)
    VARIABLE        reduce using rule 61 (ind -> COMMA .)
    MOVE            reduce using rule 61 (ind -> COMMA .)
    RIGHT           reduce using rule 61 (ind -> COMMA .)
    LEFT            reduce using rule 61 (ind -> COMMA .)
    WALL            reduce using rule 61 (ind -> COMMA .)
    EXIT            reduce using rule 61 (ind -> COMMA .)
    COLON           shift and go to state 123


state 80

    (63) ind -> COLON . COMMA

    COMMA           shift and go to state 124


state 81

    (43) math_expression -> expression PLUS . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 125
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 82

    (44) math_expression -> expression MINUS . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 126
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 83

    (45) math_expression -> expression MUL_MATRIX . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 127
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 84

    (46) math_expression -> expression MUL_ELEM . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 128
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 85

    (47) math_expression -> expression TRANSPOSE .

    PLUS            reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    MINUS           reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    MUL_MATRIX      reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    MUL_ELEM        reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    STL             reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    STR             reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    AND             reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    LESS            reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    GREATER         reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    COMMA           reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    NL              reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    BEGINIF         reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    BEGIN           reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    error           reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    RBRACKET        reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    COLON           reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    R_FIGBRACKET    reduce using rule 47 (math_expression -> expression TRANSPOSE .)
    BEGINFOR        reduce using rule 47 (math_expression -> expression TRANSPOSE .)


state 86

    (49) math_expression -> expression STL .

    PLUS            reduce using rule 49 (math_expression -> expression STL .)
    MINUS           reduce using rule 49 (math_expression -> expression STL .)
    MUL_MATRIX      reduce using rule 49 (math_expression -> expression STL .)
    MUL_ELEM        reduce using rule 49 (math_expression -> expression STL .)
    TRANSPOSE       reduce using rule 49 (math_expression -> expression STL .)
    STL             reduce using rule 49 (math_expression -> expression STL .)
    STR             reduce using rule 49 (math_expression -> expression STL .)
    AND             reduce using rule 49 (math_expression -> expression STL .)
    LESS            reduce using rule 49 (math_expression -> expression STL .)
    GREATER         reduce using rule 49 (math_expression -> expression STL .)
    COMMA           reduce using rule 49 (math_expression -> expression STL .)
    NL              reduce using rule 49 (math_expression -> expression STL .)
    BEGINIF         reduce using rule 49 (math_expression -> expression STL .)
    BEGIN           reduce using rule 49 (math_expression -> expression STL .)
    error           reduce using rule 49 (math_expression -> expression STL .)
    RBRACKET        reduce using rule 49 (math_expression -> expression STL .)
    COLON           reduce using rule 49 (math_expression -> expression STL .)
    R_FIGBRACKET    reduce using rule 49 (math_expression -> expression STL .)
    BEGINFOR        reduce using rule 49 (math_expression -> expression STL .)


state 87

    (50) math_expression -> expression STR .

    PLUS            reduce using rule 50 (math_expression -> expression STR .)
    MINUS           reduce using rule 50 (math_expression -> expression STR .)
    MUL_MATRIX      reduce using rule 50 (math_expression -> expression STR .)
    MUL_ELEM        reduce using rule 50 (math_expression -> expression STR .)
    TRANSPOSE       reduce using rule 50 (math_expression -> expression STR .)
    STL             reduce using rule 50 (math_expression -> expression STR .)
    STR             reduce using rule 50 (math_expression -> expression STR .)
    AND             reduce using rule 50 (math_expression -> expression STR .)
    LESS            reduce using rule 50 (math_expression -> expression STR .)
    GREATER         reduce using rule 50 (math_expression -> expression STR .)
    COMMA           reduce using rule 50 (math_expression -> expression STR .)
    NL              reduce using rule 50 (math_expression -> expression STR .)
    BEGINIF         reduce using rule 50 (math_expression -> expression STR .)
    BEGIN           reduce using rule 50 (math_expression -> expression STR .)
    error           reduce using rule 50 (math_expression -> expression STR .)
    RBRACKET        reduce using rule 50 (math_expression -> expression STR .)
    COLON           reduce using rule 50 (math_expression -> expression STR .)
    R_FIGBRACKET    reduce using rule 50 (math_expression -> expression STR .)
    BEGINFOR        reduce using rule 50 (math_expression -> expression STR .)


state 88

    (52) math_expression -> expression AND . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 129
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 89

    (53) math_expression -> expression LESS . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 130
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 90

    (54) math_expression -> expression GREATER . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 131
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 91

    (48) math_expression -> SUM LBRACKET . expression RBRACKET
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 132
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 92

    (51) math_expression -> DENY expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    PLUS            reduce using rule 51 (math_expression -> DENY expression .)
    MINUS           reduce using rule 51 (math_expression -> DENY expression .)
    MUL_MATRIX      reduce using rule 51 (math_expression -> DENY expression .)
    MUL_ELEM        reduce using rule 51 (math_expression -> DENY expression .)
    TRANSPOSE       reduce using rule 51 (math_expression -> DENY expression .)
    STL             reduce using rule 51 (math_expression -> DENY expression .)
    STR             reduce using rule 51 (math_expression -> DENY expression .)
    COMMA           reduce using rule 51 (math_expression -> DENY expression .)
    NL              reduce using rule 51 (math_expression -> DENY expression .)
    BEGINIF         reduce using rule 51 (math_expression -> DENY expression .)
    BEGIN           reduce using rule 51 (math_expression -> DENY expression .)
    error           reduce using rule 51 (math_expression -> DENY expression .)
    RBRACKET        reduce using rule 51 (math_expression -> DENY expression .)
    COLON           reduce using rule 51 (math_expression -> DENY expression .)
    R_FIGBRACKET    reduce using rule 51 (math_expression -> DENY expression .)
    BEGINFOR        reduce using rule 51 (math_expression -> DENY expression .)
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90

  ! AND             [ reduce using rule 51 (math_expression -> DENY expression .) ]
  ! LESS            [ reduce using rule 51 (math_expression -> DENY expression .) ]
  ! GREATER         [ reduce using rule 51 (math_expression -> DENY expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MUL_MATRIX      [ shift and go to state 83 ]
  ! MUL_ELEM        [ shift and go to state 84 ]
  ! TRANSPOSE       [ shift and go to state 85 ]
  ! STL             [ shift and go to state 86 ]
  ! STR             [ shift and go to state 87 ]


state 93

    (77) assignment -> variable ASSIGNMENT expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    NL              reduce using rule 77 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 94

    (78) assignment -> variable ASSIGNMENT L_FIGBRACKET . decl_list R_FIGBRACKET
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 118
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    variable                       shift and go to state 53
    decl_list                      shift and go to state 133
    expr_list                      shift and go to state 134
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    operation                      shift and go to state 54

state 95

    (79) assignment -> variable ASSIGNMENT error .

    NL              reduce using rule 79 (assignment -> variable ASSIGNMENT error .)


state 96

    (100) function_call -> variable ASSIGNMENT VARIABLE . call_list
    (59) variable -> VARIABLE .
    (60) variable -> VARIABLE . LBRACKET index RBRACKET
    (88) call_list -> . call_list COMMA expression
    (89) call_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    PLUS            reduce using rule 59 (variable -> VARIABLE .)
    MINUS           reduce using rule 59 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 59 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 59 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 59 (variable -> VARIABLE .)
    STL             reduce using rule 59 (variable -> VARIABLE .)
    STR             reduce using rule 59 (variable -> VARIABLE .)
    AND             reduce using rule 59 (variable -> VARIABLE .)
    LESS            reduce using rule 59 (variable -> VARIABLE .)
    GREATER         reduce using rule 59 (variable -> VARIABLE .)
    NL              reduce using rule 59 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 49
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    variable                       shift and go to state 53
    call_list                      shift and go to state 135
    expression                     shift and go to state 50
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    operation                      shift and go to state 54

state 97

    (80) for -> FOR VARIABLE EQ . expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> FOR VARIABLE EQ . expression COLON expression BEGIN NL stmt_list END
    (82) for -> FOR VARIABLE EQ . expression COLON expression error
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 136
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 98

    (83) if -> IF expression BEGINIF . NL stmt_list ENDIF

    NL              shift and go to state 137


state 99

    (84) if -> IF expression BEGIN . NL stmt_list END

    NL              shift and go to state 138


state 100

    (85) if -> IF expression error .

    NL              reduce using rule 85 (if -> IF expression error .)


state 101

    (72) operation -> MOVE LBRACKET expression . RBRACKET
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    RBRACKET        shift and go to state 139
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 102

    (90) function -> return_list EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> return_list EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 140


state 103

    (86) return_list -> return_list COMMA type . VARIABLE

    VARIABLE        shift and go to state 141


state 104

    (91) function -> FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (93) function -> FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (33) func_list -> . func_list COMMA func
    (34) func_list -> . func
    (35) func -> . type VARIABLE
    (36) func -> . type VARIABLE EQ const
    (37) func -> . type VARIABLE EQ decl_list
    (38) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (19) type -> . int
    (20) type -> . bool
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    RBRACKET        shift and go to state 143
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    func_list                      shift and go to state 142
    func                           shift and go to state 144
    type                           shift and go to state 145
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 105

    (98) function_call -> ret_list ASSIGNMENT VARIABLE . call_list
    (99) function_call -> ret_list ASSIGNMENT VARIABLE .
    (88) call_list -> . call_list COMMA expression
    (89) call_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    NL              reduce using rule 99 (function_call -> ret_list ASSIGNMENT VARIABLE .)
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    call_list                      shift and go to state 146
    expression                     shift and go to state 50
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 106

    (103) ret_list -> ret_list COMMA variable .

    ASSIGNMENT      reduce using rule 103 (ret_list -> ret_list COMMA variable .)
    COMMA           reduce using rule 103 (ret_list -> ret_list COMMA variable .)


state 107

    (101) function_call -> type VARIABLE EQ VARIABLE . call_list
    (59) variable -> VARIABLE .
    (60) variable -> VARIABLE . LBRACKET index RBRACKET
    (88) call_list -> . call_list COMMA expression
    (89) call_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    PLUS            reduce using rule 59 (variable -> VARIABLE .)
    MINUS           reduce using rule 59 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 59 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 59 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 59 (variable -> VARIABLE .)
    STL             reduce using rule 59 (variable -> VARIABLE .)
    STR             reduce using rule 59 (variable -> VARIABLE .)
    AND             reduce using rule 59 (variable -> VARIABLE .)
    LESS            reduce using rule 59 (variable -> VARIABLE .)
    GREATER         reduce using rule 59 (variable -> VARIABLE .)
    NL              reduce using rule 59 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 49
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    call_list                      shift and go to state 147
    expression                     shift and go to state 50
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 108

    (11) declaration -> type VARIABLE EQ expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    NL              reduce using rule 11 (declaration -> type VARIABLE EQ expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 109

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET . decl_list R_FIGBRACKET
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 118
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    decl_list                      shift and go to state 148
    expr_list                      shift and go to state 134
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 110

    (94) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 149


state 111

    (88) call_list -> call_list COMMA expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 88 (call_list -> call_list COMMA expression .)
    NL              reduce using rule 88 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 112

    (60) variable -> VARIABLE LBRACKET index RBRACKET .

    ASSIGNMENT      reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COMMA           reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    PLUS            reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MINUS           reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_MATRIX      reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_ELEM        reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    TRANSPOSE       reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STL             reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STR             reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    AND             reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    LESS            reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    GREATER         reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    NL              reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINIF         reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGIN           reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    error           reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    RBRACKET        reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COLON           reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    R_FIGBRACKET    reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINFOR        reduce using rule 60 (variable -> VARIABLE LBRACKET index RBRACKET .)


state 113

    (66) index -> expr_list ind .

    RBRACKET        reduce using rule 66 (index -> expr_list ind .)


state 114

    (17) expr_list -> expr_list COMMA . expression
    (61) ind -> COMMA .
    (62) ind -> COMMA . COLON
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    RBRACKET        reduce using rule 61 (ind -> COMMA .)
    COLON           shift and go to state 123
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 150
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 115

    (67) index -> ind expr_list .
    (17) expr_list -> expr_list . COMMA expression
    (16) decl_list -> expr_list .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 16 (decl_list -> expr_list .)
    COMMA           shift and go to state 151
    RBRACKET        reduce using rule 16 (decl_list -> expr_list .)

  ! RBRACKET        [ reduce using rule 67 (index -> ind expr_list .) ]
  ! COMMA           [ reduce using rule 16 (decl_list -> expr_list .) ]


state 116

    (69) index -> ind decl_list .
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    RBRACKET        reduce using rule 69 (index -> ind decl_list .)
    COMMA           shift and go to state 152


state 117

    (18) expr_list -> expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 18 (expr_list -> expression .)
    RBRACKET        reduce using rule 18 (expr_list -> expression .)
    R_FIGBRACKET    reduce using rule 18 (expr_list -> expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 118

    (14) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expr_list                      shift and go to state 153
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 119

    (68) index -> decl_list ind .

    RBRACKET        reduce using rule 68 (index -> decl_list ind .)


state 120

    (15) decl_list -> decl_list COMMA . L_FIGBRACKET decl_list R_FIGBRACKET
    (61) ind -> COMMA .
    (62) ind -> COMMA . COLON

    L_FIGBRACKET    shift and go to state 154
    RBRACKET        reduce using rule 61 (ind -> COMMA .)
    COLON           shift and go to state 123


state 121

    (71) index -> L_FIGBRACKET decl_list . R_FIGBRACKET
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 155
    COMMA           shift and go to state 152


state 122

    (14) decl_list -> L_FIGBRACKET expr_list . R_FIGBRACKET
    (16) decl_list -> expr_list .
    (17) expr_list -> expr_list . COMMA expression

  ! shift/reduce conflict for R_FIGBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    R_FIGBRACKET    shift and go to state 156
    COMMA           shift and go to state 151

  ! R_FIGBRACKET    [ reduce using rule 16 (decl_list -> expr_list .) ]
  ! COMMA           [ reduce using rule 16 (decl_list -> expr_list .) ]


state 123

    (62) ind -> COMMA COLON .

    L_FIGBRACKET    reduce using rule 62 (ind -> COMMA COLON .)
    SUM             reduce using rule 62 (ind -> COMMA COLON .)
    DENY            reduce using rule 62 (ind -> COMMA COLON .)
    TRUE            reduce using rule 62 (ind -> COMMA COLON .)
    FALSE           reduce using rule 62 (ind -> COMMA COLON .)
    INT_DEC         reduce using rule 62 (ind -> COMMA COLON .)
    INT_BIN         reduce using rule 62 (ind -> COMMA COLON .)
    VARIABLE        reduce using rule 62 (ind -> COMMA COLON .)
    MOVE            reduce using rule 62 (ind -> COMMA COLON .)
    RIGHT           reduce using rule 62 (ind -> COMMA COLON .)
    LEFT            reduce using rule 62 (ind -> COMMA COLON .)
    WALL            reduce using rule 62 (ind -> COMMA COLON .)
    EXIT            reduce using rule 62 (ind -> COMMA COLON .)
    RBRACKET        reduce using rule 62 (ind -> COMMA COLON .)


state 124

    (63) ind -> COLON COMMA .

    L_FIGBRACKET    reduce using rule 63 (ind -> COLON COMMA .)
    SUM             reduce using rule 63 (ind -> COLON COMMA .)
    DENY            reduce using rule 63 (ind -> COLON COMMA .)
    TRUE            reduce using rule 63 (ind -> COLON COMMA .)
    FALSE           reduce using rule 63 (ind -> COLON COMMA .)
    INT_DEC         reduce using rule 63 (ind -> COLON COMMA .)
    INT_BIN         reduce using rule 63 (ind -> COLON COMMA .)
    VARIABLE        reduce using rule 63 (ind -> COLON COMMA .)
    MOVE            reduce using rule 63 (ind -> COLON COMMA .)
    RIGHT           reduce using rule 63 (ind -> COLON COMMA .)
    LEFT            reduce using rule 63 (ind -> COLON COMMA .)
    WALL            reduce using rule 63 (ind -> COLON COMMA .)
    EXIT            reduce using rule 63 (ind -> COLON COMMA .)
    RBRACKET        reduce using rule 63 (ind -> COLON COMMA .)


state 125

    (43) math_expression -> expression PLUS expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 43 (math_expression -> expression PLUS expression .)
    NL              reduce using rule 43 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 43 (math_expression -> expression PLUS expression .)
    BEGIN           reduce using rule 43 (math_expression -> expression PLUS expression .)
    error           reduce using rule 43 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 43 (math_expression -> expression PLUS expression .)
    COLON           reduce using rule 43 (math_expression -> expression PLUS expression .)
    R_FIGBRACKET    reduce using rule 43 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 43 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90

  ! PLUS            [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! STL             [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! STR             [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 43 (math_expression -> expression PLUS expression .) ]


state 126

    (44) math_expression -> expression MINUS expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 44 (math_expression -> expression MINUS expression .)
    NL              reduce using rule 44 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 44 (math_expression -> expression MINUS expression .)
    BEGIN           reduce using rule 44 (math_expression -> expression MINUS expression .)
    error           reduce using rule 44 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 44 (math_expression -> expression MINUS expression .)
    COLON           reduce using rule 44 (math_expression -> expression MINUS expression .)
    R_FIGBRACKET    reduce using rule 44 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 44 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90

  ! PLUS            [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! STL             [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! STR             [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 44 (math_expression -> expression MINUS expression .) ]


state 127

    (45) math_expression -> expression MUL_MATRIX expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    NL              reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    BEGINIF         reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    BEGIN           reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    error           reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    RBRACKET        reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    COLON           reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    R_FIGBRACKET    reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    BEGINFOR        reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90

  ! PLUS            [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MINUS           [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_MATRIX      [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_ELEM        [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! TRANSPOSE       [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STL             [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STR             [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! AND             [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! LESS            [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]
  ! GREATER         [ reduce using rule 45 (math_expression -> expression MUL_MATRIX expression .) ]


state 128

    (46) math_expression -> expression MUL_ELEM expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    NL              reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    BEGINIF         reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    BEGIN           reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    error           reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    RBRACKET        reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    COLON           reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    R_FIGBRACKET    reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    BEGINFOR        reduce using rule 46 (math_expression -> expression MUL_ELEM expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90

  ! PLUS            [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! MINUS           [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_MATRIX      [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_ELEM        [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! TRANSPOSE       [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! STL             [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! STR             [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! AND             [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! LESS            [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]
  ! GREATER         [ reduce using rule 46 (math_expression -> expression MUL_ELEM expression .) ]


state 129

    (52) math_expression -> expression AND expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    PLUS            reduce using rule 52 (math_expression -> expression AND expression .)
    MINUS           reduce using rule 52 (math_expression -> expression AND expression .)
    MUL_MATRIX      reduce using rule 52 (math_expression -> expression AND expression .)
    MUL_ELEM        reduce using rule 52 (math_expression -> expression AND expression .)
    TRANSPOSE       reduce using rule 52 (math_expression -> expression AND expression .)
    STL             reduce using rule 52 (math_expression -> expression AND expression .)
    STR             reduce using rule 52 (math_expression -> expression AND expression .)
    AND             reduce using rule 52 (math_expression -> expression AND expression .)
    COMMA           reduce using rule 52 (math_expression -> expression AND expression .)
    NL              reduce using rule 52 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 52 (math_expression -> expression AND expression .)
    BEGIN           reduce using rule 52 (math_expression -> expression AND expression .)
    error           reduce using rule 52 (math_expression -> expression AND expression .)
    RBRACKET        reduce using rule 52 (math_expression -> expression AND expression .)
    COLON           reduce using rule 52 (math_expression -> expression AND expression .)
    R_FIGBRACKET    reduce using rule 52 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 52 (math_expression -> expression AND expression .)
    LESS            shift and go to state 89
    GREATER         shift and go to state 90

  ! LESS            [ reduce using rule 52 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 52 (math_expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MUL_MATRIX      [ shift and go to state 83 ]
  ! MUL_ELEM        [ shift and go to state 84 ]
  ! TRANSPOSE       [ shift and go to state 85 ]
  ! STL             [ shift and go to state 86 ]
  ! STR             [ shift and go to state 87 ]
  ! AND             [ shift and go to state 88 ]


state 130

    (53) math_expression -> expression LESS expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    PLUS            reduce using rule 53 (math_expression -> expression LESS expression .)
    MINUS           reduce using rule 53 (math_expression -> expression LESS expression .)
    MUL_MATRIX      reduce using rule 53 (math_expression -> expression LESS expression .)
    MUL_ELEM        reduce using rule 53 (math_expression -> expression LESS expression .)
    TRANSPOSE       reduce using rule 53 (math_expression -> expression LESS expression .)
    STL             reduce using rule 53 (math_expression -> expression LESS expression .)
    STR             reduce using rule 53 (math_expression -> expression LESS expression .)
    AND             reduce using rule 53 (math_expression -> expression LESS expression .)
    LESS            reduce using rule 53 (math_expression -> expression LESS expression .)
    GREATER         reduce using rule 53 (math_expression -> expression LESS expression .)
    COMMA           reduce using rule 53 (math_expression -> expression LESS expression .)
    NL              reduce using rule 53 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 53 (math_expression -> expression LESS expression .)
    BEGIN           reduce using rule 53 (math_expression -> expression LESS expression .)
    error           reduce using rule 53 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 53 (math_expression -> expression LESS expression .)
    COLON           reduce using rule 53 (math_expression -> expression LESS expression .)
    R_FIGBRACKET    reduce using rule 53 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 53 (math_expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MUL_MATRIX      [ shift and go to state 83 ]
  ! MUL_ELEM        [ shift and go to state 84 ]
  ! TRANSPOSE       [ shift and go to state 85 ]
  ! STL             [ shift and go to state 86 ]
  ! STR             [ shift and go to state 87 ]
  ! AND             [ shift and go to state 88 ]
  ! LESS            [ shift and go to state 89 ]
  ! GREATER         [ shift and go to state 90 ]


state 131

    (54) math_expression -> expression GREATER expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    PLUS            reduce using rule 54 (math_expression -> expression GREATER expression .)
    MINUS           reduce using rule 54 (math_expression -> expression GREATER expression .)
    MUL_MATRIX      reduce using rule 54 (math_expression -> expression GREATER expression .)
    MUL_ELEM        reduce using rule 54 (math_expression -> expression GREATER expression .)
    TRANSPOSE       reduce using rule 54 (math_expression -> expression GREATER expression .)
    STL             reduce using rule 54 (math_expression -> expression GREATER expression .)
    STR             reduce using rule 54 (math_expression -> expression GREATER expression .)
    AND             reduce using rule 54 (math_expression -> expression GREATER expression .)
    LESS            reduce using rule 54 (math_expression -> expression GREATER expression .)
    GREATER         reduce using rule 54 (math_expression -> expression GREATER expression .)
    COMMA           reduce using rule 54 (math_expression -> expression GREATER expression .)
    NL              reduce using rule 54 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 54 (math_expression -> expression GREATER expression .)
    BEGIN           reduce using rule 54 (math_expression -> expression GREATER expression .)
    error           reduce using rule 54 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 54 (math_expression -> expression GREATER expression .)
    COLON           reduce using rule 54 (math_expression -> expression GREATER expression .)
    R_FIGBRACKET    reduce using rule 54 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 54 (math_expression -> expression GREATER expression .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MUL_MATRIX      [ shift and go to state 83 ]
  ! MUL_ELEM        [ shift and go to state 84 ]
  ! TRANSPOSE       [ shift and go to state 85 ]
  ! STL             [ shift and go to state 86 ]
  ! STR             [ shift and go to state 87 ]
  ! AND             [ shift and go to state 88 ]
  ! LESS            [ shift and go to state 89 ]
  ! GREATER         [ shift and go to state 90 ]


state 132

    (48) math_expression -> SUM LBRACKET expression . RBRACKET
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    RBRACKET        shift and go to state 157
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 133

    (78) assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list . R_FIGBRACKET
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 158
    COMMA           shift and go to state 152


state 134

    (16) decl_list -> expr_list .
    (17) expr_list -> expr_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    R_FIGBRACKET    reduce using rule 16 (decl_list -> expr_list .)
    RBRACKET        reduce using rule 16 (decl_list -> expr_list .)
    COMMA           shift and go to state 151

  ! COMMA           [ reduce using rule 16 (decl_list -> expr_list .) ]


state 135

    (100) function_call -> variable ASSIGNMENT VARIABLE call_list .
    (88) call_list -> call_list . COMMA expression

    NL              reduce using rule 100 (function_call -> variable ASSIGNMENT VARIABLE call_list .)
    COMMA           shift and go to state 72


state 136

    (80) for -> FOR VARIABLE EQ expression . COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> FOR VARIABLE EQ expression . COLON expression BEGIN NL stmt_list END
    (82) for -> FOR VARIABLE EQ expression . COLON expression error
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    COLON           shift and go to state 159
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 137

    (83) if -> IF expression BEGINIF NL . stmt_list ENDIF
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 160
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 138

    (84) if -> IF expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 161
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 139

    (72) operation -> MOVE LBRACKET expression RBRACKET .

    NL              reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    MUL_MATRIX      reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    MUL_ELEM        reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    TRANSPOSE       reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    STL             reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    STR             reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    AND             reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    LESS            reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    BEGINIF         reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    error           reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    COLON           reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    R_FIGBRACKET    reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)
    BEGINFOR        reduce using rule 72 (operation -> MOVE LBRACKET expression RBRACKET .)


state 140

    (90) function -> return_list EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> return_list EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 162


state 141

    (86) return_list -> return_list COMMA type VARIABLE .

    EQ              reduce using rule 86 (return_list -> return_list COMMA type VARIABLE .)
    COMMA           reduce using rule 86 (return_list -> return_list COMMA type VARIABLE .)


state 142

    (91) function -> FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (33) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 163
    COMMA           shift and go to state 164


state 143

    (93) function -> FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 165


state 144

    (34) func_list -> func .

    RBRACKET        reduce using rule 34 (func_list -> func .)
    COMMA           reduce using rule 34 (func_list -> func .)


state 145

    (35) func -> type . VARIABLE
    (36) func -> type . VARIABLE EQ const
    (37) func -> type . VARIABLE EQ decl_list
    (38) func -> type . VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET

    VARIABLE        shift and go to state 166


state 146

    (98) function_call -> ret_list ASSIGNMENT VARIABLE call_list .
    (88) call_list -> call_list . COMMA expression

    NL              reduce using rule 98 (function_call -> ret_list ASSIGNMENT VARIABLE call_list .)
    COMMA           shift and go to state 72


state 147

    (101) function_call -> type VARIABLE EQ VARIABLE call_list .
    (88) call_list -> call_list . COMMA expression

    NL              reduce using rule 101 (function_call -> type VARIABLE EQ VARIABLE call_list .)
    COMMA           shift and go to state 72


state 148

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list . R_FIGBRACKET
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 167
    COMMA           shift and go to state 152


state 149

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 168


state 150

    (17) expr_list -> expr_list COMMA expression .
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 17 (expr_list -> expr_list COMMA expression .)
    COLON           reduce using rule 17 (expr_list -> expr_list COMMA expression .)
    RBRACKET        reduce using rule 17 (expr_list -> expr_list COMMA expression .)
    R_FIGBRACKET    reduce using rule 17 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 151

    (17) expr_list -> expr_list COMMA . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 150
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 152

    (15) decl_list -> decl_list COMMA . L_FIGBRACKET decl_list R_FIGBRACKET

    L_FIGBRACKET    shift and go to state 154


state 153

    (14) decl_list -> L_FIGBRACKET expr_list . R_FIGBRACKET
    (17) expr_list -> expr_list . COMMA expression

    R_FIGBRACKET    shift and go to state 156
    COMMA           shift and go to state 151


state 154

    (15) decl_list -> decl_list COMMA L_FIGBRACKET . decl_list R_FIGBRACKET
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 118
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    decl_list                      shift and go to state 169
    expr_list                      shift and go to state 134
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 155

    (71) index -> L_FIGBRACKET decl_list R_FIGBRACKET .

    RBRACKET        reduce using rule 71 (index -> L_FIGBRACKET decl_list R_FIGBRACKET .)


state 156

    (14) decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .

    COMMA           reduce using rule 14 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    COLON           reduce using rule 14 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    RBRACKET        reduce using rule 14 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    R_FIGBRACKET    reduce using rule 14 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)


state 157

    (48) math_expression -> SUM LBRACKET expression RBRACKET .

    PLUS            reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_MATRIX      reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_ELEM        reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    TRANSPOSE       reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STL             reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STR             reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    AND             reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    LESS            reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    NL              reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINIF         reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    error           reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COLON           reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    R_FIGBRACKET    reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINFOR        reduce using rule 48 (math_expression -> SUM LBRACKET expression RBRACKET .)


state 158

    (78) assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 78 (assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET .)


state 159

    (80) for -> FOR VARIABLE EQ expression COLON . expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> FOR VARIABLE EQ expression COLON . expression BEGIN NL stmt_list END
    (82) for -> FOR VARIABLE EQ expression COLON . expression error
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    expression                     shift and go to state 170
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 160

    (83) if -> IF expression BEGINIF NL stmt_list . ENDIF
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    ENDIF           shift and go to state 171
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 161

    (84) if -> IF expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 172
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 162

    (90) function -> return_list EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> return_list EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (33) func_list -> . func_list COMMA func
    (34) func_list -> . func
    (35) func -> . type VARIABLE
    (36) func -> . type VARIABLE EQ const
    (37) func -> . type VARIABLE EQ decl_list
    (38) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (19) type -> . int
    (20) type -> . bool
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    RBRACKET        shift and go to state 174
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    func_list                      shift and go to state 173
    func                           shift and go to state 144
    type                           shift and go to state 145
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 163

    (91) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 175


state 164

    (33) func_list -> func_list COMMA . func
    (35) func -> . type VARIABLE
    (36) func -> . type VARIABLE EQ const
    (37) func -> . type VARIABLE EQ decl_list
    (38) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (19) type -> . int
    (20) type -> . bool
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    func                           shift and go to state 176
    type                           shift and go to state 145
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 165

    (93) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 177


state 166

    (35) func -> type VARIABLE .
    (36) func -> type VARIABLE . EQ const
    (37) func -> type VARIABLE . EQ decl_list
    (38) func -> type VARIABLE . EQ L_FIGBRACKET decl_list R_FIGBRACKET

    RBRACKET        reduce using rule 35 (func -> type VARIABLE .)
    COMMA           reduce using rule 35 (func -> type VARIABLE .)
    EQ              shift and go to state 178


state 167

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 12 (declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)


state 168

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (33) func_list -> . func_list COMMA func
    (34) func_list -> . func
    (35) func -> . type VARIABLE
    (36) func -> . type VARIABLE EQ const
    (37) func -> . type VARIABLE EQ decl_list
    (38) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (19) type -> . int
    (20) type -> . bool
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    RBRACKET        shift and go to state 180
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 145
    func_list                      shift and go to state 179
    func                           shift and go to state 144
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 169

    (15) decl_list -> decl_list COMMA L_FIGBRACKET decl_list . R_FIGBRACKET
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 181
    COMMA           shift and go to state 152


state 170

    (80) for -> FOR VARIABLE EQ expression COLON expression . BEGINFOR NL stmt_list ENDFOR
    (81) for -> FOR VARIABLE EQ expression COLON expression . BEGIN NL stmt_list END
    (82) for -> FOR VARIABLE EQ expression COLON expression . error
    (43) math_expression -> expression . PLUS expression
    (44) math_expression -> expression . MINUS expression
    (45) math_expression -> expression . MUL_MATRIX expression
    (46) math_expression -> expression . MUL_ELEM expression
    (47) math_expression -> expression . TRANSPOSE
    (49) math_expression -> expression . STL
    (50) math_expression -> expression . STR
    (52) math_expression -> expression . AND expression
    (53) math_expression -> expression . LESS expression
    (54) math_expression -> expression . GREATER expression

    BEGINFOR        shift and go to state 182
    BEGIN           shift and go to state 183
    error           shift and go to state 184
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MUL_MATRIX      shift and go to state 83
    MUL_ELEM        shift and go to state 84
    TRANSPOSE       shift and go to state 85
    STL             shift and go to state 86
    STR             shift and go to state 87
    AND             shift and go to state 88
    LESS            shift and go to state 89
    GREATER         shift and go to state 90


state 171

    (83) if -> IF expression BEGINIF NL stmt_list ENDIF .

    NL              reduce using rule 83 (if -> IF expression BEGINIF NL stmt_list ENDIF .)


state 172

    (84) if -> IF expression BEGIN NL stmt_list END .

    NL              reduce using rule 84 (if -> IF expression BEGIN NL stmt_list END .)


state 173

    (90) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (33) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 185
    COMMA           shift and go to state 164


state 174

    (92) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 186


state 175

    (91) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 187


state 176

    (33) func_list -> func_list COMMA func .

    RBRACKET        reduce using rule 33 (func_list -> func_list COMMA func .)
    COMMA           reduce using rule 33 (func_list -> func_list COMMA func .)


state 177

    (93) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 188
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 178

    (36) func -> type VARIABLE EQ . const
    (37) func -> type VARIABLE EQ . decl_list
    (38) func -> type VARIABLE EQ . L_FIGBRACKET decl_list R_FIGBRACKET
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 191
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    const                          shift and go to state 189
    decl_list                      shift and go to state 190
    expr_list                      shift and go to state 134
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 179

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (33) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 192
    COMMA           shift and go to state 164


state 180

    (95) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 193


state 181

    (15) decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .

    COMMA           reduce using rule 15 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    COLON           reduce using rule 15 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    RBRACKET        reduce using rule 15 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    R_FIGBRACKET    reduce using rule 15 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)


state 182

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR . NL stmt_list ENDFOR

    NL              shift and go to state 194


state 183

    (81) for -> FOR VARIABLE EQ expression COLON expression BEGIN . NL stmt_list END

    NL              shift and go to state 195


state 184

    (82) for -> FOR VARIABLE EQ expression COLON expression error .

    NL              reduce using rule 82 (for -> FOR VARIABLE EQ expression COLON expression error .)


state 185

    (90) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 196


state 186

    (92) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 197


state 187

    (91) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 198
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 188

    (93) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 199
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 189

    (36) func -> type VARIABLE EQ const .
    (40) expression -> const .

  ! reduce/reduce conflict for COMMA resolved using rule 36 (func -> type VARIABLE EQ const .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 36 (func -> type VARIABLE EQ const .)
    RBRACKET        reduce using rule 36 (func -> type VARIABLE EQ const .)
    COMMA           reduce using rule 36 (func -> type VARIABLE EQ const .)
    PLUS            reduce using rule 40 (expression -> const .)
    MINUS           reduce using rule 40 (expression -> const .)
    MUL_MATRIX      reduce using rule 40 (expression -> const .)
    MUL_ELEM        reduce using rule 40 (expression -> const .)
    TRANSPOSE       reduce using rule 40 (expression -> const .)
    STL             reduce using rule 40 (expression -> const .)
    STR             reduce using rule 40 (expression -> const .)
    AND             reduce using rule 40 (expression -> const .)
    LESS            reduce using rule 40 (expression -> const .)
    GREATER         reduce using rule 40 (expression -> const .)

  ! COMMA           [ reduce using rule 40 (expression -> const .) ]
  ! RBRACKET        [ reduce using rule 40 (expression -> const .) ]


state 190

    (37) func -> type VARIABLE EQ decl_list .
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    RBRACKET        reduce using rule 37 (func -> type VARIABLE EQ decl_list .)
    COMMA           shift and go to state 152

  ! COMMA           [ reduce using rule 37 (func -> type VARIABLE EQ decl_list .) ]


state 191

    (38) func -> type VARIABLE EQ L_FIGBRACKET . decl_list R_FIGBRACKET
    (14) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (14) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (15) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (16) decl_list -> . expr_list
    (17) expr_list -> . expr_list COMMA expression
    (18) expr_list -> . expression
    (39) expression -> . math_expression
    (40) expression -> . const
    (41) expression -> . variable
    (42) expression -> . operation
    (43) math_expression -> . expression PLUS expression
    (44) math_expression -> . expression MINUS expression
    (45) math_expression -> . expression MUL_MATRIX expression
    (46) math_expression -> . expression MUL_ELEM expression
    (47) math_expression -> . expression TRANSPOSE
    (48) math_expression -> . SUM LBRACKET expression RBRACKET
    (49) math_expression -> . expression STL
    (50) math_expression -> . expression STR
    (51) math_expression -> . DENY expression
    (52) math_expression -> . expression AND expression
    (53) math_expression -> . expression LESS expression
    (54) math_expression -> . expression GREATER expression
    (55) const -> . TRUE
    (56) const -> . FALSE
    (57) const -> . INT_DEC
    (58) const -> . INT_BIN
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT

    L_FIGBRACKET    shift and go to state 118
    SUM             shift and go to state 55
    DENY            shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    INT_DEC         shift and go to state 59
    INT_BIN         shift and go to state 60
    VARIABLE        shift and go to state 47
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20

    decl_list                      shift and go to state 200
    expr_list                      shift and go to state 122
    expression                     shift and go to state 117
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53
    operation                      shift and go to state 54

state 192

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 201


state 193

    (95) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 202


state 194

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL . stmt_list ENDFOR
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 203
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 195

    (81) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 204
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 196

    (90) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 205


state 197

    (92) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 206
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 198

    (91) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 207
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 199

    (93) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 93 (function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 200

    (38) func -> type VARIABLE EQ L_FIGBRACKET decl_list . R_FIGBRACKET
    (15) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 208
    COMMA           shift and go to state 152


state 201

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 209


state 202

    (95) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    stmt_list                      shift and go to state 210
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 203

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list . ENDFOR
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    ENDFOR          shift and go to state 211
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 204

    (81) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 212
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 205

    (90) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 213
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 206

    (92) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 214
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 207

    (91) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 91 (function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 208

    (38) func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .

    RBRACKET        reduce using rule 38 (func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)
    COMMA           reduce using rule 38 (func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)


state 209

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    stmt_list                      shift and go to state 215
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 210

    (95) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 216
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 211

    (80) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .

    NL              reduce using rule 80 (for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .)


state 212

    (81) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .

    NL              reduce using rule 81 (for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .)


state 213

    (90) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 217
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 214

    (92) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 92 (function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 215

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (13) declaration -> . type VARIABLE error
    (77) assignment -> . variable ASSIGNMENT expression
    (78) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (79) assignment -> . variable ASSIGNMENT error
    (80) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (81) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (82) for -> . FOR VARIABLE EQ expression COLON expression error
    (83) if -> . IF expression BEGINIF NL stmt_list ENDIF
    (84) if -> . IF expression BEGIN NL stmt_list END
    (85) if -> . IF expression error
    (72) operation -> . MOVE LBRACKET expression RBRACKET
    (73) operation -> . RIGHT
    (74) operation -> . LEFT
    (75) operation -> . WALL
    (76) operation -> . EXIT
    (90) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (91) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (92) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (93) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (94) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (95) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (96) function_call -> . VARIABLE
    (97) function_call -> . VARIABLE call_list
    (98) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (99) function_call -> . ret_list ASSIGNMENT VARIABLE
    (100) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (101) function_call -> . type VARIABLE EQ VARIABLE call_list
    (19) type -> . int
    (20) type -> . bool
    (59) variable -> . VARIABLE
    (60) variable -> . VARIABLE LBRACKET index RBRACKET
    (86) return_list -> . return_list COMMA type VARIABLE
    (87) return_list -> . type VARIABLE
    (102) ret_list -> . variable
    (103) ret_list -> . ret_list COMMA variable
    (21) int -> . INT
    (22) int -> . CINT
    (23) int -> . VINT
    (24) int -> . MINT
    (25) int -> . CVINT
    (26) int -> . CMINT
    (27) bool -> . BOOL
    (28) bool -> . CBOOL
    (29) bool -> . VBOOL
    (30) bool -> . MBOOL
    (31) bool -> . CVBOOL
    (32) bool -> . CMBOOL

    END             shift and go to state 218
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 216

    (95) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 95 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 217

    (90) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 90 (function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 218

    (94) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 94 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGNMENT in state 13 resolved as shift
WARNING: shift/reduce conflict for EQ in state 46 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for COLON in state 75 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 115 resolved as shift
WARNING: shift/reduce conflict for R_FIGBRACKET in state 122 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 125 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 125 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 125 resolved as shift
WARNING: shift/reduce conflict for STL in state 125 resolved as shift
WARNING: shift/reduce conflict for STR in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 126 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 126 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 126 resolved as shift
WARNING: shift/reduce conflict for STL in state 126 resolved as shift
WARNING: shift/reduce conflict for STR in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 127 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 127 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 127 resolved as shift
WARNING: shift/reduce conflict for STL in state 127 resolved as shift
WARNING: shift/reduce conflict for STR in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for LESS in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 128 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 128 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 128 resolved as shift
WARNING: shift/reduce conflict for STL in state 128 resolved as shift
WARNING: shift/reduce conflict for STR in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for LESS in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 128 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 134 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 190 resolved as shift
WARNING: reduce/reduce conflict in state 74 resolved using rule (expr_list -> expression)
WARNING: rejected rule (index -> expression) in state 74
WARNING: reduce/reduce conflict in state 75 resolved using rule (decl_list -> expr_list)
WARNING: rejected rule (index -> expr_list) in state 75
WARNING: reduce/reduce conflict in state 115 resolved using rule (decl_list -> expr_list)
WARNING: rejected rule (index -> ind expr_list) in state 115
WARNING: reduce/reduce conflict in state 189 resolved using rule (func -> type VARIABLE EQ const)
WARNING: rejected rule (expression -> const) in state 189
WARNING: Rule (index -> expression) is never reduced
WARNING: Rule (index -> expr_list) is never reduced
WARNING: Rule (index -> ind expr_list) is never reduced
