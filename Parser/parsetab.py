
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightDENYleftANDnonassocLESSGREATERAND ASSIGNMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assignment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdeclaration : type VARIABLE NLdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ const\n                | type VARIABLE EQ decl_list\n                | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETexpression : math_expression\n                      | const\n                      | variable\n                      | operationmath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind : COMMA\n               | COMMA COLON\n               | COLON COMMAindex : expression\n                 | expr_list\n                 | expr_list ind\n                 | ind expr_list\n                 | decl_list ind\n                 | ind decl_list\n                 | decl_list\n                 | L_FIGBRACKET decl_list R_FIGBRACKEToperation : MOVE LBRACKET expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassignment : variable ASSIGNMENT expression\n                     | variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKETassignment : variable ASSIGNMENT errorfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDfor : FOR errorif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDif : IF errorreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE\n                         | variable ASSIGNMENT VARIABLE call_list\n                         | type VARIABLE EQ VARIABLE call_listret_list : variable\n                    | ret_list COMMA variable'
    
_lr_action_items = {'FOR':([0,2,3,38,39,40,41,42,43,44,45,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,38,39,40,41,42,43,44,45,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,12,15,38,39,40,41,42,43,44,45,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[16,16,-3,16,16,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,-61,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-62,-63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,12,15,38,39,40,41,42,43,44,45,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[17,17,-3,17,17,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,-61,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-62,-63,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,12,15,38,39,40,41,42,43,44,45,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[18,18,-3,18,18,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,-61,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-62,-63,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,12,15,38,39,40,41,42,43,44,45,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[19,19,-3,19,19,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,-61,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-62,-63,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,12,15,38,39,40,41,42,43,44,45,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[20,20,-3,20,20,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,-61,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-62,-63,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,38,39,40,41,42,43,44,45,68,73,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,104,112,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,12,14,15,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,56,61,67,71,72,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,104,105,107,109,111,112,116,120,125,126,139,140,147,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[12,12,-3,46,47,62,47,70,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-2,-4,-5,-6,-7,-8,-9,-10,47,47,99,47,107,47,109,47,47,47,-61,47,47,47,47,47,47,47,47,47,47,47,142,143,47,47,47,151,47,47,-62,-63,12,12,168,47,47,47,12,12,12,47,12,12,47,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'CINT':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'VINT':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'MINT':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CVINT':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CMINT':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BOOL':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'CBOOL':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'VBOOL':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MBOOL':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CVBOOL':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'CMBOOL':([0,2,3,38,39,40,41,42,43,44,45,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[37,37,-3,-2,-4,-5,-6,-7,-8,-9,-10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'$end':([1,2,3,38,39,40,41,42,43,44,45,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,38,39,40,41,42,43,44,45,162,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,173,]),'END':([3,38,39,40,41,42,43,44,45,163,189,199,205,207,211,214,216,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,174,200,208,213,215,217,218,219,]),'ENDFOR':([3,38,39,40,41,42,43,44,45,204,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,212,]),'NL':([4,5,6,7,8,9,10,12,17,18,19,20,46,47,48,50,51,52,53,54,57,58,59,60,63,65,74,88,89,90,95,96,98,99,101,102,107,109,110,113,114,127,128,129,130,131,132,133,137,141,148,149,159,160,167,169,173,174,177,184,185,187,194,197,200,202,208,212,213,215,217,218,219,],[39,40,41,42,43,44,45,-96,-73,-74,-75,-76,74,-59,-97,-89,-39,-40,-41,-42,-55,-56,-57,-58,-82,-85,-13,-47,-49,-50,-51,-77,-79,-59,139,140,-99,-59,-11,-88,-60,-43,-44,-45,-46,-52,-53,-54,-100,-72,-98,-101,-48,-78,179,-12,-83,-84,188,195,196,198,203,206,-93,210,-91,-80,-81,-92,-95,-90,-94,]),'ASSIGNMENT':([12,13,23,47,108,114,],[-59,61,71,-59,-103,-60,]),'COMMA':([12,13,17,18,19,20,21,23,46,47,48,49,50,51,52,53,54,57,58,59,60,77,78,80,83,88,89,90,95,108,113,114,117,118,119,123,124,127,128,129,130,131,132,133,135,136,137,141,143,144,146,148,149,150,152,155,158,159,168,171,175,178,181,183,190,191,201,209,],[-59,-102,-73,-74,-75,-76,69,72,-87,-59,75,82,-89,-39,-40,-41,-42,-55,-56,-57,-58,-18,116,122,126,-47,-49,-50,-51,-103,-88,-60,153,154,-18,154,153,-43,-44,-45,-46,-52,-53,-54,154,153,75,-72,-86,166,-34,75,75,154,-17,153,-14,-48,-35,154,166,-33,166,-15,-36,154,154,-38,]),'LBRACKET':([12,16,47,55,70,99,109,142,151,],[49,67,49,94,106,49,49,164,170,]),'SUM':([12,15,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,153,156,161,180,192,],[55,55,55,55,55,55,55,55,55,55,-61,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-62,-63,55,55,55,55,55,]),'DENY':([12,15,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,153,156,161,180,192,],[56,56,56,56,56,56,56,56,56,56,-61,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-62,-63,56,56,56,56,56,]),'TRUE':([12,15,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,153,156,161,180,192,],[57,57,57,57,57,57,57,57,57,57,-61,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-62,-63,57,57,57,57,57,]),'FALSE':([12,15,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,153,156,161,180,192,],[58,58,58,58,58,58,58,58,58,58,-61,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-62,-63,58,58,58,58,58,]),'INT_DEC':([12,15,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,153,156,161,180,192,],[59,59,59,59,59,59,59,59,59,59,-61,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-62,-63,59,59,59,59,59,]),'INT_BIN':([12,15,49,56,61,67,73,75,79,81,82,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,125,126,153,156,161,180,192,],[60,60,60,60,60,60,60,60,60,60,-61,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-62,-63,60,60,60,60,60,]),'error':([14,15,61,],[63,65,98,]),'PLUS':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,84,-39,-40,-41,-42,-55,-56,-57,-58,-39,84,84,-47,-49,-50,-51,84,-59,84,-59,84,84,-60,84,84,84,84,84,-52,-53,-54,84,84,-72,84,-48,84,-40,]),'MINUS':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,85,-39,-40,-41,-42,-55,-56,-57,-58,-39,85,85,-47,-49,-50,-51,85,-59,85,-59,85,85,-60,85,85,85,85,85,-52,-53,-54,85,85,-72,85,-48,85,-40,]),'MUL_MATRIX':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,86,-39,-40,-41,-42,-55,-56,-57,-58,-39,86,86,-47,-49,-50,-51,86,-59,86,-59,86,86,-60,86,86,86,86,86,-52,-53,-54,86,86,-72,86,-48,86,-40,]),'MUL_ELEM':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,87,-39,-40,-41,-42,-55,-56,-57,-58,-39,87,87,-47,-49,-50,-51,87,-59,87,-59,87,87,-60,87,87,87,87,87,-52,-53,-54,87,87,-72,87,-48,87,-40,]),'TRANSPOSE':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,88,-39,-40,-41,-42,-55,-56,-57,-58,-39,88,88,-47,-49,-50,-51,88,-59,88,-59,88,88,-60,88,88,88,88,88,-52,-53,-54,88,88,-72,88,-48,88,-40,]),'STL':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,89,-39,-40,-41,-42,-55,-56,-57,-58,-39,89,89,-47,-49,-50,-51,89,-59,89,-59,89,89,-60,89,89,89,89,89,-52,-53,-54,89,89,-72,89,-48,89,-40,]),'STR':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,90,-39,-40,-41,-42,-55,-56,-57,-58,-39,90,90,-47,-49,-50,-51,90,-59,90,-59,90,90,-60,90,90,90,90,90,-52,-53,-54,90,90,-72,90,-48,90,-40,]),'AND':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,91,-39,-40,-41,-42,-55,-56,-57,-58,-39,91,91,-47,-49,-50,91,91,-59,91,-59,91,91,-60,91,91,91,91,91,-52,-53,-54,91,91,-72,91,-48,91,-40,]),'LESS':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,92,-39,-40,-41,-42,-55,-56,-57,-58,-39,92,92,-47,-49,-50,92,92,-59,92,-59,92,92,-60,92,92,92,92,92,92,None,None,92,92,-72,92,-48,92,-40,]),'GREATER':([17,18,19,20,47,50,51,52,53,54,57,58,59,60,64,66,77,88,89,90,95,96,99,103,109,110,113,114,119,127,128,129,130,131,132,133,134,138,141,152,159,172,190,],[-73,-74,-75,-76,-59,93,-39,-40,-41,-42,-55,-56,-57,-58,-39,93,93,-47,-49,-50,93,93,-59,93,-59,93,93,-60,93,93,93,93,93,93,None,None,93,93,-72,93,-48,93,-40,]),'RBRACKET':([17,18,19,20,47,51,52,53,54,57,58,59,60,76,77,78,80,88,89,90,95,103,106,114,115,116,117,118,119,121,122,125,126,127,128,129,130,131,132,133,134,136,141,144,146,152,157,158,159,164,168,170,175,178,181,183,190,191,209,],[-73,-74,-75,-76,-59,-39,-40,-41,-42,-55,-56,-57,-58,114,-18,-16,-70,-47,-49,-50,-51,141,145,-60,-66,-61,-16,-69,-18,-68,-61,-62,-63,-43,-44,-45,-46,-52,-53,-54,159,-16,-72,165,-34,-17,-71,-14,-48,176,-35,182,186,-33,193,-15,-36,-37,-38,]),'COLON':([17,18,19,20,47,49,51,52,53,54,57,58,59,60,77,78,80,82,88,89,90,95,114,116,122,127,128,129,130,131,132,133,138,141,152,158,159,183,],[-73,-74,-75,-76,-59,83,-39,-40,-41,-42,-55,-56,-57,-58,-18,83,83,125,-47,-49,-50,-51,-60,125,125,-43,-44,-45,-46,-52,-53,-54,161,-72,-17,-14,-48,-15,]),'BEGINIF':([17,18,19,20,47,51,52,53,54,57,58,59,60,64,88,89,90,95,114,127,128,129,130,131,132,133,141,159,],[-73,-74,-75,-76,-59,-39,-40,-41,-42,-55,-56,-57,-58,101,-47,-49,-50,-51,-60,-43,-44,-45,-46,-52,-53,-54,-72,-48,]),'BEGIN':([17,18,19,20,47,51,52,53,54,57,58,59,60,64,88,89,90,95,114,127,128,129,130,131,132,133,141,145,159,165,172,176,182,186,193,],[-73,-74,-75,-76,-59,-39,-40,-41,-42,-55,-56,-57,-58,102,-47,-49,-50,-51,-60,-43,-44,-45,-46,-52,-53,-54,-72,167,-48,177,185,187,194,197,202,]),'R_FIGBRACKET':([17,18,19,20,47,51,52,53,54,57,58,59,60,88,89,90,95,114,119,123,124,127,128,129,130,131,132,133,135,136,141,150,152,155,158,159,171,183,201,],[-73,-74,-75,-76,-59,-39,-40,-41,-42,-55,-56,-57,-58,-47,-49,-50,-51,-60,-18,157,158,-43,-44,-45,-46,-52,-53,-54,160,-16,-72,169,-17,158,-14,-48,183,-15,209,]),'BEGINFOR':([17,18,19,20,47,51,52,53,54,57,58,59,60,88,89,90,95,114,127,128,129,130,131,132,133,141,159,172,],[-73,-74,-75,-76,-59,-39,-40,-41,-42,-55,-56,-57,-58,-47,-49,-50,-51,-60,-43,-44,-45,-46,-52,-53,-54,-72,-48,184,]),'EQ':([21,46,62,143,168,],[68,73,100,-86,180,]),'L_FIGBRACKET':([49,61,73,79,81,82,97,111,122,125,126,154,156,180,192,],[81,97,111,120,120,-61,120,120,156,-62,-63,156,120,192,120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,139,140,179,188,195,196,198,203,206,210,],[2,162,163,189,199,204,205,207,211,214,216,]),'statement':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[3,38,3,3,38,38,3,3,38,3,3,3,38,3,38,38,3,38,3,38,38,38,]),'declaration':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,12,15,49,56,61,67,73,75,79,81,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[8,8,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,8,8,54,54,54,8,8,8,54,8,8,54,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[11,11,105,147,11,11,11,11,147,147,147,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,15,49,56,61,67,72,73,75,79,81,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[13,13,53,53,53,53,53,53,108,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,13,13,53,53,53,13,13,13,53,13,13,53,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_list':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'ret_list':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'int':([0,2,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'bool':([0,2,69,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'call_list':([12,99,107,109,],[48,137,148,149,]),'expression':([12,15,49,56,61,67,73,75,79,81,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,153,156,161,180,192,],[50,66,77,95,96,103,110,113,119,119,127,128,129,130,131,132,133,134,119,50,138,50,50,119,152,119,152,119,172,119,119,]),'math_expression':([12,15,49,56,61,67,73,75,79,81,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,153,156,161,180,192,],[51,64,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'const':([12,15,49,56,61,67,73,75,79,81,84,85,86,87,91,92,93,94,97,99,100,107,109,111,116,120,153,156,161,180,192,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,190,52,]),'index':([49,],[76,]),'expr_list':([49,79,81,97,111,120,156,180,192,],[78,117,124,136,136,155,136,136,124,]),'ind':([49,78,80,],[79,115,121,]),'decl_list':([49,79,81,97,111,156,180,192,],[80,118,123,135,150,171,191,201,]),'func_list':([106,164,170,],[144,175,181,]),'func':([106,164,166,170,],[146,146,178,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',21),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',32),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',33),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',40),
  ('statement -> assignment NL','statement',2,'p_statement','parser.py',41),
  ('statement -> for NL','statement',2,'p_statement','parser.py',42),
  ('statement -> if NL','statement',2,'p_statement','parser.py',43),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',44),
  ('statement -> function NL','statement',2,'p_statement','parser.py',45),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',46),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',50),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',51),
  ('declaration -> type VARIABLE NL','declaration',3,'p_decl_error','parser.py',63),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',68),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',69),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',70),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',79),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',80),
  ('type -> int','type',1,'p_type','parser.py',87),
  ('type -> bool','type',1,'p_type','parser.py',88),
  ('int -> INT','int',1,'p_int','parser.py',92),
  ('int -> CINT','int',1,'p_int','parser.py',93),
  ('int -> VINT','int',1,'p_int','parser.py',94),
  ('int -> MINT','int',1,'p_int','parser.py',95),
  ('int -> CVINT','int',1,'p_int','parser.py',96),
  ('int -> CMINT','int',1,'p_int','parser.py',97),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',101),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',102),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',103),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',104),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',105),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',106),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',110),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',111),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',118),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',119),
  ('func -> type VARIABLE EQ decl_list','func',4,'p_func','parser.py',120),
  ('func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','func',6,'p_func','parser.py',121),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',130),
  ('expression -> const','expression',1,'p_expression','parser.py',131),
  ('expression -> variable','expression',1,'p_expression','parser.py',132),
  ('expression -> operation','expression',1,'p_expression','parser.py',133),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',137),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',138),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',139),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',140),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',141),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',142),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',143),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',144),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',145),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',146),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',147),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',148),
  ('const -> TRUE','const',1,'p_const','parser.py',159),
  ('const -> FALSE','const',1,'p_const','parser.py',160),
  ('const -> INT_DEC','const',1,'p_const','parser.py',161),
  ('const -> INT_BIN','const',1,'p_const','parser.py',162),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',166),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',167),
  ('ind -> COMMA','ind',1,'p_ind_exp','parser.py',174),
  ('ind -> COMMA COLON','ind',2,'p_ind_exp','parser.py',175),
  ('ind -> COLON COMMA','ind',2,'p_ind_exp','parser.py',176),
  ('index -> expression','index',1,'p_index','parser.py',185),
  ('index -> expr_list','index',1,'p_index','parser.py',186),
  ('index -> expr_list ind','index',2,'p_index','parser.py',187),
  ('index -> ind expr_list','index',2,'p_index','parser.py',188),
  ('index -> decl_list ind','index',2,'p_index','parser.py',189),
  ('index -> ind decl_list','index',2,'p_index','parser.py',190),
  ('index -> decl_list','index',1,'p_index','parser.py',191),
  ('index -> L_FIGBRACKET decl_list R_FIGBRACKET','index',3,'p_index','parser.py',192),
  ('operation -> MOVE LBRACKET expression RBRACKET','operation',4,'p_operation','parser.py',203),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',204),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',205),
  ('operation -> WALL','operation',1,'p_operation','parser.py',206),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',207),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',214),
  ('assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET','assignment',5,'p_assignment','parser.py',215),
  ('assignment -> variable ASSIGNMENT error','assignment',3,'p_assign_error','parser.py',222),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',227),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',228),
  ('for -> FOR error','for',2,'p_for_error','parser.py',234),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',239),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',240),
  ('if -> IF error','if',2,'p_if_error','parser.py',244),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',249),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',250),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',257),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',258),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',265),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',266),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',267),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',268),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',269),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',270),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',309),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',310),
  ('function_call -> ret_list ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',311),
  ('function_call -> ret_list ASSIGNMENT VARIABLE','function_call',3,'p_function_call','parser.py',312),
  ('function_call -> variable ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',313),
  ('function_call -> type VARIABLE EQ VARIABLE call_list','function_call',5,'p_function_call','parser.py',314),
  ('ret_list -> variable','ret_list',1,'p_ret_list','parser.py',331),
  ('ret_list -> ret_list COMMA variable','ret_list',3,'p_ret_list','parser.py',332),
]
