
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightDENYleftANDnonassocLESSGREATERAND ASSIGNMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assignment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLstatement : errors NLstatement : errorsdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTtype : errorsbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ const\n                | type VARIABLE EQ decl_list\n                | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETexpression : math_expression\n                      | const\n                      | variablemath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind : COMMA\n               | COMMA COLON\n               | COLON COMMAindex : expression\n                 | expr_list\n                 | expr_list ind\n                 | ind expr_list\n                 | decl_list ind\n                 | ind decl_list\n                 | decl_list\n                 | L_FIGBRACKET decl_list R_FIGBRACKEToperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassignment : variable ASSIGNMENT expression\n                     | variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKETfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE\n                         | variable ASSIGNMENT VARIABLE call_list\n                         | type VARIABLE EQ VARIABLE call_listret_list : variable\n                    | ret_list COMMA variableerrors : errors error\n                    | error'
    
_lr_action_items = {'FOR':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[15,15,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'IF':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[16,16,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'MOVE':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[17,17,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'RIGHT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[18,18,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'LEFT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[19,19,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'WALL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[20,20,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'EXIT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[21,21,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'FUNCTION':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,69,74,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[23,23,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,103,112,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'VARIABLE':([0,2,3,11,12,13,15,16,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,53,59,64,68,72,73,74,75,79,81,82,84,85,86,87,91,92,93,94,97,98,99,103,104,105,107,109,111,112,116,120,125,126,139,140,147,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[13,13,-3,-12,50,51,65,51,71,-103,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-32,-33,-34,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,51,51,98,51,107,51,109,51,51,51,-62,51,51,51,51,51,51,51,51,51,51,51,142,143,-28,51,51,51,151,51,51,-63,-64,13,13,168,51,51,51,13,13,13,51,13,13,51,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'error':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,105,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[25,25,-3,49,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,25,49,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'INT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[28,28,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[29,29,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'VINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[30,30,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'MINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[31,31,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CVINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[32,32,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'CMINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[33,33,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'BOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[34,34,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[35,35,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'VBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[36,36,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'MBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[37,37,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'CVBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[38,38,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'CMBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[39,39,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'$end':([1,2,3,11,25,40,41,42,43,44,45,46,47,48,49,],[0,-1,-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,]),'ENDIF':([3,11,25,40,41,42,43,44,45,46,47,48,49,162,],[-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,173,]),'END':([3,11,25,40,41,42,43,44,45,46,47,48,49,163,189,199,205,207,211,214,216,],[-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,174,200,208,213,215,217,218,219,]),'ENDFOR':([3,11,25,40,41,42,43,44,45,46,47,48,49,204,],[-3,-12,-103,-2,-4,-5,-6,-7,-8,-9,-10,-11,-102,212,]),'NL':([4,5,6,7,8,9,10,11,13,18,19,20,21,25,49,51,52,54,55,56,57,60,61,62,63,88,89,90,95,96,98,100,101,107,109,110,113,114,127,128,129,130,131,132,133,137,141,148,149,159,160,167,169,173,174,177,184,185,187,194,197,200,202,208,212,213,215,217,218,219,],[41,42,43,44,45,46,47,48,-94,-74,-75,-76,-77,-103,-102,-60,-95,-87,-41,-42,-43,-56,-57,-58,-59,-48,-50,-51,-52,-78,-60,139,140,-97,-60,-13,-86,-61,-44,-45,-46,-47,-53,-54,-55,-98,-73,-96,-99,-49,-79,179,-14,-82,-83,188,195,196,198,203,206,-91,210,-89,-80,-81,-90,-93,-88,-92,]),'ASSIGNMENT':([13,14,24,51,108,114,],[-60,64,72,-60,-101,-61,]),'COMMA':([13,14,22,24,50,51,52,53,54,55,56,57,60,61,62,63,77,78,80,83,88,89,90,95,108,113,114,117,118,119,123,124,127,128,129,130,131,132,133,135,136,137,143,144,146,148,149,150,152,155,158,159,168,171,175,178,181,183,190,191,201,209,],[-60,-100,70,73,-85,-60,75,82,-87,-41,-42,-43,-56,-57,-58,-59,-19,116,122,126,-48,-50,-51,-52,-101,-86,-61,153,154,-19,154,153,-44,-45,-46,-47,-53,-54,-55,154,153,75,-84,166,-36,75,75,154,-18,153,-15,-49,-37,154,166,-35,166,-16,-38,154,154,-40,]),'LBRACKET':([13,17,51,58,71,98,109,142,151,],[53,68,53,94,106,53,53,164,170,]),'SUM':([13,16,53,59,64,68,74,75,79,81,82,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,125,126,153,156,161,180,192,],[58,58,58,58,58,58,58,58,58,58,-62,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-63,-64,58,58,58,58,58,]),'DENY':([13,16,53,59,64,68,74,75,79,81,82,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,125,126,153,156,161,180,192,],[59,59,59,59,59,59,59,59,59,59,-62,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-63,-64,59,59,59,59,59,]),'TRUE':([13,16,53,59,64,68,74,75,79,81,82,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,125,126,153,156,161,180,192,],[60,60,60,60,60,60,60,60,60,60,-62,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-63,-64,60,60,60,60,60,]),'FALSE':([13,16,53,59,64,68,74,75,79,81,82,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,125,126,153,156,161,180,192,],[61,61,61,61,61,61,61,61,61,61,-62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-63,-64,61,61,61,61,61,]),'INT_DEC':([13,16,53,59,64,68,74,75,79,81,82,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,125,126,153,156,161,180,192,],[62,62,62,62,62,62,62,62,62,62,-62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-63,-64,62,62,62,62,62,]),'INT_BIN':([13,16,53,59,64,68,74,75,79,81,82,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,125,126,153,156,161,180,192,],[63,63,63,63,63,63,63,63,63,63,-62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-63,-64,63,63,63,63,63,]),'EQ':([22,50,65,143,168,],[69,74,99,-84,180,]),'PLUS':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,84,-41,-42,-43,-56,-57,-58,-59,-41,84,84,-48,-50,-51,-52,84,-60,-41,-60,84,84,-61,84,84,84,84,84,-53,-54,-55,84,84,84,-49,84,-42,]),'MINUS':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,85,-41,-42,-43,-56,-57,-58,-59,-41,85,85,-48,-50,-51,-52,85,-60,-41,-60,85,85,-61,85,85,85,85,85,-53,-54,-55,85,85,85,-49,85,-42,]),'MUL_MATRIX':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,86,-41,-42,-43,-56,-57,-58,-59,-41,86,86,-48,-50,-51,-52,86,-60,-41,-60,86,86,-61,86,86,86,86,86,-53,-54,-55,86,86,86,-49,86,-42,]),'MUL_ELEM':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,87,-41,-42,-43,-56,-57,-58,-59,-41,87,87,-48,-50,-51,-52,87,-60,-41,-60,87,87,-61,87,87,87,87,87,-53,-54,-55,87,87,87,-49,87,-42,]),'TRANSPOSE':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,88,-41,-42,-43,-56,-57,-58,-59,-41,88,88,-48,-50,-51,-52,88,-60,-41,-60,88,88,-61,88,88,88,88,88,-53,-54,-55,88,88,88,-49,88,-42,]),'STL':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,89,-41,-42,-43,-56,-57,-58,-59,-41,89,89,-48,-50,-51,-52,89,-60,-41,-60,89,89,-61,89,89,89,89,89,-53,-54,-55,89,89,89,-49,89,-42,]),'STR':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,90,-41,-42,-43,-56,-57,-58,-59,-41,90,90,-48,-50,-51,-52,90,-60,-41,-60,90,90,-61,90,90,90,90,90,-53,-54,-55,90,90,90,-49,90,-42,]),'AND':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,91,-41,-42,-43,-56,-57,-58,-59,-41,91,91,-48,-50,-51,91,91,-60,-41,-60,91,91,-61,91,91,91,91,91,-53,-54,-55,91,91,91,-49,91,-42,]),'LESS':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,92,-41,-42,-43,-56,-57,-58,-59,-41,92,92,-48,-50,-51,92,92,-60,-41,-60,92,92,-61,92,92,92,92,92,92,None,None,92,92,92,-49,92,-42,]),'GREATER':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,110,113,114,119,127,128,129,130,131,132,133,134,138,152,159,172,190,],[-60,93,-41,-42,-43,-56,-57,-58,-59,-41,93,93,-48,-50,-51,93,93,-60,-41,-60,93,93,-61,93,93,93,93,93,93,None,None,93,93,93,-49,93,-42,]),'RBRACKET':([51,55,56,57,60,61,62,63,76,77,78,80,88,89,90,95,102,106,114,115,116,117,118,119,121,122,125,126,127,128,129,130,131,132,133,134,136,144,146,152,157,158,159,164,168,170,175,178,181,183,190,191,209,],[-60,-41,-42,-43,-56,-57,-58,-59,114,-19,-17,-71,-48,-50,-51,-52,141,145,-61,-67,-62,-17,-70,-19,-69,-62,-63,-64,-44,-45,-46,-47,-53,-54,-55,159,-17,165,-36,-18,-72,-15,-49,176,-37,182,186,-35,193,-16,-38,-39,-40,]),'COLON':([51,53,55,56,57,60,61,62,63,77,78,80,82,88,89,90,95,114,116,122,127,128,129,130,131,132,133,138,152,158,159,183,],[-60,83,-41,-42,-43,-56,-57,-58,-59,-19,83,83,125,-48,-50,-51,-52,-61,125,125,-44,-45,-46,-47,-53,-54,-55,161,-18,-15,-49,-16,]),'BEGINIF':([51,55,56,57,60,61,62,63,66,88,89,90,95,114,127,128,129,130,131,132,133,159,],[-60,-41,-42,-43,-56,-57,-58,-59,100,-48,-50,-51,-52,-61,-44,-45,-46,-47,-53,-54,-55,-49,]),'BEGIN':([51,55,56,57,60,61,62,63,66,88,89,90,95,114,127,128,129,130,131,132,133,145,159,165,172,176,182,186,193,],[-60,-41,-42,-43,-56,-57,-58,-59,101,-48,-50,-51,-52,-61,-44,-45,-46,-47,-53,-54,-55,167,-49,177,185,187,194,197,202,]),'R_FIGBRACKET':([51,55,56,57,60,61,62,63,88,89,90,95,114,119,123,124,127,128,129,130,131,132,133,135,136,150,152,155,158,159,171,183,201,],[-60,-41,-42,-43,-56,-57,-58,-59,-48,-50,-51,-52,-61,-19,157,158,-44,-45,-46,-47,-53,-54,-55,160,-17,169,-18,158,-15,-49,183,-16,209,]),'BEGINFOR':([51,55,56,57,60,61,62,63,88,89,90,95,114,127,128,129,130,131,132,133,159,172,],[-60,-41,-42,-43,-56,-57,-58,-59,-48,-50,-51,-52,-61,-44,-45,-46,-47,-53,-54,-55,-49,184,]),'L_FIGBRACKET':([53,64,74,79,81,82,97,111,122,125,126,154,156,180,192,],[81,97,111,120,120,-62,120,120,156,-63,-64,156,120,192,120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,139,140,179,188,195,196,198,203,206,210,],[2,162,163,189,199,204,205,207,211,214,216,]),'statement':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[3,40,3,3,40,40,3,3,40,3,3,3,40,3,40,40,3,40,3,40,40,40,]),'declaration':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'errors':([0,2,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[11,11,105,105,11,11,11,11,105,105,105,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'type':([0,2,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[12,12,104,147,12,12,12,12,147,147,147,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'variable':([0,2,13,16,53,59,64,68,73,74,75,79,81,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,139,140,153,156,161,162,163,179,180,188,189,192,195,196,198,199,203,204,205,206,207,210,211,214,216,],[14,14,57,57,57,57,57,57,108,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,14,14,57,57,57,14,14,14,57,14,14,57,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'return_list':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'ret_list':([0,2,139,140,162,163,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'int':([0,2,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'bool':([0,2,70,106,139,140,162,163,164,166,170,179,188,189,195,196,198,199,203,204,205,206,207,210,211,214,216,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'call_list':([13,98,107,109,],[52,137,148,149,]),'expression':([13,16,53,59,64,68,74,75,79,81,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,153,156,161,180,192,],[54,67,77,95,96,67,110,113,119,119,127,128,129,130,131,132,133,134,119,54,138,54,54,119,152,119,152,119,172,119,119,]),'math_expression':([13,16,53,59,64,68,74,75,79,81,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,153,156,161,180,192,],[55,66,55,55,55,102,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'const':([13,16,53,59,64,68,74,75,79,81,84,85,86,87,91,92,93,94,97,98,99,107,109,111,116,120,153,156,161,180,192,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,190,56,]),'index':([53,],[76,]),'expr_list':([53,79,81,97,111,120,156,180,192,],[78,117,124,136,136,155,136,136,124,]),'ind':([53,78,80,],[79,115,121,]),'decl_list':([53,79,81,97,111,156,180,192,],[80,118,123,135,150,171,191,201,]),'func_list':([106,164,170,],[144,175,181,]),'func':([106,164,166,170,],[146,146,178,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',21),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',32),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',33),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',40),
  ('statement -> assignment NL','statement',2,'p_statement','parser.py',41),
  ('statement -> for NL','statement',2,'p_statement','parser.py',42),
  ('statement -> if NL','statement',2,'p_statement','parser.py',43),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',44),
  ('statement -> function NL','statement',2,'p_statement','parser.py',45),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',46),
  ('statement -> errors NL','statement',2,'p_statement_error','parser.py',50),
  ('statement -> errors','statement',1,'p_statement_error_no_nl','parser.py',53),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',57),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',58),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',69),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',70),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',71),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',80),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',81),
  ('type -> int','type',1,'p_type','parser.py',88),
  ('type -> bool','type',1,'p_type','parser.py',89),
  ('int -> INT','int',1,'p_int','parser.py',93),
  ('int -> CINT','int',1,'p_int','parser.py',94),
  ('int -> VINT','int',1,'p_int','parser.py',95),
  ('int -> MINT','int',1,'p_int','parser.py',96),
  ('int -> CVINT','int',1,'p_int','parser.py',97),
  ('int -> CMINT','int',1,'p_int','parser.py',98),
  ('type -> errors','type',1,'p_type_error','parser.py',102),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',107),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',108),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',109),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',110),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',111),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',112),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',116),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',117),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',124),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',125),
  ('func -> type VARIABLE EQ decl_list','func',4,'p_func','parser.py',126),
  ('func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','func',6,'p_func','parser.py',127),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',136),
  ('expression -> const','expression',1,'p_expression','parser.py',137),
  ('expression -> variable','expression',1,'p_expression','parser.py',138),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',142),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',143),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',144),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',145),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',146),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',147),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',148),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',149),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',150),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',151),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',152),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',153),
  ('const -> TRUE','const',1,'p_const','parser.py',164),
  ('const -> FALSE','const',1,'p_const','parser.py',165),
  ('const -> INT_DEC','const',1,'p_const','parser.py',166),
  ('const -> INT_BIN','const',1,'p_const','parser.py',167),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',171),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',172),
  ('ind -> COMMA','ind',1,'p_ind_exp','parser.py',179),
  ('ind -> COMMA COLON','ind',2,'p_ind_exp','parser.py',180),
  ('ind -> COLON COMMA','ind',2,'p_ind_exp','parser.py',181),
  ('index -> expression','index',1,'p_index','parser.py',190),
  ('index -> expr_list','index',1,'p_index','parser.py',191),
  ('index -> expr_list ind','index',2,'p_index','parser.py',192),
  ('index -> ind expr_list','index',2,'p_index','parser.py',193),
  ('index -> decl_list ind','index',2,'p_index','parser.py',194),
  ('index -> ind decl_list','index',2,'p_index','parser.py',195),
  ('index -> decl_list','index',1,'p_index','parser.py',196),
  ('index -> L_FIGBRACKET decl_list R_FIGBRACKET','index',3,'p_index','parser.py',197),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',208),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',209),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',210),
  ('operation -> WALL','operation',1,'p_operation','parser.py',211),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',212),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',219),
  ('assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET','assignment',5,'p_assignment','parser.py',220),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',227),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',228),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',234),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',235),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',239),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',240),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',247),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',248),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',255),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',256),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',257),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',258),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',259),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',260),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',293),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',294),
  ('function_call -> ret_list ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',295),
  ('function_call -> ret_list ASSIGNMENT VARIABLE','function_call',3,'p_function_call','parser.py',296),
  ('function_call -> variable ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',297),
  ('function_call -> type VARIABLE EQ VARIABLE call_list','function_call',5,'p_function_call','parser.py',298),
  ('ret_list -> variable','ret_list',1,'p_ret_list','parser.py',312),
  ('ret_list -> ret_list COMMA variable','ret_list',3,'p_ret_list','parser.py',313),
  ('errors -> errors error','errors',2,'p_errors','parser.py',320),
  ('errors -> error','errors',1,'p_errors','parser.py',321),
]
