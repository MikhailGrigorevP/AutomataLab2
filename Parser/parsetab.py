
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assignment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLstatement : errors NLstatement : errorsdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTtype : errorsbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ const\n                | type VARIABLE EQ decl_list\n                | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETexpression : math_expression\n                      | const\n                      | variablemath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind : COMMA\n               | COMMA COLON\n               | COLON COMMAindex : expression\n                 | expr_list\n                 | expr_list ind\n                 | ind expr_list\n                 | decl_list ind\n                 | ind decl_list\n                 | decl_listoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassignment : variable ASSIGNMENT expression\n                     | variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKETfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE\n                         | variable ASSIGNMENT VARIABLE call_listret_list : variable\n                    | ret_list COMMA variableerrors : errors error\n                    | error'
    
_lr_action_items = {'FOR':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[15,15,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'IF':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[16,16,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'MOVE':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[17,17,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'RIGHT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[18,18,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'LEFT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[19,19,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'WALL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[20,20,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'EXIT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[21,21,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'FUNCTION':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,69,74,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[23,23,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,103,111,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'VARIABLE':([0,2,3,11,12,13,15,16,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,53,59,64,68,72,73,74,75,79,81,83,84,85,86,87,91,92,93,94,97,98,99,103,104,105,107,110,111,115,121,122,136,137,144,149,151,155,156,157,173,174,182,183,186,189,190,192,193,198,199,200,201,202,205,206,209,211,],[13,13,-3,-12,50,51,65,51,71,-101,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-32,-33,-34,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,51,51,98,51,107,51,51,51,51,-62,51,51,51,51,51,51,51,51,51,51,51,51,139,140,-28,51,51,147,51,-63,-64,13,13,162,51,51,51,13,13,13,51,13,13,51,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'error':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,105,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[25,25,-3,49,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,25,49,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'INT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[28,28,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[29,29,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'VINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[30,30,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'MINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[31,31,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CVINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[32,32,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'CMINT':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[33,33,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'BOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[34,34,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[35,35,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'VBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[36,36,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'MBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[37,37,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'CVBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[38,38,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'CMBOOL':([0,2,3,11,25,40,41,42,43,44,45,46,47,48,49,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[39,39,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'$end':([1,2,3,11,25,40,41,42,43,44,45,46,47,48,49,],[0,-1,-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,]),'ENDIF':([3,11,25,40,41,42,43,44,45,46,47,48,49,156,],[-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,167,]),'END':([3,11,25,40,41,42,43,44,45,46,47,48,49,157,183,193,200,202,206,209,211,],[-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,168,194,203,208,210,212,213,214,]),'ENDFOR':([3,11,25,40,41,42,43,44,45,46,47,48,49,199,],[-3,-12,-101,-2,-4,-5,-6,-7,-8,-9,-10,-11,-100,207,]),'NL':([4,5,6,7,8,9,10,11,13,18,19,20,21,25,49,51,52,54,55,56,57,60,61,62,63,88,89,90,95,96,98,100,101,107,109,112,113,124,125,126,127,128,129,130,134,138,145,153,154,161,163,167,168,171,178,179,181,188,191,194,197,203,207,208,210,212,213,214,],[41,42,43,44,45,46,47,48,-93,-73,-74,-75,-76,-101,-100,-60,-94,-86,-41,-42,-43,-56,-57,-58,-59,-48,-50,-51,-52,-77,-60,136,137,-96,-13,-85,-61,-44,-45,-46,-47,-53,-54,-55,-97,-72,-95,-49,-78,173,-14,-81,-82,182,189,190,192,198,201,-90,205,-88,-79,-80,-89,-92,-87,-91,]),'ASSIGNMENT':([13,14,24,51,108,113,],[-60,64,72,-60,-99,-61,]),'COMMA':([13,14,22,24,50,51,52,53,54,55,56,57,60,61,62,63,77,78,80,82,88,89,90,95,108,112,113,116,117,118,123,124,125,126,127,128,129,130,132,133,134,140,141,143,145,146,148,152,153,162,165,169,172,175,177,184,185,195,196,204,],[-60,-98,70,73,-84,-60,75,81,-86,-41,-42,-43,-56,-57,-58,-59,-19,115,120,122,-48,-50,-51,-52,-99,-85,-61,149,150,-19,149,-44,-45,-46,-47,-53,-54,-55,150,149,75,-83,160,-36,75,150,-18,-15,-49,-37,150,160,-35,160,-16,-38,150,150,149,-40,]),'LBRACKET':([13,17,51,58,71,98,139,147,],[53,68,53,94,106,53,158,164,]),'SUM':([13,16,53,59,64,68,74,75,79,81,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,121,122,149,151,155,174,186,],[58,58,58,58,58,58,58,58,58,-62,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-63,-64,58,58,58,58,58,]),'DENY':([13,16,53,59,64,68,74,75,79,81,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,121,122,149,151,155,174,186,],[59,59,59,59,59,59,59,59,59,-62,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-63,-64,59,59,59,59,59,]),'TRUE':([13,16,53,59,64,68,74,75,79,81,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,121,122,149,151,155,174,186,],[60,60,60,60,60,60,60,60,60,-62,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-63,-64,60,60,60,60,60,]),'FALSE':([13,16,53,59,64,68,74,75,79,81,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,121,122,149,151,155,174,186,],[61,61,61,61,61,61,61,61,61,-62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-63,-64,61,61,61,61,61,]),'INT_DEC':([13,16,53,59,64,68,74,75,79,81,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,121,122,149,151,155,174,186,],[62,62,62,62,62,62,62,62,62,-62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-63,-64,62,62,62,62,62,]),'INT_BIN':([13,16,53,59,64,68,74,75,79,81,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,121,122,149,151,155,174,186,],[63,63,63,63,63,63,63,63,63,-62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-63,-64,63,63,63,63,63,]),'EQ':([22,50,65,140,162,],[69,74,99,-83,174,]),'PLUS':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,84,-41,-42,-43,-56,-57,-58,-59,-41,84,84,-48,-50,-51,84,84,-60,-41,84,84,-61,84,84,84,84,84,84,84,84,84,84,84,-49,84,-42,]),'MINUS':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,85,-41,-42,-43,-56,-57,-58,-59,-41,85,85,-48,-50,-51,85,85,-60,-41,85,85,-61,85,85,85,85,85,85,85,85,85,85,85,-49,85,-42,]),'MUL_MATRIX':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,86,-41,-42,-43,-56,-57,-58,-59,-41,86,86,-48,-50,-51,86,86,-60,-41,86,86,-61,86,86,86,86,86,86,86,86,86,86,86,-49,86,-42,]),'MUL_ELEM':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,87,-41,-42,-43,-56,-57,-58,-59,-41,87,87,-48,-50,-51,87,87,-60,-41,87,87,-61,87,87,87,87,87,87,87,87,87,87,87,-49,87,-42,]),'TRANSPOSE':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,88,-41,-42,-43,-56,-57,-58,-59,-41,88,88,-48,-50,-51,88,88,-60,-41,88,88,-61,88,88,88,88,88,88,88,88,88,88,88,-49,88,-42,]),'STL':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,89,-41,-42,-43,-56,-57,-58,-59,-41,89,89,-48,-50,-51,89,89,-60,-41,89,89,-61,89,89,89,89,89,89,89,89,89,89,89,-49,89,-42,]),'STR':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,90,-41,-42,-43,-56,-57,-58,-59,-41,90,90,-48,-50,-51,90,90,-60,-41,90,90,-61,90,90,90,90,90,90,90,90,90,90,90,-49,90,-42,]),'AND':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,91,-41,-42,-43,-56,-57,-58,-59,-41,91,91,-48,-50,-51,91,91,-60,-41,91,91,-61,91,91,91,91,91,91,91,91,91,91,91,-49,91,-42,]),'LESS':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,92,-41,-42,-43,-56,-57,-58,-59,-41,92,92,-48,-50,-51,92,92,-60,-41,92,92,-61,92,92,92,92,92,92,92,92,92,92,92,-49,92,-42,]),'GREATER':([51,54,55,56,57,60,61,62,63,66,67,77,88,89,90,95,96,98,102,109,112,113,118,124,125,126,127,128,129,130,131,135,148,153,166,184,],[-60,93,-41,-42,-43,-56,-57,-58,-59,-41,93,93,-48,-50,-51,93,93,-60,-41,93,93,-61,93,93,93,93,93,93,93,93,93,93,93,-49,93,-42,]),'RBRACKET':([51,55,56,57,60,61,62,63,76,77,78,80,88,89,90,95,102,106,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,129,130,131,133,141,143,148,152,153,158,162,164,169,172,175,177,184,185,204,],[-60,-41,-42,-43,-56,-57,-58,-59,113,-19,-17,-71,-48,-50,-51,-52,138,142,-61,-67,-62,-17,-70,-19,-69,-62,-63,-64,-44,-45,-46,-47,-53,-54,-55,153,-17,159,-36,-18,-15,-49,170,-37,176,180,-35,187,-16,-38,-39,-40,]),'COLON':([51,53,55,56,57,60,61,62,63,77,78,80,81,88,89,90,95,113,115,120,124,125,126,127,128,129,130,135,148,152,153,177,],[-60,82,-41,-42,-43,-56,-57,-58,-59,-19,82,82,121,-48,-50,-51,-52,-61,121,121,-44,-45,-46,-47,-53,-54,-55,155,-18,-15,-49,-16,]),'BEGINIF':([51,55,56,57,60,61,62,63,66,88,89,90,95,113,124,125,126,127,128,129,130,153,],[-60,-41,-42,-43,-56,-57,-58,-59,100,-48,-50,-51,-52,-61,-44,-45,-46,-47,-53,-54,-55,-49,]),'BEGIN':([51,55,56,57,60,61,62,63,66,88,89,90,95,113,124,125,126,127,128,129,130,142,153,159,166,170,176,180,187,],[-60,-41,-42,-43,-56,-57,-58,-59,101,-48,-50,-51,-52,-61,-44,-45,-46,-47,-53,-54,-55,161,-49,171,179,181,188,191,197,]),'R_FIGBRACKET':([51,55,56,57,60,61,62,63,88,89,90,95,113,118,123,124,125,126,127,128,129,130,132,133,146,148,152,153,165,177,195,196,],[-60,-41,-42,-43,-56,-57,-58,-59,-48,-50,-51,-52,-61,-19,152,-44,-45,-46,-47,-53,-54,-55,154,-17,163,-18,-15,-49,177,-16,204,152,]),'BEGINFOR':([51,55,56,57,60,61,62,63,88,89,90,95,113,124,125,126,127,128,129,130,153,166,],[-60,-41,-42,-43,-56,-57,-58,-59,-48,-50,-51,-52,-61,-44,-45,-46,-47,-53,-54,-55,-49,178,]),'L_FIGBRACKET':([53,64,74,79,81,97,110,120,121,122,150,151,174,186,],[83,97,110,83,-62,83,83,151,-63,-64,151,83,186,83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,136,137,173,182,189,190,192,198,201,205,],[2,156,157,183,193,199,200,202,206,209,211,]),'statement':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[3,40,3,3,40,40,3,3,40,3,3,3,40,3,40,40,3,40,3,40,40,40,]),'declaration':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'errors':([0,2,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[11,11,105,105,11,11,11,11,105,105,105,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'type':([0,2,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[12,12,104,144,12,12,12,12,144,144,144,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'variable':([0,2,13,16,53,59,64,68,73,74,75,79,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,136,137,149,151,155,156,157,173,174,182,183,186,189,190,192,193,198,199,200,201,202,205,206,209,211,],[14,14,57,57,57,57,57,57,108,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,14,14,57,57,57,14,14,14,57,14,14,57,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'return_list':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'ret_list':([0,2,136,137,156,157,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'int':([0,2,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'bool':([0,2,70,106,136,137,156,157,158,160,164,173,182,183,189,190,192,193,198,199,200,201,202,205,206,209,211,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'call_list':([13,98,107,],[52,134,145,]),'expression':([13,16,53,59,64,68,74,75,79,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,149,151,155,174,186,],[54,67,77,95,96,67,109,112,118,118,124,125,126,127,128,129,130,131,118,54,135,54,118,148,148,118,166,118,118,]),'math_expression':([13,16,53,59,64,68,74,75,79,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,149,151,155,174,186,],[55,66,55,55,55,102,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'const':([13,16,53,59,64,68,74,75,79,83,84,85,86,87,91,92,93,94,97,98,99,107,110,115,149,151,155,174,186,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,184,56,]),'index':([53,],[76,]),'expr_list':([53,79,83,97,110,151,174,186,],[78,116,123,133,133,133,133,196,]),'ind':([53,78,80,],[79,114,119,]),'decl_list':([53,79,97,110,151,174,186,],[80,117,132,146,165,185,195,]),'func_list':([106,158,164,],[141,169,175,]),'func':([106,158,160,164,],[143,143,172,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',46),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',57),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',58),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',65),
  ('statement -> assignment NL','statement',2,'p_statement','parser.py',66),
  ('statement -> for NL','statement',2,'p_statement','parser.py',67),
  ('statement -> if NL','statement',2,'p_statement','parser.py',68),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',69),
  ('statement -> function NL','statement',2,'p_statement','parser.py',70),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',71),
  ('statement -> errors NL','statement',2,'p_statement_error','parser.py',75),
  ('statement -> errors','statement',1,'p_statement_error_no_nl','parser.py',78),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',82),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',83),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',94),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',95),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',96),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',105),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',106),
  ('type -> int','type',1,'p_type','parser.py',113),
  ('type -> bool','type',1,'p_type','parser.py',114),
  ('int -> INT','int',1,'p_int','parser.py',118),
  ('int -> CINT','int',1,'p_int','parser.py',119),
  ('int -> VINT','int',1,'p_int','parser.py',120),
  ('int -> MINT','int',1,'p_int','parser.py',121),
  ('int -> CVINT','int',1,'p_int','parser.py',122),
  ('int -> CMINT','int',1,'p_int','parser.py',123),
  ('type -> errors','type',1,'p_type_error','parser.py',127),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',132),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',133),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',134),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',135),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',136),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',137),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',141),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',142),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',149),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',150),
  ('func -> type VARIABLE EQ decl_list','func',4,'p_func','parser.py',151),
  ('func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','func',6,'p_func','parser.py',152),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',161),
  ('expression -> const','expression',1,'p_expression','parser.py',162),
  ('expression -> variable','expression',1,'p_expression','parser.py',163),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',167),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',168),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',169),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',170),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',171),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',172),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',173),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',174),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',175),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',176),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',177),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',178),
  ('const -> TRUE','const',1,'p_const','parser.py',189),
  ('const -> FALSE','const',1,'p_const','parser.py',190),
  ('const -> INT_DEC','const',1,'p_const','parser.py',191),
  ('const -> INT_BIN','const',1,'p_const','parser.py',192),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',196),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',197),
  ('ind -> COMMA','ind',1,'p_ind_exp','parser.py',204),
  ('ind -> COMMA COLON','ind',2,'p_ind_exp','parser.py',205),
  ('ind -> COLON COMMA','ind',2,'p_ind_exp','parser.py',206),
  ('index -> expression','index',1,'p_index','parser.py',215),
  ('index -> expr_list','index',1,'p_index','parser.py',216),
  ('index -> expr_list ind','index',2,'p_index','parser.py',217),
  ('index -> ind expr_list','index',2,'p_index','parser.py',218),
  ('index -> decl_list ind','index',2,'p_index','parser.py',219),
  ('index -> ind decl_list','index',2,'p_index','parser.py',220),
  ('index -> decl_list','index',1,'p_index','parser.py',221),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',230),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',231),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',232),
  ('operation -> WALL','operation',1,'p_operation','parser.py',233),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',234),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',241),
  ('assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET','assignment',5,'p_assignment','parser.py',242),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',249),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',250),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',256),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',257),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',261),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',262),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',270),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',271),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',278),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',279),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',280),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',281),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',282),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',283),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',316),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',317),
  ('function_call -> ret_list ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',318),
  ('function_call -> ret_list ASSIGNMENT VARIABLE','function_call',3,'p_function_call','parser.py',319),
  ('function_call -> variable ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',320),
  ('ret_list -> variable','ret_list',1,'p_ret_list','parser.py',331),
  ('ret_list -> ret_list COMMA variable','ret_list',3,'p_ret_list','parser.py',332),
  ('errors -> errors error','errors',2,'p_errors','parser.py',339),
  ('errors -> error','errors',1,'p_errors','parser.py',340),
]
