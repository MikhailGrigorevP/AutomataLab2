
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assigment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type varexpr_list : expr_list expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLvar : VARIABLE EQ expression\n                | VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKETexpression : variable\n                      | const\n                      | math_expressionmath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind_exp : expression\n                   | COLON\n                   | index : expression\n                 | ind_exp COMMA ind_expoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassigment : variable ASSIGMENT expressionfor : FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN stmt_list ENDif : IF math_expression BEGINIF stmt_list ENDIF\n              | IF math_expression BEGIN stmt_list ENDfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_listreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ constcall_list : call_list COMMA expression\n                    | expression'
    
_lr_action_items = {'FOR':([0,2,3,37,38,39,40,41,42,43,44,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[13,13,-3,-2,-4,-5,-6,-7,-8,-9,-10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'IF':([0,2,3,37,38,39,40,41,42,43,44,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,37,38,39,40,41,42,43,44,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,37,38,39,40,41,42,43,44,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,37,38,39,40,41,42,43,44,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,37,38,39,40,41,42,43,44,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,37,38,39,40,41,42,43,44,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,37,38,39,40,41,42,43,44,65,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,91,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,13,14,15,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,51,53,54,55,56,57,58,59,61,64,68,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,98,99,100,101,102,103,104,105,106,108,109,116,117,118,119,122,128,131,135,137,139,140,142,143,146,147,148,149,153,],[14,14,-3,46,48,49,49,67,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-2,-4,-5,-6,-7,-8,-9,-10,49,-49,49,-30,-31,-32,-45,-46,-47,-48,49,49,49,49,49,49,49,49,49,-37,-39,-40,49,49,49,49,-41,14,14,111,112,49,-50,49,-33,-34,-35,-36,-42,-43,-44,14,14,129,49,-13,49,-38,14,-12,14,14,14,14,14,14,14,14,14,14,14,]),'INT':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'CINT':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'VINT':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINT':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CVINT':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CMINT':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BOOL':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CBOOL':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'VBOOL':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'MBOOL':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CVBOOL':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CMBOOL':([0,2,3,37,38,39,40,41,42,43,44,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'$end':([1,2,3,37,38,39,40,41,42,43,44,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,37,38,39,40,41,42,43,44,108,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,123,]),'END':([3,37,38,39,40,41,42,43,44,109,137,143,147,149,153,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,124,144,150,152,154,155,]),'ENDFOR':([3,37,38,39,40,41,42,43,44,146,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,151,]),'NL':([4,5,6,7,8,9,10,14,17,18,19,20,45,49,50,52,53,54,55,56,57,58,59,69,80,81,82,87,94,97,98,100,101,102,103,104,105,106,110,122,123,124,130,144,150,151,152,154,155,],[38,39,40,41,42,43,44,-70,-57,-58,-59,-60,-11,-49,-71,-79,-30,-31,-32,-45,-46,-47,-48,-61,-37,-39,-40,-41,-28,-78,-50,-33,-34,-35,-36,-42,-43,-44,-56,-38,-64,-65,-29,-69,-67,-62,-63,-68,-66,]),'ASSIGMENT':([12,14,98,],[47,-49,-50,]),'LBRACKET':([14,16,49,60,67,111,],[51,64,51,86,93,125,]),'TRUE':([14,15,47,49,51,53,54,55,56,57,58,59,61,64,68,70,71,76,77,78,79,80,81,82,83,84,85,86,87,95,98,99,100,101,102,103,104,105,106,117,118,119,122,131,138,],[56,56,56,-49,56,-30,-31,-32,-45,-46,-47,-48,56,56,56,56,56,56,56,56,56,-37,-39,-40,56,56,56,56,-41,56,-50,56,-33,-34,-35,-36,-42,-43,-44,56,-13,56,-38,-12,56,]),'FALSE':([14,15,47,49,51,53,54,55,56,57,58,59,61,64,68,70,71,76,77,78,79,80,81,82,83,84,85,86,87,95,98,99,100,101,102,103,104,105,106,117,118,119,122,131,138,],[57,57,57,-49,57,-30,-31,-32,-45,-46,-47,-48,57,57,57,57,57,57,57,57,57,-37,-39,-40,57,57,57,57,-41,57,-50,57,-33,-34,-35,-36,-42,-43,-44,57,-13,57,-38,-12,57,]),'INT_DEC':([14,15,47,49,51,53,54,55,56,57,58,59,61,64,68,70,71,76,77,78,79,80,81,82,83,84,85,86,87,95,98,99,100,101,102,103,104,105,106,117,118,119,122,131,138,],[58,58,58,-49,58,-30,-31,-32,-45,-46,-47,-48,58,58,58,58,58,58,58,58,58,-37,-39,-40,58,58,58,58,-41,58,-50,58,-33,-34,-35,-36,-42,-43,-44,58,-13,58,-38,-12,58,]),'INT_BIN':([14,15,47,49,51,53,54,55,56,57,58,59,61,64,68,70,71,76,77,78,79,80,81,82,83,84,85,86,87,95,98,99,100,101,102,103,104,105,106,117,118,119,122,131,138,],[59,59,59,-49,59,-30,-31,-32,-45,-46,-47,-48,59,59,59,59,59,59,59,59,59,-37,-39,-40,59,59,59,59,-41,59,-50,59,-33,-34,-35,-36,-42,-43,-44,59,-13,59,-38,-12,59,]),'SUM':([14,15,47,49,51,53,54,55,56,57,58,59,61,64,68,70,71,76,77,78,79,80,81,82,83,84,85,86,87,95,98,99,100,101,102,103,104,105,106,117,118,119,122,131,],[60,60,60,-49,60,-30,-31,-32,-45,-46,-47,-48,60,60,60,60,60,60,60,60,60,-37,-39,-40,60,60,60,60,-41,60,-50,60,-33,-34,-35,-36,-42,-43,-44,60,-13,60,-38,-12,]),'DENY':([14,15,47,49,51,53,54,55,56,57,58,59,61,64,68,70,71,76,77,78,79,80,81,82,83,84,85,86,87,95,98,99,100,101,102,103,104,105,106,117,118,119,122,131,],[61,61,61,-49,61,-30,-31,-32,-45,-46,-47,-48,61,61,61,61,61,61,61,61,61,-37,-39,-40,61,61,61,61,-41,61,-50,61,-33,-34,-35,-36,-42,-43,-44,61,-13,61,-38,-12,]),'EQ':([21,46,48,112,129,],[65,68,70,-72,138,]),'COMMA':([21,46,49,50,51,52,53,54,55,56,57,58,59,73,74,75,80,81,82,87,97,98,100,101,102,103,104,105,106,112,113,115,122,129,133,136,145,],[66,-73,-49,71,-53,-79,-30,-31,-32,-45,-46,-47,-48,-51,99,-52,-37,-39,-40,-41,-78,-50,-33,-34,-35,-36,-42,-43,-44,-72,127,-75,-38,-76,127,-74,-77,]),'PLUS':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,76,-30,-31,-32,-45,-46,-47,-48,-32,76,76,76,-37,-39,-40,76,-32,76,76,76,-50,76,76,76,76,76,76,76,76,76,76,-38,76,76,]),'MINUS':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,77,-30,-31,-32,-45,-46,-47,-48,-32,77,77,77,-37,-39,-40,77,-32,77,77,77,-50,77,77,77,77,77,77,77,77,77,77,-38,77,77,]),'MUL_MATRIX':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,78,-30,-31,-32,-45,-46,-47,-48,-32,78,78,78,-37,-39,-40,78,-32,78,78,78,-50,78,78,78,78,78,78,78,78,78,78,-38,78,78,]),'MUL_ELEM':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,79,-30,-31,-32,-45,-46,-47,-48,-32,79,79,79,-37,-39,-40,79,-32,79,79,79,-50,79,79,79,79,79,79,79,79,79,79,-38,79,79,]),'TRANSPOSE':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,80,-30,-31,-32,-45,-46,-47,-48,-32,80,80,80,-37,-39,-40,80,-32,80,80,80,-50,80,80,80,80,80,80,80,80,80,80,-38,80,80,]),'STL':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,81,-30,-31,-32,-45,-46,-47,-48,-32,81,81,81,-37,-39,-40,81,-32,81,81,81,-50,81,81,81,81,81,81,81,81,81,81,-38,81,81,]),'STR':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,82,-30,-31,-32,-45,-46,-47,-48,-32,82,82,82,-37,-39,-40,82,-32,82,82,82,-50,82,82,82,82,82,82,82,82,82,82,-38,82,82,]),'AND':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,83,-30,-31,-32,-45,-46,-47,-48,-32,83,83,83,-37,-39,-40,83,-32,83,83,83,-50,83,83,83,83,83,83,83,83,83,83,-38,83,83,]),'LESS':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,84,-30,-31,-32,-45,-46,-47,-48,-32,84,84,84,-37,-39,-40,84,-32,84,84,84,-50,84,84,84,84,84,84,84,84,84,84,-38,84,84,]),'GREATER':([49,52,53,54,55,56,57,58,59,62,63,69,73,80,81,82,87,90,94,96,97,98,100,101,102,103,104,105,106,107,118,121,122,131,132,],[-49,85,-30,-31,-32,-45,-46,-47,-48,-32,85,85,85,-37,-39,-40,85,-32,85,85,85,-50,85,85,85,85,85,85,85,85,85,85,-38,85,85,]),'RBRACKET':([49,53,54,55,56,57,58,59,72,73,75,80,81,82,87,90,93,98,99,100,101,102,103,104,105,106,107,113,115,120,121,122,125,129,133,136,145,],[-49,-30,-31,-32,-45,-46,-47,-48,98,-54,-52,-37,-39,-40,-41,110,114,-50,-53,-33,-34,-35,-36,-42,-43,-44,122,126,-75,-55,-51,-38,134,-76,141,-74,-77,]),'BEGINIF':([49,53,54,55,56,57,58,59,62,80,81,82,87,98,100,101,102,103,104,105,106,122,],[-49,-30,-31,-32,-45,-46,-47,-48,88,-37,-39,-40,-41,-50,-33,-34,-35,-36,-42,-43,-44,-38,]),'BEGIN':([49,53,54,55,56,57,58,59,62,80,81,82,87,98,100,101,102,103,104,105,106,114,122,126,132,134,141,],[-49,-30,-31,-32,-45,-46,-47,-48,89,-37,-39,-40,-41,-50,-33,-34,-35,-36,-42,-43,-44,128,-38,135,140,142,148,]),'COLON':([49,51,53,54,55,56,57,58,59,80,81,82,87,96,98,99,100,101,102,103,104,105,106,122,],[-49,75,-30,-31,-32,-45,-46,-47,-48,-37,-39,-40,-41,119,-50,75,-33,-34,-35,-36,-42,-43,-44,-38,]),'R_FIGBRACKET':([49,53,54,55,56,57,58,59,80,81,82,87,98,100,101,102,103,104,105,106,117,118,122,131,],[-49,-30,-31,-32,-45,-46,-47,-48,-37,-39,-40,-41,-50,-33,-34,-35,-36,-42,-43,-44,130,-13,-38,-12,]),'BEGINFOR':([49,53,54,55,56,57,58,59,80,81,82,87,98,100,101,102,103,104,105,106,122,132,],[-49,-30,-31,-32,-45,-46,-47,-48,-37,-39,-40,-41,-50,-33,-34,-35,-36,-42,-43,-44,-38,139,]),'L_FIGBRACKET':([68,],[95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,88,89,128,135,139,140,142,148,],[2,108,109,137,143,146,147,149,153,]),'statement':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[3,37,3,3,37,37,3,3,37,3,3,3,37,37,37,3,37,37,]),'declaration':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assigment':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[11,11,92,11,11,116,11,11,116,116,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,14,15,47,51,61,64,68,70,71,76,77,78,79,83,84,85,86,88,89,95,99,108,109,117,119,128,135,137,139,140,142,143,146,147,148,149,153,],[12,12,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,12,12,53,53,12,12,53,53,12,12,12,12,12,12,12,12,12,12,12,12,]),'return_list':([0,2,88,89,108,109,128,135,137,139,140,142,143,146,147,148,149,153,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'int':([0,2,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'bool':([0,2,66,88,89,93,108,109,125,127,128,135,137,139,140,142,143,146,147,148,149,153,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'var':([11,],[45,]),'call_list':([14,],[50,]),'expression':([14,15,47,51,61,64,68,70,71,76,77,78,79,83,84,85,86,95,99,117,119,],[52,63,69,73,87,63,94,96,97,100,101,102,103,104,105,106,107,118,121,131,132,]),'const':([14,15,47,51,61,64,68,70,71,76,77,78,79,83,84,85,86,95,99,117,119,138,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,145,]),'math_expression':([14,15,47,51,61,64,68,70,71,76,77,78,79,83,84,85,86,95,99,117,119,],[55,62,55,55,55,90,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'index':([51,],[72,]),'ind_exp':([51,99,],[74,120,]),'func_list':([93,125,],[113,133,]),'func':([93,125,127,],[115,115,136,]),'expr_list':([95,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',49),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',60),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',61),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',68),
  ('statement -> assigment NL','statement',2,'p_statement','parser.py',69),
  ('statement -> for NL','statement',2,'p_statement','parser.py',70),
  ('statement -> if NL','statement',2,'p_statement','parser.py',71),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',72),
  ('statement -> function NL','statement',2,'p_statement','parser.py',73),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',74),
  ('declaration -> type var','declaration',2,'p_declaration','parser.py',78),
  ('expr_list -> expr_list expression','expr_list',2,'p_expr_list','parser.py',82),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',83),
  ('type -> int','type',1,'p_type','parser.py',90),
  ('type -> bool','type',1,'p_type','parser.py',91),
  ('int -> INT','int',1,'p_int','parser.py',95),
  ('int -> CINT','int',1,'p_int','parser.py',96),
  ('int -> VINT','int',1,'p_int','parser.py',97),
  ('int -> MINT','int',1,'p_int','parser.py',98),
  ('int -> CVINT','int',1,'p_int','parser.py',99),
  ('int -> CMINT','int',1,'p_int','parser.py',100),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',104),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',105),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',106),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',107),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',108),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',109),
  ('var -> VARIABLE EQ expression','var',3,'p_var','parser.py',113),
  ('var -> VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKET','var',5,'p_var','parser.py',114),
  ('expression -> variable','expression',1,'p_expression','parser.py',121),
  ('expression -> const','expression',1,'p_expression','parser.py',122),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',123),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',127),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',128),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',129),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',130),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',131),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',132),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',133),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',134),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',135),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',136),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',137),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',138),
  ('const -> TRUE','const',1,'p_const','parser.py',145),
  ('const -> FALSE','const',1,'p_const','parser.py',146),
  ('const -> INT_DEC','const',1,'p_const','parser.py',147),
  ('const -> INT_BIN','const',1,'p_const','parser.py',148),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',152),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',153),
  ('ind_exp -> expression','ind_exp',1,'p_ind_exp','parser.py',160),
  ('ind_exp -> COLON','ind_exp',1,'p_ind_exp','parser.py',161),
  ('ind_exp -> <empty>','ind_exp',0,'p_ind_exp','parser.py',162),
  ('index -> expression','index',1,'p_index','parser.py',166),
  ('index -> ind_exp COMMA ind_exp','index',3,'p_index','parser.py',167),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',174),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',175),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',176),
  ('operation -> WALL','operation',1,'p_operation','parser.py',177),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',178),
  ('assigment -> variable ASSIGMENT expression','assigment',3,'p_assigment','parser.py',185),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR','for',9,'p_for','parser.py',189),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END','for',9,'p_for','parser.py',190),
  ('if -> IF math_expression BEGINIF stmt_list ENDIF','if',5,'p_if','parser.py',194),
  ('if -> IF math_expression BEGIN stmt_list END','if',5,'p_if','parser.py',195),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END','function',10,'p_function','parser.py',199),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END','function',8,'p_function','parser.py',200),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END','function',9,'p_function','parser.py',201),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END','function',7,'p_function','parser.py',202),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',213),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',214),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',221),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',222),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',229),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',230),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',237),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',238),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',245),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',246),
]
