
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assigment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLexpression : variable\n                      | const\n                      | math_expressionmath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind_exp : expression\n                   | COLON\n                   | index : expression\n                 | ind_exp COMMA ind_expoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassigment : variable ASSIGMENT expression\n                     | variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKETfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ constcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list'
    
_lr_action_items = {'FOR':([0,2,3,37,38,39,40,41,42,43,44,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,37,38,39,40,41,42,43,44,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,37,38,39,40,41,42,43,44,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,37,38,39,40,41,42,43,44,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,37,38,39,40,41,42,43,44,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,37,38,39,40,41,42,43,44,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,37,38,39,40,41,42,43,44,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,37,38,39,40,41,42,43,44,64,67,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,91,96,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,12,14,15,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,91,92,95,96,99,108,113,114,121,130,131,132,133,142,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[12,12,-3,45,46,60,46,66,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-2,-4,-5,-6,-7,-8,-9,-10,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,116,117,46,123,46,46,12,12,138,46,46,12,12,46,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'CINT':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'VINT':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINT':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CVINT':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CMINT':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BOOL':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'VBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'MBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CVBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CMBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'$end':([1,2,3,37,38,39,40,41,42,43,44,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,37,38,39,40,41,42,43,44,132,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,145,]),'END':([3,37,38,39,40,41,42,43,44,133,161,170,175,177,180,183,185,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,146,171,178,182,184,186,187,188,]),'ENDFOR':([3,37,38,39,40,41,42,43,44,174,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,181,]),'NL':([4,5,6,7,8,9,10,12,17,18,19,20,46,47,49,50,51,52,53,54,55,56,77,78,79,84,85,88,89,94,97,98,100,101,102,103,104,105,106,115,126,128,137,139,145,146,149,156,157,159,164,168,171,172,178,181,182,184,186,187,188,],[38,39,40,41,42,43,44,-83,-59,-60,-61,-62,-51,-84,-76,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-63,113,114,-11,-75,-52,-35,-36,-37,-38,-44,-45,-46,-58,-40,-64,151,-12,-67,-68,160,166,167,169,173,176,-80,179,-78,-65,-66,-79,-82,-77,-81,]),'ASSIGMENT':([12,13,98,],[-51,59,-52,]),'LBRACKET':([12,16,46,57,66,116,123,],[48,63,48,83,93,134,140,]),'TRUE':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,152,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'FALSE':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,152,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'INT_DEC':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,152,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INT_BIN':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,152,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'SUM':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'DENY':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'EQ':([21,45,60,117,138,],[64,67,87,-69,152,]),'COMMA':([21,45,46,47,48,49,50,51,52,53,54,55,56,70,71,72,77,78,79,84,97,98,100,101,102,103,104,105,106,109,110,111,117,118,120,122,126,127,138,141,143,147,150,153,155,162,165,],[65,-70,-51,68,-55,-76,-32,-33,-34,-47,-48,-49,-50,-53,99,-54,-39,-41,-42,-43,-75,-52,-35,-36,-37,-38,-44,-45,-46,129,130,-17,-69,136,-72,129,-40,130,-73,-13,-16,136,-71,136,129,-74,-14,]),'PLUS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,73,-32,-33,-34,-47,-48,-49,-50,-34,73,73,-39,-41,-42,73,73,-34,73,73,-52,73,73,73,73,73,73,73,73,73,73,73,-40,73,73,]),'MINUS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,74,-32,-33,-34,-47,-48,-49,-50,-34,74,74,-39,-41,-42,74,74,-34,74,74,-52,74,74,74,74,74,74,74,74,74,74,74,-40,74,74,]),'MUL_MATRIX':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,75,-32,-33,-34,-47,-48,-49,-50,-34,75,75,-39,-41,-42,75,75,-34,75,75,-52,75,75,75,75,75,75,75,75,75,75,75,-40,75,75,]),'MUL_ELEM':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,76,-32,-33,-34,-47,-48,-49,-50,-34,76,76,-39,-41,-42,76,76,-34,76,76,-52,76,76,76,76,76,76,76,76,76,76,76,-40,76,76,]),'TRANSPOSE':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,77,-32,-33,-34,-47,-48,-49,-50,-34,77,77,-39,-41,-42,77,77,-34,77,77,-52,77,77,77,77,77,77,77,77,77,77,77,-40,77,77,]),'STL':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,78,-32,-33,-34,-47,-48,-49,-50,-34,78,78,-39,-41,-42,78,78,-34,78,78,-52,78,78,78,78,78,78,78,78,78,78,78,-40,78,78,]),'STR':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,79,-32,-33,-34,-47,-48,-49,-50,-34,79,79,-39,-41,-42,79,79,-34,79,79,-52,79,79,79,79,79,79,79,79,79,79,79,-40,79,79,]),'AND':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,80,-32,-33,-34,-47,-48,-49,-50,-34,80,80,-39,-41,-42,80,80,-34,80,80,-52,80,80,80,80,80,80,80,80,80,80,80,-40,80,80,]),'LESS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,81,-32,-33,-34,-47,-48,-49,-50,-34,81,81,-39,-41,-42,81,81,-34,81,81,-52,81,81,81,81,81,81,81,81,81,81,81,-40,81,81,]),'GREATER':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,90,94,97,98,100,101,102,103,104,105,106,107,111,112,125,126,143,144,],[-51,82,-32,-33,-34,-47,-48,-49,-50,-34,82,82,-39,-41,-42,82,82,-34,82,82,-52,82,82,82,82,82,82,82,82,82,82,82,-40,82,82,]),'RBRACKET':([46,50,51,52,53,54,55,56,69,70,72,77,78,79,84,90,93,98,99,100,101,102,103,104,105,106,107,118,120,124,125,126,134,138,140,147,150,153,162,],[-51,-32,-33,-34,-47,-48,-49,-50,98,-56,-54,-39,-41,-42,-43,115,119,-52,-55,-35,-36,-37,-38,-44,-45,-46,126,135,-72,-57,-53,-40,148,-73,154,158,-71,163,-74,]),'BEGINIF':([46,50,51,52,53,54,55,56,61,77,78,79,84,98,100,101,102,103,104,105,106,126,],[-51,-32,-33,-34,-47,-48,-49,-50,88,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,]),'BEGIN':([46,50,51,52,53,54,55,56,61,77,78,79,84,98,100,101,102,103,104,105,106,119,126,135,144,148,154,158,163,],[-51,-32,-33,-34,-47,-48,-49,-50,89,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,137,-40,149,157,159,164,168,172,]),'R_FIGBRACKET':([46,50,51,52,53,54,55,56,77,78,79,84,98,100,101,102,103,104,105,106,109,110,111,122,126,127,141,143,155,165,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,128,-15,-17,139,-40,141,-13,-16,165,-14,]),'COLON':([46,48,50,51,52,53,54,55,56,77,78,79,84,98,99,100,101,102,103,104,105,106,112,126,],[-51,72,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,72,-35,-36,-37,-38,-44,-45,-46,131,-40,]),'BEGINFOR':([46,50,51,52,53,54,55,56,77,78,79,84,98,100,101,102,103,104,105,106,126,144,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,156,]),'L_FIGBRACKET':([59,67,86,95,129,142,],[86,95,108,108,142,108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,113,114,151,160,166,167,169,173,176,179,],[2,132,133,161,170,174,175,177,180,183,185,]),'statement':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[3,37,3,3,37,37,3,3,37,3,3,3,37,3,37,37,3,37,3,37,37,37,]),'declaration':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assigment':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[11,11,92,121,11,11,11,11,121,121,121,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,113,114,130,131,132,133,142,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[13,13,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,13,13,50,50,13,13,50,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_list':([0,2,113,114,132,133,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'int':([0,2,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'bool':([0,2,65,93,113,114,132,133,134,136,140,151,160,161,166,167,169,170,173,174,175,176,177,179,180,183,185,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'call_list':([12,],[47,]),'expression':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,],[49,62,70,84,85,62,94,97,100,101,102,103,104,105,106,107,111,112,111,125,111,143,144,111,]),'const':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,152,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,162,]),'math_expression':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,87,95,99,108,130,131,142,],[52,61,52,52,52,90,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'index':([48,],[69,]),'ind_exp':([48,99,],[71,124,]),'decl_list':([86,95,142,],[109,122,155,]),'expr_list':([86,95,108,142,],[110,110,127,110,]),'func_list':([93,134,140,],[118,147,153,]),'func':([93,134,136,140,],[120,120,150,120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',45),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',56),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',57),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',64),
  ('statement -> assigment NL','statement',2,'p_statement','parser.py',65),
  ('statement -> for NL','statement',2,'p_statement','parser.py',66),
  ('statement -> if NL','statement',2,'p_statement','parser.py',67),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',68),
  ('statement -> function NL','statement',2,'p_statement','parser.py',69),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',70),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',75),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',86),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',87),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',88),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',97),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',98),
  ('type -> int','type',1,'p_type','parser.py',105),
  ('type -> bool','type',1,'p_type','parser.py',106),
  ('int -> INT','int',1,'p_int','parser.py',110),
  ('int -> CINT','int',1,'p_int','parser.py',111),
  ('int -> VINT','int',1,'p_int','parser.py',112),
  ('int -> MINT','int',1,'p_int','parser.py',113),
  ('int -> CVINT','int',1,'p_int','parser.py',114),
  ('int -> CMINT','int',1,'p_int','parser.py',115),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',119),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',120),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',121),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',122),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',123),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',124),
  ('expression -> variable','expression',1,'p_expression','parser.py',128),
  ('expression -> const','expression',1,'p_expression','parser.py',129),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',130),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',134),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',135),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',136),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',137),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',138),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',139),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',140),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',141),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',142),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',143),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',144),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',145),
  ('const -> TRUE','const',1,'p_const','parser.py',152),
  ('const -> FALSE','const',1,'p_const','parser.py',153),
  ('const -> INT_DEC','const',1,'p_const','parser.py',154),
  ('const -> INT_BIN','const',1,'p_const','parser.py',155),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',159),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',160),
  ('ind_exp -> expression','ind_exp',1,'p_ind_exp','parser.py',167),
  ('ind_exp -> COLON','ind_exp',1,'p_ind_exp','parser.py',168),
  ('ind_exp -> <empty>','ind_exp',0,'p_ind_exp','parser.py',169),
  ('index -> expression','index',1,'p_index','parser.py',173),
  ('index -> ind_exp COMMA ind_exp','index',3,'p_index','parser.py',174),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',181),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',182),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',183),
  ('operation -> WALL','operation',1,'p_operation','parser.py',184),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',185),
  ('assigment -> variable ASSIGMENT expression','assigment',3,'p_assigment','parser.py',192),
  ('assigment -> variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET','assigment',5,'p_assigment','parser.py',193),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',200),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',201),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',207),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',208),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',212),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',213),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',220),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',221),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',228),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',229),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',236),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',237),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',244),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',245),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',246),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',247),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',248),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',249),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',277),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',278),
]
