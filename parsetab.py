
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assigment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLexpression : math_expression\n                      | const\n                      | variablemath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind_exp : expression\n                   | COLONindex : expression\n                 | ind_exp COMMA ind_exp\n                 | ind_exp COMMA\n                 | COMMA ind_expoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassigment : variable ASSIGMENT expression\n                     | variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKETfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ constcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list'
    
_lr_action_items = {'FOR':([0,2,3,37,38,39,40,41,42,43,44,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,37,38,39,40,41,42,43,44,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,37,38,39,40,41,42,43,44,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,37,38,39,40,41,42,43,44,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,37,38,39,40,41,42,43,44,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,37,38,39,40,41,42,43,44,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,37,38,39,40,41,42,43,44,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,37,38,39,40,41,42,43,44,64,67,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,92,97,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,12,14,15,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,92,93,96,97,100,111,116,117,124,132,133,134,135,144,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[12,12,-3,45,46,60,46,66,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-2,-4,-5,-6,-7,-8,-9,-10,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,119,120,46,126,46,46,12,12,140,46,46,12,12,46,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'CINT':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'VINT':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINT':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CVINT':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CMINT':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BOOL':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'VBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'MBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CVBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CMBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'$end':([1,2,3,37,38,39,40,41,42,43,44,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,37,38,39,40,41,42,43,44,134,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,147,]),'END':([3,37,38,39,40,41,42,43,44,135,163,172,177,179,182,185,187,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,148,173,180,184,186,188,189,190,]),'ENDFOR':([3,37,38,39,40,41,42,43,44,176,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,183,]),'NL':([4,5,6,7,8,9,10,12,17,18,19,20,46,47,49,50,51,52,55,56,57,58,78,79,80,85,86,89,90,95,98,99,103,104,105,106,107,108,109,118,128,130,139,141,147,148,151,158,159,161,166,170,173,174,180,183,184,186,188,189,190,],[38,39,40,41,42,43,44,-84,-60,-61,-62,-63,-51,-85,-77,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-64,116,117,-11,-76,-52,-35,-36,-37,-38,-44,-45,-46,-59,-40,-65,153,-12,-68,-69,162,168,169,171,175,178,-81,181,-79,-66,-67,-80,-83,-78,-82,]),'ASSIGMENT':([12,13,99,],[-51,59,-52,]),'LBRACKET':([12,16,46,53,66,119,126,],[48,63,48,84,94,136,142,]),'SUM':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'DENY':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TRUE':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,154,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FALSE':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,154,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'INT_DEC':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,154,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'INT_BIN':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,154,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'EQ':([21,45,60,120,140,],[64,67,88,-70,154,]),'COMMA':([21,45,46,47,48,49,50,51,52,55,56,57,58,70,71,73,78,79,80,85,98,99,103,104,105,106,107,108,109,112,113,114,120,121,123,125,128,129,140,143,145,149,152,155,157,164,167,],[65,-71,-51,68,72,-77,-32,-33,-34,-47,-48,-49,-50,-53,100,-54,-39,-41,-42,-43,-76,-52,-35,-36,-37,-38,-44,-45,-46,131,132,-17,-70,138,-73,131,-40,132,-74,-13,-16,138,-72,138,131,-75,-14,]),'PLUS':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,74,-32,-33,-34,-47,-48,-49,-50,-32,74,74,-39,-41,-42,74,74,-32,74,74,-52,74,74,74,74,74,74,74,74,74,74,74,-40,74,74,]),'MINUS':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,75,-32,-33,-34,-47,-48,-49,-50,-32,75,75,-39,-41,-42,75,75,-32,75,75,-52,75,75,75,75,75,75,75,75,75,75,75,-40,75,75,]),'MUL_MATRIX':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,76,-32,-33,-34,-47,-48,-49,-50,-32,76,76,-39,-41,-42,76,76,-32,76,76,-52,76,76,76,76,76,76,76,76,76,76,76,-40,76,76,]),'MUL_ELEM':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,77,-32,-33,-34,-47,-48,-49,-50,-32,77,77,-39,-41,-42,77,77,-32,77,77,-52,77,77,77,77,77,77,77,77,77,77,77,-40,77,77,]),'TRANSPOSE':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,78,-32,-33,-34,-47,-48,-49,-50,-32,78,78,-39,-41,-42,78,78,-32,78,78,-52,78,78,78,78,78,78,78,78,78,78,78,-40,78,78,]),'STL':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,79,-32,-33,-34,-47,-48,-49,-50,-32,79,79,-39,-41,-42,79,79,-32,79,79,-52,79,79,79,79,79,79,79,79,79,79,79,-40,79,79,]),'STR':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,80,-32,-33,-34,-47,-48,-49,-50,-32,80,80,-39,-41,-42,80,80,-32,80,80,-52,80,80,80,80,80,80,80,80,80,80,80,-40,80,80,]),'AND':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,81,-32,-33,-34,-47,-48,-49,-50,-32,81,81,-39,-41,-42,81,81,-32,81,81,-52,81,81,81,81,81,81,81,81,81,81,81,-40,81,81,]),'LESS':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,82,-32,-33,-34,-47,-48,-49,-50,-32,82,82,-39,-41,-42,82,82,-32,82,82,-52,82,82,82,82,82,82,82,82,82,82,82,-40,82,82,]),'GREATER':([46,49,50,51,52,55,56,57,58,61,62,70,78,79,80,85,86,91,95,98,99,102,103,104,105,106,107,108,109,110,114,115,128,145,146,],[-51,83,-32,-33,-34,-47,-48,-49,-50,-32,83,83,-39,-41,-42,83,83,-32,83,83,-52,83,83,83,83,83,83,83,83,83,83,83,-40,83,83,]),'RBRACKET':([46,50,51,52,55,56,57,58,69,70,73,78,79,80,85,91,94,99,100,101,102,103,104,105,106,107,108,109,110,121,123,127,128,136,140,142,149,152,155,164,],[-51,-32,-33,-34,-47,-48,-49,-50,99,-55,-54,-39,-41,-42,-43,118,122,-52,-57,-58,-53,-35,-36,-37,-38,-44,-45,-46,128,137,-73,-56,-40,150,-74,156,160,-72,165,-75,]),'BEGINIF':([46,50,51,52,55,56,57,58,61,78,79,80,85,99,103,104,105,106,107,108,109,128,],[-51,-32,-33,-34,-47,-48,-49,-50,89,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,]),'BEGIN':([46,50,51,52,55,56,57,58,61,78,79,80,85,99,103,104,105,106,107,108,109,122,128,137,146,150,156,160,165,],[-51,-32,-33,-34,-47,-48,-49,-50,90,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,139,-40,151,159,161,166,170,174,]),'R_FIGBRACKET':([46,50,51,52,55,56,57,58,78,79,80,85,99,103,104,105,106,107,108,109,112,113,114,125,128,129,143,145,157,167,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,130,-15,-17,141,-40,143,-13,-16,167,-14,]),'COLON':([46,48,50,51,52,55,56,57,58,72,78,79,80,85,99,100,103,104,105,106,107,108,109,115,128,],[-51,73,-32,-33,-34,-47,-48,-49,-50,73,-39,-41,-42,-43,-52,73,-35,-36,-37,-38,-44,-45,-46,133,-40,]),'BEGINFOR':([46,50,51,52,55,56,57,58,78,79,80,85,99,103,104,105,106,107,108,109,128,146,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,158,]),'L_FIGBRACKET':([59,67,87,96,131,144,],[87,96,111,111,144,111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,116,117,153,162,168,169,171,175,178,181,],[2,134,135,163,172,176,177,179,182,185,187,]),'statement':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[3,37,3,3,37,37,3,3,37,3,3,3,37,3,37,37,3,37,3,37,37,37,]),'declaration':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assigment':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[11,11,93,124,11,11,11,11,124,124,124,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,116,117,132,133,134,135,144,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[13,13,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,13,13,52,52,13,13,52,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_list':([0,2,116,117,134,135,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'int':([0,2,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'bool':([0,2,65,94,116,117,134,135,136,138,142,153,162,163,168,169,171,172,175,176,177,178,179,181,182,185,187,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'call_list':([12,],[47,]),'expression':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,],[49,62,70,85,86,62,95,98,102,103,104,105,106,107,108,109,110,114,115,114,102,114,145,146,114,]),'math_expression':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,],[50,61,50,50,50,91,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'const':([12,15,48,54,59,63,67,68,72,74,75,76,77,81,82,83,84,87,88,96,100,111,132,133,144,154,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,164,]),'index':([48,],[69,]),'ind_exp':([48,72,100,],[71,101,127,]),'decl_list':([87,96,144,],[112,125,157,]),'expr_list':([87,96,111,144,],[113,113,129,113,]),'func_list':([94,136,142,],[121,149,155,]),'func':([94,136,138,142,],[123,123,152,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',45),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',56),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',57),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',64),
  ('statement -> assigment NL','statement',2,'p_statement','parser.py',65),
  ('statement -> for NL','statement',2,'p_statement','parser.py',66),
  ('statement -> if NL','statement',2,'p_statement','parser.py',67),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',68),
  ('statement -> function NL','statement',2,'p_statement','parser.py',69),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',70),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',75),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',86),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',87),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',88),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',97),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',98),
  ('type -> int','type',1,'p_type','parser.py',105),
  ('type -> bool','type',1,'p_type','parser.py',106),
  ('int -> INT','int',1,'p_int','parser.py',110),
  ('int -> CINT','int',1,'p_int','parser.py',111),
  ('int -> VINT','int',1,'p_int','parser.py',112),
  ('int -> MINT','int',1,'p_int','parser.py',113),
  ('int -> CVINT','int',1,'p_int','parser.py',114),
  ('int -> CMINT','int',1,'p_int','parser.py',115),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',119),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',120),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',121),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',122),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',123),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',124),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',128),
  ('expression -> const','expression',1,'p_expression','parser.py',129),
  ('expression -> variable','expression',1,'p_expression','parser.py',130),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',134),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',135),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',136),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',137),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',138),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',139),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',140),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',141),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',142),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',143),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',144),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',145),
  ('const -> TRUE','const',1,'p_const','parser.py',156),
  ('const -> FALSE','const',1,'p_const','parser.py',157),
  ('const -> INT_DEC','const',1,'p_const','parser.py',158),
  ('const -> INT_BIN','const',1,'p_const','parser.py',159),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',163),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',164),
  ('ind_exp -> expression','ind_exp',1,'p_ind_exp','parser.py',171),
  ('ind_exp -> COLON','ind_exp',1,'p_ind_exp','parser.py',172),
  ('index -> expression','index',1,'p_index','parser.py',176),
  ('index -> ind_exp COMMA ind_exp','index',3,'p_index','parser.py',177),
  ('index -> ind_exp COMMA','index',2,'p_index','parser.py',178),
  ('index -> COMMA ind_exp','index',2,'p_index','parser.py',179),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',188),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',189),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',190),
  ('operation -> WALL','operation',1,'p_operation','parser.py',191),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',192),
  ('assigment -> variable ASSIGMENT expression','assigment',3,'p_assigment','parser.py',199),
  ('assigment -> variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET','assigment',5,'p_assigment','parser.py',200),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',207),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',208),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',214),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',215),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',219),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',220),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',227),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',228),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',235),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',236),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',243),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',244),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',251),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',252),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',253),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',254),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',255),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',256),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',284),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',285),
]
