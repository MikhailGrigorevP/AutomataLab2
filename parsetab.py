
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assignment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ const\n                | type VARIABLE EQ decl_list\n                | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETexpression : math_expression\n                      | const\n                      | variablemath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind : COMMA\n               | COMMA COLON\n               | COLON COMMAindex : expression\n                 | expr_list\n                 | expr_list ind\n                 | ind expr_list\n                 | decl_list ind\n                 | ind decl_list\n                 | decl_listoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassignment : variable ASSIGNMENT expression\n                     | variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKETfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE call_list\n                         | ret_list ASSIGNMENT VARIABLE\n                         | variable ASSIGNMENT VARIABLE call_listret_list : variable\n                    | ret_list COMMA variable'
    
_lr_action_items = {'FOR':([0,2,3,38,39,40,41,42,43,44,45,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,38,39,40,41,42,43,44,45,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,38,39,40,41,42,43,44,45,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,38,39,40,41,42,43,44,45,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,38,39,40,41,42,43,44,45,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,38,39,40,41,42,43,44,45,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,38,39,40,41,42,43,44,45,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,38,39,40,41,42,43,44,45,65,70,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,99,106,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,12,14,15,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,55,60,64,68,69,70,71,75,77,79,80,81,82,83,87,88,89,90,93,94,95,99,100,102,105,106,110,116,117,131,132,139,144,146,150,151,152,168,169,177,178,181,184,185,187,188,193,194,195,196,197,200,201,204,206,],[12,12,-3,46,47,61,47,67,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-2,-4,-5,-6,-7,-8,-9,-10,47,47,94,47,102,47,47,47,47,-59,47,47,47,47,47,47,47,47,47,47,47,47,134,135,47,47,142,47,-60,-61,12,12,157,47,47,47,12,12,12,47,12,12,47,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'CINT':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'VINT':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'MINT':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CVINT':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CMINT':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BOOL':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'CBOOL':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'VBOOL':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MBOOL':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CVBOOL':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'CMBOOL':([0,2,3,38,39,40,41,42,43,44,45,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[37,37,-3,-2,-4,-5,-6,-7,-8,-9,-10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'$end':([1,2,3,38,39,40,41,42,43,44,45,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,38,39,40,41,42,43,44,45,151,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,162,]),'END':([3,38,39,40,41,42,43,44,45,152,178,188,195,197,201,204,206,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,163,189,198,203,205,207,208,209,]),'ENDFOR':([3,38,39,40,41,42,43,44,45,194,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,202,]),'NL':([4,5,6,7,8,9,10,12,17,18,19,20,47,48,50,51,52,53,56,57,58,59,84,85,86,91,92,94,96,97,102,104,107,108,119,120,121,122,123,124,125,129,133,140,148,149,156,158,162,163,166,173,174,176,183,186,189,192,198,202,203,205,207,208,209,],[39,40,41,42,43,44,45,-90,-70,-71,-72,-73,-57,-91,-83,-38,-39,-40,-53,-54,-55,-56,-45,-47,-48,-49,-74,-57,131,132,-93,-11,-82,-58,-41,-42,-43,-44,-50,-51,-52,-94,-69,-92,-46,-75,168,-12,-78,-79,177,184,185,187,193,196,-87,200,-85,-76,-77,-86,-89,-84,-88,]),'ASSIGNMENT':([12,13,23,47,103,108,],[-57,60,68,-57,-96,-58,]),'COMMA':([12,13,21,23,46,47,48,49,50,51,52,53,56,57,58,59,73,74,76,78,84,85,86,91,103,107,108,111,112,113,118,119,120,121,122,123,124,125,127,128,129,135,136,138,140,141,143,147,148,157,160,164,167,170,172,179,180,190,191,199,],[-57,-95,66,69,-81,-57,71,77,-83,-38,-39,-40,-53,-54,-55,-56,-17,110,115,117,-45,-47,-48,-49,-96,-82,-58,144,145,-17,144,-41,-42,-43,-44,-50,-51,-52,145,144,71,-80,155,-33,71,145,-16,-13,-46,-34,145,155,-32,155,-14,-35,145,145,144,-37,]),'LBRACKET':([12,16,47,54,67,94,134,142,],[49,64,49,90,101,49,153,159,]),'SUM':([12,15,49,55,60,64,70,71,75,77,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,116,117,144,146,150,169,181,],[54,54,54,54,54,54,54,54,54,-59,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-60,-61,54,54,54,54,54,]),'DENY':([12,15,49,55,60,64,70,71,75,77,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,116,117,144,146,150,169,181,],[55,55,55,55,55,55,55,55,55,-59,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-60,-61,55,55,55,55,55,]),'TRUE':([12,15,49,55,60,64,70,71,75,77,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,116,117,144,146,150,169,181,],[56,56,56,56,56,56,56,56,56,-59,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-60,-61,56,56,56,56,56,]),'FALSE':([12,15,49,55,60,64,70,71,75,77,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,116,117,144,146,150,169,181,],[57,57,57,57,57,57,57,57,57,-59,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-60,-61,57,57,57,57,57,]),'INT_DEC':([12,15,49,55,60,64,70,71,75,77,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,116,117,144,146,150,169,181,],[58,58,58,58,58,58,58,58,58,-59,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-60,-61,58,58,58,58,58,]),'INT_BIN':([12,15,49,55,60,64,70,71,75,77,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,116,117,144,146,150,169,181,],[59,59,59,59,59,59,59,59,59,-59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-60,-61,59,59,59,59,59,]),'EQ':([21,46,61,135,157,],[65,70,95,-80,169,]),'PLUS':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,80,-38,-39,-40,-53,-54,-55,-56,-38,80,80,-45,-47,-48,80,80,-57,-38,80,80,-58,80,80,80,80,80,80,80,80,80,80,80,-46,80,-39,]),'MINUS':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,81,-38,-39,-40,-53,-54,-55,-56,-38,81,81,-45,-47,-48,81,81,-57,-38,81,81,-58,81,81,81,81,81,81,81,81,81,81,81,-46,81,-39,]),'MUL_MATRIX':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,82,-38,-39,-40,-53,-54,-55,-56,-38,82,82,-45,-47,-48,82,82,-57,-38,82,82,-58,82,82,82,82,82,82,82,82,82,82,82,-46,82,-39,]),'MUL_ELEM':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,83,-38,-39,-40,-53,-54,-55,-56,-38,83,83,-45,-47,-48,83,83,-57,-38,83,83,-58,83,83,83,83,83,83,83,83,83,83,83,-46,83,-39,]),'TRANSPOSE':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,84,-38,-39,-40,-53,-54,-55,-56,-38,84,84,-45,-47,-48,84,84,-57,-38,84,84,-58,84,84,84,84,84,84,84,84,84,84,84,-46,84,-39,]),'STL':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,85,-38,-39,-40,-53,-54,-55,-56,-38,85,85,-45,-47,-48,85,85,-57,-38,85,85,-58,85,85,85,85,85,85,85,85,85,85,85,-46,85,-39,]),'STR':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,86,-38,-39,-40,-53,-54,-55,-56,-38,86,86,-45,-47,-48,86,86,-57,-38,86,86,-58,86,86,86,86,86,86,86,86,86,86,86,-46,86,-39,]),'AND':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,87,-38,-39,-40,-53,-54,-55,-56,-38,87,87,-45,-47,-48,87,87,-57,-38,87,87,-58,87,87,87,87,87,87,87,87,87,87,87,-46,87,-39,]),'LESS':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,88,-38,-39,-40,-53,-54,-55,-56,-38,88,88,-45,-47,-48,88,88,-57,-38,88,88,-58,88,88,88,88,88,88,88,88,88,88,88,-46,88,-39,]),'GREATER':([47,50,51,52,53,56,57,58,59,62,63,73,84,85,86,91,92,94,98,104,107,108,113,119,120,121,122,123,124,125,126,130,143,148,161,179,],[-57,89,-38,-39,-40,-53,-54,-55,-56,-38,89,89,-45,-47,-48,89,89,-57,-38,89,89,-58,89,89,89,89,89,89,89,89,89,89,89,-46,89,-39,]),'RBRACKET':([47,51,52,53,56,57,58,59,72,73,74,76,84,85,86,91,98,101,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123,124,125,126,128,136,138,143,147,148,153,157,159,164,167,170,172,179,180,199,],[-57,-38,-39,-40,-53,-54,-55,-56,108,-17,-15,-68,-45,-47,-48,-49,133,137,-58,-64,-59,-15,-67,-17,-66,-59,-60,-61,-41,-42,-43,-44,-50,-51,-52,148,-15,154,-33,-16,-13,-46,165,-34,171,175,-32,182,-14,-35,-36,-37,]),'COLON':([47,49,51,52,53,56,57,58,59,73,74,76,77,84,85,86,91,108,110,115,119,120,121,122,123,124,125,130,143,147,148,172,],[-57,78,-38,-39,-40,-53,-54,-55,-56,-17,78,78,116,-45,-47,-48,-49,-58,116,116,-41,-42,-43,-44,-50,-51,-52,150,-16,-13,-46,-14,]),'BEGINIF':([47,51,52,53,56,57,58,59,62,84,85,86,91,108,119,120,121,122,123,124,125,148,],[-57,-38,-39,-40,-53,-54,-55,-56,96,-45,-47,-48,-49,-58,-41,-42,-43,-44,-50,-51,-52,-46,]),'BEGIN':([47,51,52,53,56,57,58,59,62,84,85,86,91,108,119,120,121,122,123,124,125,137,148,154,161,165,171,175,182,],[-57,-38,-39,-40,-53,-54,-55,-56,97,-45,-47,-48,-49,-58,-41,-42,-43,-44,-50,-51,-52,156,-46,166,174,176,183,186,192,]),'R_FIGBRACKET':([47,51,52,53,56,57,58,59,84,85,86,91,108,113,118,119,120,121,122,123,124,125,127,128,141,143,147,148,160,172,190,191,],[-57,-38,-39,-40,-53,-54,-55,-56,-45,-47,-48,-49,-58,-17,147,-41,-42,-43,-44,-50,-51,-52,149,-15,158,-16,-13,-46,172,-14,199,147,]),'BEGINFOR':([47,51,52,53,56,57,58,59,84,85,86,91,108,119,120,121,122,123,124,125,148,161,],[-57,-38,-39,-40,-53,-54,-55,-56,-45,-47,-48,-49,-58,-41,-42,-43,-44,-50,-51,-52,-46,173,]),'L_FIGBRACKET':([49,60,70,75,77,93,105,115,116,117,145,146,169,181,],[79,93,105,79,-59,79,79,146,-60,-61,146,79,181,79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,131,132,168,177,184,185,187,193,196,200,],[2,151,152,178,188,194,195,197,201,204,206,]),'statement':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[3,38,3,3,38,38,3,3,38,3,3,3,38,3,38,38,3,38,3,38,38,38,]),'declaration':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[11,11,100,139,11,11,11,11,139,139,139,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,15,49,55,60,64,69,70,71,75,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,131,132,144,146,150,151,152,168,169,177,178,181,184,185,187,188,193,194,195,196,197,200,201,204,206,],[13,13,53,53,53,53,53,53,103,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,13,13,53,53,53,13,13,13,53,13,13,53,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_list':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'ret_list':([0,2,131,132,151,152,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'int':([0,2,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'bool':([0,2,66,101,131,132,151,152,153,155,159,168,177,178,184,185,187,188,193,194,195,196,197,200,201,204,206,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'call_list':([12,94,102,],[48,129,140,]),'expression':([12,15,49,55,60,64,70,71,75,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,144,146,150,169,181,],[50,63,73,91,92,63,104,107,113,113,119,120,121,122,123,124,125,126,113,50,130,50,113,143,143,113,161,113,113,]),'math_expression':([12,15,49,55,60,64,70,71,75,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,144,146,150,169,181,],[51,62,51,51,51,98,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'const':([12,15,49,55,60,64,70,71,75,79,80,81,82,83,87,88,89,90,93,94,95,102,105,110,144,146,150,169,181,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,179,52,]),'index':([49,],[72,]),'expr_list':([49,75,79,93,105,146,169,181,],[74,111,118,128,128,128,128,191,]),'ind':([49,74,76,],[75,109,114,]),'decl_list':([49,75,93,105,146,169,181,],[76,112,127,141,160,180,190,]),'func_list':([101,153,159,],[136,164,170,]),'func':([101,153,155,159,],[138,138,167,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',45),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',56),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',57),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',64),
  ('statement -> assignment NL','statement',2,'p_statement','parser.py',65),
  ('statement -> for NL','statement',2,'p_statement','parser.py',66),
  ('statement -> if NL','statement',2,'p_statement','parser.py',67),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',68),
  ('statement -> function NL','statement',2,'p_statement','parser.py',69),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',70),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',75),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',86),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',87),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',88),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',97),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',98),
  ('type -> int','type',1,'p_type','parser.py',105),
  ('type -> bool','type',1,'p_type','parser.py',106),
  ('int -> INT','int',1,'p_int','parser.py',110),
  ('int -> CINT','int',1,'p_int','parser.py',111),
  ('int -> VINT','int',1,'p_int','parser.py',112),
  ('int -> MINT','int',1,'p_int','parser.py',113),
  ('int -> CVINT','int',1,'p_int','parser.py',114),
  ('int -> CMINT','int',1,'p_int','parser.py',115),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',119),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',120),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',121),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',122),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',123),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',124),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',128),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',129),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',136),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',137),
  ('func -> type VARIABLE EQ decl_list','func',4,'p_func','parser.py',138),
  ('func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','func',6,'p_func','parser.py',139),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',148),
  ('expression -> const','expression',1,'p_expression','parser.py',149),
  ('expression -> variable','expression',1,'p_expression','parser.py',150),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',154),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',155),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',156),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',157),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',158),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',159),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',160),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',161),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',162),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',163),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',164),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',165),
  ('const -> TRUE','const',1,'p_const','parser.py',176),
  ('const -> FALSE','const',1,'p_const','parser.py',177),
  ('const -> INT_DEC','const',1,'p_const','parser.py',178),
  ('const -> INT_BIN','const',1,'p_const','parser.py',179),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',183),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',184),
  ('ind -> COMMA','ind',1,'p_ind_exp','parser.py',191),
  ('ind -> COMMA COLON','ind',2,'p_ind_exp','parser.py',192),
  ('ind -> COLON COMMA','ind',2,'p_ind_exp','parser.py',193),
  ('index -> expression','index',1,'p_index','parser.py',202),
  ('index -> expr_list','index',1,'p_index','parser.py',203),
  ('index -> expr_list ind','index',2,'p_index','parser.py',204),
  ('index -> ind expr_list','index',2,'p_index','parser.py',205),
  ('index -> decl_list ind','index',2,'p_index','parser.py',206),
  ('index -> ind decl_list','index',2,'p_index','parser.py',207),
  ('index -> decl_list','index',1,'p_index','parser.py',208),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',217),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',218),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',219),
  ('operation -> WALL','operation',1,'p_operation','parser.py',220),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',221),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',228),
  ('assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET','assignment',5,'p_assignment','parser.py',229),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',236),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',237),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',243),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',244),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',248),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',249),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',257),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',258),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',265),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',266),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',267),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',268),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',269),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',270),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',303),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',304),
  ('function_call -> ret_list ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',305),
  ('function_call -> ret_list ASSIGNMENT VARIABLE','function_call',3,'p_function_call','parser.py',306),
  ('function_call -> variable ASSIGNMENT VARIABLE call_list','function_call',4,'p_function_call','parser.py',307),
  ('ret_list -> variable','ret_list',1,'p_ret_list','parser.py',318),
  ('ret_list -> ret_list COMMA variable','ret_list',3,'p_ret_list','parser.py',319),
]
