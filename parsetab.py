
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assigment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKETexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLexpression : variable\n                      | const\n                      | math_expressionmath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind_exp : expression\n                   | COLON\n                   | index : expression\n                 | ind_exp COMMA ind_expoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassigment : variable ASSIGMENT expressionfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ constcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list'
    
_lr_action_items = {'FOR':([0,2,3,37,38,39,40,41,42,43,44,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,37,38,39,40,41,42,43,44,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,37,38,39,40,41,42,43,44,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,37,38,39,40,41,42,43,44,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,37,38,39,40,41,42,43,44,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,37,38,39,40,41,42,43,44,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,37,38,39,40,41,42,43,44,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,37,38,39,40,41,42,43,44,64,67,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,90,95,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,12,14,15,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,90,91,94,95,98,108,109,116,123,124,125,132,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[12,12,-3,45,46,60,46,66,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-2,-4,-5,-6,-7,-8,-9,-10,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,111,112,46,119,46,12,12,130,46,12,12,46,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'CINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'VINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CVINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CMINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'VBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'MBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CVBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CMBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'$end':([1,2,3,37,38,39,40,41,42,43,44,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,37,38,39,40,41,42,43,44,124,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,135,]),'END':([3,37,38,39,40,41,42,43,44,125,151,159,164,166,169,172,174,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,136,160,167,171,173,175,176,177,]),'ENDFOR':([3,37,38,39,40,41,42,43,44,163,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,170,]),'NL':([4,5,6,7,8,9,10,12,17,18,19,20,46,47,49,50,51,52,53,54,55,56,77,78,79,84,85,87,88,93,96,97,99,100,101,102,103,104,105,110,122,129,131,135,136,139,146,147,149,154,157,160,161,167,170,171,173,175,176,177,],[38,39,40,41,42,43,44,-79,-56,-57,-58,-59,-48,-80,-72,-29,-30,-31,-44,-45,-46,-47,-36,-38,-39,-40,-60,108,109,-11,-71,-49,-32,-33,-34,-35,-41,-42,-43,-55,-37,141,-12,-63,-64,150,155,156,158,162,165,-76,168,-74,-61,-62,-75,-78,-73,-77,]),'ASSIGMENT':([12,13,97,],[-48,59,-49,]),'LBRACKET':([12,16,46,57,66,111,119,],[48,63,48,83,92,126,133,]),'TRUE':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,142,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'FALSE':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,142,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'INT_DEC':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,142,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INT_BIN':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,142,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'SUM':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'DENY':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'EQ':([21,45,60,112,130,],[64,67,86,-65,142,]),'COMMA':([21,45,46,47,48,49,50,51,52,53,54,55,56,70,71,72,77,78,79,84,96,97,99,100,101,102,103,104,105,112,113,115,117,118,122,130,137,140,143,144,152,],[65,-66,-48,68,-52,-72,-29,-30,-31,-44,-45,-46,-47,-50,98,-51,-36,-38,-39,-40,-71,-49,-32,-33,-34,-35,-41,-42,-43,-65,128,-68,132,-14,-37,-69,128,-67,-13,128,-70,]),'PLUS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,73,-29,-30,-31,-44,-45,-46,-47,-31,73,73,-36,-38,-39,73,73,-31,73,73,-49,73,73,73,73,73,73,73,73,73,73,73,-37,73,73,]),'MINUS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,74,-29,-30,-31,-44,-45,-46,-47,-31,74,74,-36,-38,-39,74,74,-31,74,74,-49,74,74,74,74,74,74,74,74,74,74,74,-37,74,74,]),'MUL_MATRIX':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,75,-29,-30,-31,-44,-45,-46,-47,-31,75,75,-36,-38,-39,75,75,-31,75,75,-49,75,75,75,75,75,75,75,75,75,75,75,-37,75,75,]),'MUL_ELEM':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,76,-29,-30,-31,-44,-45,-46,-47,-31,76,76,-36,-38,-39,76,76,-31,76,76,-49,76,76,76,76,76,76,76,76,76,76,76,-37,76,76,]),'TRANSPOSE':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,77,-29,-30,-31,-44,-45,-46,-47,-31,77,77,-36,-38,-39,77,77,-31,77,77,-49,77,77,77,77,77,77,77,77,77,77,77,-37,77,77,]),'STL':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,78,-29,-30,-31,-44,-45,-46,-47,-31,78,78,-36,-38,-39,78,78,-31,78,78,-49,78,78,78,78,78,78,78,78,78,78,78,-37,78,78,]),'STR':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,79,-29,-30,-31,-44,-45,-46,-47,-31,79,79,-36,-38,-39,79,79,-31,79,79,-49,79,79,79,79,79,79,79,79,79,79,79,-37,79,79,]),'AND':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,80,-29,-30,-31,-44,-45,-46,-47,-31,80,80,-36,-38,-39,80,80,-31,80,80,-49,80,80,80,80,80,80,80,80,80,80,80,-37,80,80,]),'LESS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,81,-29,-30,-31,-44,-45,-46,-47,-31,81,81,-36,-38,-39,81,81,-31,81,81,-49,81,81,81,81,81,81,81,81,81,81,81,-37,81,81,]),'GREATER':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,118,121,122,134,143,],[-48,82,-29,-30,-31,-44,-45,-46,-47,-31,82,82,-36,-38,-39,82,82,-31,82,82,-49,82,82,82,82,82,82,82,82,82,82,82,-37,82,82,]),'RBRACKET':([46,50,51,52,53,54,55,56,69,70,72,77,78,79,84,89,92,97,98,99,100,101,102,103,104,105,106,113,115,120,121,122,126,130,133,137,140,144,152,],[-48,-29,-30,-31,-44,-45,-46,-47,97,-53,-51,-36,-38,-39,-40,110,114,-49,-52,-32,-33,-34,-35,-41,-42,-43,122,127,-68,-54,-50,-37,138,-69,145,148,-67,153,-70,]),'BEGINIF':([46,50,51,52,53,54,55,56,61,77,78,79,84,97,99,100,101,102,103,104,105,122,],[-48,-29,-30,-31,-44,-45,-46,-47,87,-36,-38,-39,-40,-49,-32,-33,-34,-35,-41,-42,-43,-37,]),'BEGIN':([46,50,51,52,53,54,55,56,61,77,78,79,84,97,99,100,101,102,103,104,105,114,122,127,134,138,145,148,153,],[-48,-29,-30,-31,-44,-45,-46,-47,88,-36,-38,-39,-40,-49,-32,-33,-34,-35,-41,-42,-43,129,-37,139,147,149,154,157,161,]),'COLON':([46,48,50,51,52,53,54,55,56,77,78,79,84,97,98,99,100,101,102,103,104,105,107,122,],[-48,72,-29,-30,-31,-44,-45,-46,-47,-36,-38,-39,-40,-49,72,-32,-33,-34,-35,-41,-42,-43,123,-37,]),'R_FIGBRACKET':([46,50,51,52,53,54,55,56,77,78,79,84,97,99,100,101,102,103,104,105,117,118,122,143,],[-48,-29,-30,-31,-44,-45,-46,-47,-36,-38,-39,-40,-49,-32,-33,-34,-35,-41,-42,-43,131,-14,-37,-13,]),'BEGINFOR':([46,50,51,52,53,54,55,56,77,78,79,84,97,99,100,101,102,103,104,105,122,134,],[-48,-29,-30,-31,-44,-45,-46,-47,-36,-38,-39,-40,-49,-32,-33,-34,-35,-41,-42,-43,-37,146,]),'L_FIGBRACKET':([67,],[94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,108,109,141,150,155,156,158,162,165,168,],[2,124,125,151,159,163,164,166,169,172,174,]),'statement':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[3,37,3,3,37,37,3,3,37,3,3,3,37,3,37,37,3,37,3,37,37,37,]),'declaration':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assigment':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[11,11,91,116,11,11,11,11,116,116,116,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,108,109,123,124,125,132,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[13,13,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,13,13,50,13,13,50,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_list':([0,2,108,109,124,125,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'int':([0,2,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'bool':([0,2,65,92,108,109,124,125,126,128,133,141,150,151,155,156,158,159,162,163,164,165,166,168,169,172,174,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'call_list':([12,],[47,]),'expression':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,],[49,62,70,84,85,62,93,96,99,100,101,102,103,104,105,106,107,118,121,134,143,]),'const':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,142,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,152,]),'math_expression':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,123,132,],[52,61,52,52,52,89,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'index':([48,],[69,]),'ind_exp':([48,98,],[71,120,]),'func_list':([92,126,133,],[113,137,144,]),'func':([92,126,128,133,],[115,115,140,115,]),'expr_list':([94,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',49),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',60),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',61),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',68),
  ('statement -> assigment NL','statement',2,'p_statement','parser.py',69),
  ('statement -> for NL','statement',2,'p_statement','parser.py',70),
  ('statement -> if NL','statement',2,'p_statement','parser.py',71),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',72),
  ('statement -> function NL','statement',2,'p_statement','parser.py',73),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',74),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',78),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',79),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',86),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',87),
  ('type -> int','type',1,'p_type','parser.py',94),
  ('type -> bool','type',1,'p_type','parser.py',95),
  ('int -> INT','int',1,'p_int','parser.py',99),
  ('int -> CINT','int',1,'p_int','parser.py',100),
  ('int -> VINT','int',1,'p_int','parser.py',101),
  ('int -> MINT','int',1,'p_int','parser.py',102),
  ('int -> CVINT','int',1,'p_int','parser.py',103),
  ('int -> CMINT','int',1,'p_int','parser.py',104),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',108),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',109),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',110),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',111),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',112),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',113),
  ('expression -> variable','expression',1,'p_expression','parser.py',117),
  ('expression -> const','expression',1,'p_expression','parser.py',118),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',119),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',123),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',124),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',125),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',126),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',127),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',128),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',129),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',130),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',131),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',132),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',133),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',134),
  ('const -> TRUE','const',1,'p_const','parser.py',141),
  ('const -> FALSE','const',1,'p_const','parser.py',142),
  ('const -> INT_DEC','const',1,'p_const','parser.py',143),
  ('const -> INT_BIN','const',1,'p_const','parser.py',144),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',148),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',149),
  ('ind_exp -> expression','ind_exp',1,'p_ind_exp','parser.py',156),
  ('ind_exp -> COLON','ind_exp',1,'p_ind_exp','parser.py',157),
  ('ind_exp -> <empty>','ind_exp',0,'p_ind_exp','parser.py',158),
  ('index -> expression','index',1,'p_index','parser.py',162),
  ('index -> ind_exp COMMA ind_exp','index',3,'p_index','parser.py',163),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',170),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',171),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',172),
  ('operation -> WALL','operation',1,'p_operation','parser.py',173),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',174),
  ('assigment -> variable ASSIGMENT expression','assigment',3,'p_assigment','parser.py',181),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',185),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',186),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',190),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',191),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',195),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',196),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',203),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',204),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',211),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',212),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',219),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',220),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',227),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',228),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',229),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',230),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',231),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',232),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',251),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',252),
]
