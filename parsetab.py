
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assigment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLexpression : math_expression\n                      | const\n                      | variablemath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind : COMMA\n               | COMMA COLON\n               | COLON COMMAindex : expression\n                 | expr_list ind expr_list\n                 | expr_list ind\n                 | ind expr_list\n                 | decl_list ind\n                 | ind decl_listoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassigment : variable ASSIGMENT expression\n                     | variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKETfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ constcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list'
    
_lr_action_items = {'FOR':([0,2,3,37,38,39,40,41,42,43,44,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,37,38,39,40,41,42,43,44,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,37,38,39,40,41,42,43,44,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,37,38,39,40,41,42,43,44,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,37,38,39,40,41,42,43,44,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,37,38,39,40,41,42,43,44,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,37,38,39,40,41,42,43,44,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,37,38,39,40,41,42,43,44,64,67,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,95,100,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,12,14,15,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,54,59,63,67,68,72,74,76,77,78,79,80,84,85,86,87,90,91,95,96,99,100,103,104,110,111,124,125,132,137,139,143,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[12,12,-3,45,46,60,46,66,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-2,-4,-5,-6,-7,-8,-9,-10,46,46,46,46,46,46,46,-53,46,46,46,46,46,46,46,46,46,46,46,127,128,46,134,46,46,-54,-55,12,12,150,46,46,46,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'CINT':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'VINT':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINT':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CVINT':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CMINT':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BOOL':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'VBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'MBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CVBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CMBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'$end':([1,2,3,37,38,39,40,41,42,43,44,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,37,38,39,40,41,42,43,44,144,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,155,]),'END':([3,37,38,39,40,41,42,43,44,145,171,179,184,186,189,192,194,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,156,180,187,191,193,195,196,197,]),'ENDFOR':([3,37,38,39,40,41,42,43,44,183,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,190,]),'NL':([4,5,6,7,8,9,10,12,17,18,19,20,46,47,49,50,51,52,55,56,57,58,81,82,83,88,89,92,93,98,101,102,113,114,115,116,117,118,119,126,141,142,149,151,155,156,159,166,167,169,174,177,180,181,187,190,191,193,195,196,197,],[38,39,40,41,42,43,44,-87,-63,-64,-65,-66,-51,-88,-80,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-67,124,125,-11,-79,-52,-35,-36,-37,-38,-44,-45,-46,-62,-40,-68,161,-12,-71,-72,170,175,176,178,182,185,-84,188,-82,-69,-70,-83,-86,-81,-85,]),'ASSIGMENT':([12,13,102,],[-51,59,-52,]),'LBRACKET':([12,16,46,53,66,127,134,],[48,63,48,87,97,146,152,]),'SUM':([12,15,48,54,59,63,67,68,72,74,76,77,78,79,80,84,85,86,87,90,91,99,103,104,110,111,137,139,143,],[53,53,53,53,53,53,53,53,53,-53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-54,-55,53,53,53,]),'DENY':([12,15,48,54,59,63,67,68,72,74,76,77,78,79,80,84,85,86,87,90,91,99,103,104,110,111,137,139,143,],[54,54,54,54,54,54,54,54,54,-53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-54,-55,54,54,54,]),'TRUE':([12,15,48,54,59,63,67,68,72,74,76,77,78,79,80,84,85,86,87,90,91,99,103,104,110,111,137,139,143,162,],[55,55,55,55,55,55,55,55,55,-53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-54,-55,55,55,55,55,]),'FALSE':([12,15,48,54,59,63,67,68,72,74,76,77,78,79,80,84,85,86,87,90,91,99,103,104,110,111,137,139,143,162,],[56,56,56,56,56,56,56,56,56,-53,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-54,-55,56,56,56,56,]),'INT_DEC':([12,15,48,54,59,63,67,68,72,74,76,77,78,79,80,84,85,86,87,90,91,99,103,104,110,111,137,139,143,162,],[57,57,57,57,57,57,57,57,57,-53,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-54,-55,57,57,57,57,]),'INT_BIN':([12,15,48,54,59,63,67,68,72,74,76,77,78,79,80,84,85,86,87,90,91,99,103,104,110,111,137,139,143,162,],[58,58,58,58,58,58,58,58,58,-53,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-54,-55,58,58,58,58,]),'EQ':([21,45,60,128,150,],[64,67,91,-73,162,]),'COMMA':([21,45,46,47,48,49,50,51,52,55,56,57,58,70,71,73,75,81,82,83,88,101,102,105,106,107,112,113,114,115,116,117,118,119,121,122,128,129,131,133,135,136,140,141,150,153,157,160,163,165,172,],[65,-74,-51,68,74,-80,-32,-33,-34,-47,-48,-49,-50,-17,104,109,111,-39,-41,-42,-43,-79,-52,137,138,-17,137,-35,-36,-37,-38,-44,-45,-46,138,137,-73,148,-76,138,137,-16,-13,-40,-77,138,148,-75,148,-14,-78,]),'PLUS':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,77,-32,-33,-34,-47,-48,-49,-50,-32,77,77,-39,-41,-42,77,77,-32,77,77,-52,77,77,77,77,77,77,77,77,77,77,77,-40,77,]),'MINUS':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,78,-32,-33,-34,-47,-48,-49,-50,-32,78,78,-39,-41,-42,78,78,-32,78,78,-52,78,78,78,78,78,78,78,78,78,78,78,-40,78,]),'MUL_MATRIX':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,79,-32,-33,-34,-47,-48,-49,-50,-32,79,79,-39,-41,-42,79,79,-32,79,79,-52,79,79,79,79,79,79,79,79,79,79,79,-40,79,]),'MUL_ELEM':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,80,-32,-33,-34,-47,-48,-49,-50,-32,80,80,-39,-41,-42,80,80,-32,80,80,-52,80,80,80,80,80,80,80,80,80,80,80,-40,80,]),'TRANSPOSE':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,81,-32,-33,-34,-47,-48,-49,-50,-32,81,81,-39,-41,-42,81,81,-32,81,81,-52,81,81,81,81,81,81,81,81,81,81,81,-40,81,]),'STL':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,82,-32,-33,-34,-47,-48,-49,-50,-32,82,82,-39,-41,-42,82,82,-32,82,82,-52,82,82,82,82,82,82,82,82,82,82,82,-40,82,]),'STR':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,83,-32,-33,-34,-47,-48,-49,-50,-32,83,83,-39,-41,-42,83,83,-32,83,83,-52,83,83,83,83,83,83,83,83,83,83,83,-40,83,]),'AND':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,84,-32,-33,-34,-47,-48,-49,-50,-32,84,84,-39,-41,-42,84,84,-32,84,84,-52,84,84,84,84,84,84,84,84,84,84,84,-40,84,]),'LESS':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,85,-32,-33,-34,-47,-48,-49,-50,-32,85,85,-39,-41,-42,85,85,-32,85,85,-52,85,85,85,85,85,85,85,85,85,85,85,-40,85,]),'GREATER':([46,49,50,51,52,55,56,57,58,61,62,70,81,82,83,88,89,94,98,101,102,107,113,114,115,116,117,118,119,120,123,136,141,154,],[-51,86,-32,-33,-34,-47,-48,-49,-50,-32,86,86,-39,-41,-42,86,86,-32,86,86,-52,86,86,86,86,86,86,86,86,86,86,86,-40,86,]),'RBRACKET':([46,50,51,52,55,56,57,58,69,70,81,82,83,88,94,97,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,118,119,120,129,131,135,136,140,141,146,150,152,157,160,163,165,172,],[-51,-32,-33,-34,-47,-48,-49,-50,102,-56,-39,-41,-42,-43,126,130,-52,-58,-53,-15,-61,-17,-60,-53,-54,-55,-35,-36,-37,-38,-44,-45,-46,141,147,-76,-57,-16,-13,-40,158,-77,164,168,-75,173,-14,-78,]),'COLON':([46,48,50,51,52,55,56,57,58,70,71,73,74,81,82,83,88,102,104,109,113,114,115,116,117,118,119,123,136,140,141,165,],[-51,75,-32,-33,-34,-47,-48,-49,-50,-17,75,75,110,-39,-41,-42,-43,-52,110,110,-35,-36,-37,-38,-44,-45,-46,143,-16,-13,-40,-14,]),'BEGINIF':([46,50,51,52,55,56,57,58,61,81,82,83,88,102,113,114,115,116,117,118,119,141,],[-51,-32,-33,-34,-47,-48,-49,-50,92,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,]),'BEGIN':([46,50,51,52,55,56,57,58,61,81,82,83,88,102,113,114,115,116,117,118,119,130,141,147,154,158,164,168,173,],[-51,-32,-33,-34,-47,-48,-49,-50,93,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,149,-40,159,167,169,174,177,181,]),'R_FIGBRACKET':([46,50,51,52,55,56,57,58,81,82,83,88,102,107,112,113,114,115,116,117,118,119,121,122,133,136,140,141,153,165,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-17,140,-35,-36,-37,-38,-44,-45,-46,142,-15,151,-16,-13,-40,165,-14,]),'BEGINFOR':([46,50,51,52,55,56,57,58,81,82,83,88,102,113,114,115,116,117,118,119,141,154,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,166,]),'L_FIGBRACKET':([48,59,67,72,74,90,99,109,110,111,138,139,],[76,90,99,76,-53,76,76,139,-54,-55,139,76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,124,125,161,170,175,176,178,182,185,188,],[2,144,145,171,179,183,184,186,189,192,194,]),'statement':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[3,37,3,3,37,37,3,3,37,3,3,3,37,3,37,37,3,37,3,37,37,37,]),'declaration':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assigment':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[11,11,96,132,11,11,11,11,132,132,132,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,15,48,54,59,63,67,68,72,76,77,78,79,80,84,85,86,87,90,91,99,103,104,124,125,137,139,143,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[13,13,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,13,13,52,52,52,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_list':([0,2,124,125,144,145,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'int':([0,2,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'bool':([0,2,65,97,124,125,144,145,146,148,152,161,170,171,175,176,178,179,182,183,184,185,186,188,189,192,194,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'call_list':([12,],[47,]),'expression':([12,15,48,54,59,63,67,68,72,76,77,78,79,80,84,85,86,87,90,91,99,103,104,137,139,143,],[49,62,70,88,89,62,98,101,107,107,113,114,115,116,117,118,119,120,107,123,107,107,136,136,107,154,]),'math_expression':([12,15,48,54,59,63,67,68,72,76,77,78,79,80,84,85,86,87,90,91,99,103,104,137,139,143,],[50,61,50,50,50,94,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'const':([12,15,48,54,59,63,67,68,72,76,77,78,79,80,84,85,86,87,90,91,99,103,104,137,139,143,162,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,172,]),'index':([48,],[69,]),'expr_list':([48,72,76,90,99,103,139,],[71,105,112,122,122,135,122,]),'ind':([48,71,73,],[72,103,108,]),'decl_list':([48,72,90,99,139,],[73,106,121,133,153,]),'func_list':([97,146,152,],[129,157,163,]),'func':([97,146,148,152,],[131,131,160,131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',45),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',56),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',57),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',64),
  ('statement -> assigment NL','statement',2,'p_statement','parser.py',65),
  ('statement -> for NL','statement',2,'p_statement','parser.py',66),
  ('statement -> if NL','statement',2,'p_statement','parser.py',67),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',68),
  ('statement -> function NL','statement',2,'p_statement','parser.py',69),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',70),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',75),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',86),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',87),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',88),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',97),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',98),
  ('type -> int','type',1,'p_type','parser.py',105),
  ('type -> bool','type',1,'p_type','parser.py',106),
  ('int -> INT','int',1,'p_int','parser.py',110),
  ('int -> CINT','int',1,'p_int','parser.py',111),
  ('int -> VINT','int',1,'p_int','parser.py',112),
  ('int -> MINT','int',1,'p_int','parser.py',113),
  ('int -> CVINT','int',1,'p_int','parser.py',114),
  ('int -> CMINT','int',1,'p_int','parser.py',115),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',119),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',120),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',121),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',122),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',123),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',124),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',128),
  ('expression -> const','expression',1,'p_expression','parser.py',129),
  ('expression -> variable','expression',1,'p_expression','parser.py',130),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',134),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',135),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',136),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',137),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',138),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',139),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',140),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',141),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',142),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',143),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',144),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',145),
  ('const -> TRUE','const',1,'p_const','parser.py',156),
  ('const -> FALSE','const',1,'p_const','parser.py',157),
  ('const -> INT_DEC','const',1,'p_const','parser.py',158),
  ('const -> INT_BIN','const',1,'p_const','parser.py',159),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',163),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',164),
  ('ind -> COMMA','ind',1,'p_ind_exp','parser.py',171),
  ('ind -> COMMA COLON','ind',2,'p_ind_exp','parser.py',172),
  ('ind -> COLON COMMA','ind',2,'p_ind_exp','parser.py',173),
  ('index -> expression','index',1,'p_index','parser.py',182),
  ('index -> expr_list ind expr_list','index',3,'p_index','parser.py',183),
  ('index -> expr_list ind','index',2,'p_index','parser.py',184),
  ('index -> ind expr_list','index',2,'p_index','parser.py',185),
  ('index -> decl_list ind','index',2,'p_index','parser.py',186),
  ('index -> ind decl_list','index',2,'p_index','parser.py',187),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',199),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',200),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',201),
  ('operation -> WALL','operation',1,'p_operation','parser.py',202),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',203),
  ('assigment -> variable ASSIGMENT expression','assigment',3,'p_assigment','parser.py',210),
  ('assigment -> variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET','assigment',5,'p_assigment','parser.py',211),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',218),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',219),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',225),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',226),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',230),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',231),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',238),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',239),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',246),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',247),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',254),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',255),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',262),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',263),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',264),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',265),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',266),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',267),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',295),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',296),
]
