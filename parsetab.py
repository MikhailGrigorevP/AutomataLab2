
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGMENT BEGIN BEGINFOR BEGINIF BOOL CBOOL CINT CMBOOL CMINT COLON COMMA CVBOOL CVINT DENY END ENDFOR ENDIF EQ EXIT FALSE FOR FUNCTION GREATER IF INT INT_BIN INT_DEC LBRACKET LEFT LESS L_FIGBRACKET MBOOL MINT MINUS MOVE MUL_ELEM MUL_MATRIX NL PLUS RBRACKET RIGHT R_FIGBRACKET STL STR SUM TRANSPOSE TRUE VARIABLE VBOOL VINT WALLprogram : stmt_liststmt_list : stmt_list statement\n                    | statementstatement : declaration NL\n                    | assigment NL\n                    | for NL\n                    | if NL\n                    | operation NL\n                    | function NL\n                    | function_call NLdeclaration : type VARIABLE EQ expression\n                       | type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKETdecl_list : L_FIGBRACKET expr_list R_FIGBRACKET\n                     | decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET\n                     | expr_listexpr_list : expr_list COMMA expression\n                     | expressiontype : int\n                | boolint : INT\n               | CINT\n               | VINT\n               | MINT\n               | CVINT\n               | CMINTbool : BOOL\n                | CBOOL\n                | VBOOL\n                | MBOOL\n                | CVBOOL\n                | CMBOOLexpression : variable\n                      | const\n                      | math_expressionmath_expression :  expression PLUS expression\n                            | expression MINUS expression\n                            | expression MUL_MATRIX expression\n                            | expression MUL_ELEM expression\n                            | expression TRANSPOSE\n                            | SUM LBRACKET expression RBRACKET\n                            | expression STL\n                            | expression STR\n                            | DENY expression\n                            | expression AND expression\n                            | expression LESS expression\n                            | expression GREATER expressionconst : TRUE\n                 | FALSE\n                 | INT_DEC\n                 | INT_BINvariable : VARIABLE\n                    | VARIABLE LBRACKET index RBRACKETind_exp : expression\n                   | COLON\n                   | index : expression\n                 | ind_exp COMMA ind_expoperation : MOVE LBRACKET math_expression RBRACKET\n                     | RIGHT\n                     | LEFT\n                     | WALL\n                     | EXITassigment : variable ASSIGMENT expressionfor : FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR\n               | FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list ENDif : IF math_expression BEGINIF NL stmt_list ENDIF\n              | IF math_expression BEGIN NL stmt_list ENDreturn_list : return_list COMMA type VARIABLE\n                        | type VARIABLEfunc_list : func_list COMMA func\n                    | funcfunc : type VARIABLE\n                | type VARIABLE EQ constcall_list : call_list COMMA expression\n                    | expressionfunction : return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END\n                    | type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list ENDfunction_call : VARIABLE\n                         | VARIABLE call_list'
    
_lr_action_items = {'FOR':([0,2,3,37,38,39,40,41,42,43,44,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,37,38,39,40,41,42,43,44,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MOVE':([0,2,3,37,38,39,40,41,42,43,44,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RIGHT':([0,2,3,37,38,39,40,41,42,43,44,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LEFT':([0,2,3,37,38,39,40,41,42,43,44,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WALL':([0,2,3,37,38,39,40,41,42,43,44,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EXIT':([0,2,3,37,38,39,40,41,42,43,44,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FUNCTION':([0,2,3,37,38,39,40,41,42,43,44,64,67,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,90,95,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'VARIABLE':([0,2,3,11,12,14,15,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,90,91,94,95,98,108,109,116,117,125,126,127,136,145,148,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[12,12,-3,45,46,60,46,66,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-2,-4,-5,-6,-7,-8,-9,-10,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,111,112,46,121,46,12,12,132,46,46,12,12,46,12,46,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[25,25,-3,-2,-4,-5,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'CINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[26,26,-3,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'VINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[27,27,-3,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[28,28,-3,-2,-4,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CVINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[29,29,-3,-2,-4,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CMINT':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[30,30,-3,-2,-4,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[31,31,-3,-2,-4,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[32,32,-3,-2,-4,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'VBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[33,33,-3,-2,-4,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'MBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[34,34,-3,-2,-4,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CVBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[35,35,-3,-2,-4,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CMBOOL':([0,2,3,37,38,39,40,41,42,43,44,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[36,36,-3,-2,-4,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'$end':([1,2,3,37,38,39,40,41,42,43,44,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,]),'ENDIF':([3,37,38,39,40,41,42,43,44,126,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,139,]),'END':([3,37,38,39,40,41,42,43,44,127,157,166,172,174,177,180,182,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,140,167,175,179,181,183,184,185,]),'ENDFOR':([3,37,38,39,40,41,42,43,44,171,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,178,]),'NL':([4,5,6,7,8,9,10,12,17,18,19,20,46,47,49,50,51,52,53,54,55,56,77,78,79,84,85,87,88,93,96,97,99,100,101,102,103,104,105,110,124,131,134,139,140,143,152,153,155,161,164,167,169,175,178,179,181,183,184,185,],[38,39,40,41,42,43,44,-82,-59,-60,-61,-62,-51,-83,-75,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-63,108,109,-11,-74,-52,-35,-36,-37,-38,-44,-45,-46,-58,-40,145,-12,-66,-67,156,162,163,165,170,173,-79,176,-77,-64,-65,-78,-81,-76,-80,]),'ASSIGMENT':([12,13,97,],[-51,59,-52,]),'LBRACKET':([12,16,46,57,66,111,121,],[48,63,48,83,92,128,137,]),'TRUE':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,146,148,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'FALSE':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,146,148,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'INT_DEC':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,146,148,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INT_BIN':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,146,148,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'SUM':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,148,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'DENY':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,148,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'EQ':([21,45,60,112,132,],[64,67,86,-68,146,]),'COMMA':([21,45,46,47,48,49,50,51,52,53,54,55,56,70,71,72,77,78,79,84,96,97,99,100,101,102,103,104,105,112,113,115,118,119,120,124,132,133,141,144,147,149,150,158,159,168,],[65,-69,-51,68,-55,-75,-32,-33,-34,-47,-48,-49,-50,-53,98,-54,-39,-41,-42,-43,-74,-52,-35,-36,-37,-38,-44,-45,-46,-68,130,-71,135,136,-17,-40,-72,136,130,-70,-13,-16,130,-73,135,-14,]),'PLUS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,73,-32,-33,-34,-47,-48,-49,-50,-34,73,73,-39,-41,-42,73,73,-34,73,73,-52,73,73,73,73,73,73,73,73,73,73,73,-40,73,73,]),'MINUS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,74,-32,-33,-34,-47,-48,-49,-50,-34,74,74,-39,-41,-42,74,74,-34,74,74,-52,74,74,74,74,74,74,74,74,74,74,74,-40,74,74,]),'MUL_MATRIX':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,75,-32,-33,-34,-47,-48,-49,-50,-34,75,75,-39,-41,-42,75,75,-34,75,75,-52,75,75,75,75,75,75,75,75,75,75,75,-40,75,75,]),'MUL_ELEM':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,76,-32,-33,-34,-47,-48,-49,-50,-34,76,76,-39,-41,-42,76,76,-34,76,76,-52,76,76,76,76,76,76,76,76,76,76,76,-40,76,76,]),'TRANSPOSE':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,77,-32,-33,-34,-47,-48,-49,-50,-34,77,77,-39,-41,-42,77,77,-34,77,77,-52,77,77,77,77,77,77,77,77,77,77,77,-40,77,77,]),'STL':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,78,-32,-33,-34,-47,-48,-49,-50,-34,78,78,-39,-41,-42,78,78,-34,78,78,-52,78,78,78,78,78,78,78,78,78,78,78,-40,78,78,]),'STR':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,79,-32,-33,-34,-47,-48,-49,-50,-34,79,79,-39,-41,-42,79,79,-34,79,79,-52,79,79,79,79,79,79,79,79,79,79,79,-40,79,79,]),'AND':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,80,-32,-33,-34,-47,-48,-49,-50,-34,80,80,-39,-41,-42,80,80,-34,80,80,-52,80,80,80,80,80,80,80,80,80,80,80,-40,80,80,]),'LESS':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,81,-32,-33,-34,-47,-48,-49,-50,-34,81,81,-39,-41,-42,81,81,-34,81,81,-52,81,81,81,81,81,81,81,81,81,81,81,-40,81,81,]),'GREATER':([46,49,50,51,52,53,54,55,56,61,62,70,77,78,79,84,85,89,93,96,97,99,100,101,102,103,104,105,106,107,120,123,124,138,149,],[-51,82,-32,-33,-34,-47,-48,-49,-50,-34,82,82,-39,-41,-42,82,82,-34,82,82,-52,82,82,82,82,82,82,82,82,82,82,82,-40,82,82,]),'RBRACKET':([46,50,51,52,53,54,55,56,69,70,72,77,78,79,84,89,92,97,98,99,100,101,102,103,104,105,106,113,115,122,123,124,128,132,137,141,144,150,158,],[-51,-32,-33,-34,-47,-48,-49,-50,97,-56,-54,-39,-41,-42,-43,110,114,-52,-55,-35,-36,-37,-38,-44,-45,-46,124,129,-71,-57,-53,-40,142,-72,151,154,-70,160,-73,]),'BEGINIF':([46,50,51,52,53,54,55,56,61,77,78,79,84,97,99,100,101,102,103,104,105,124,],[-51,-32,-33,-34,-47,-48,-49,-50,87,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,]),'BEGIN':([46,50,51,52,53,54,55,56,61,77,78,79,84,97,99,100,101,102,103,104,105,114,124,129,138,142,151,154,160,],[-51,-32,-33,-34,-47,-48,-49,-50,88,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,131,-40,143,153,155,161,164,169,]),'COLON':([46,48,50,51,52,53,54,55,56,77,78,79,84,97,98,99,100,101,102,103,104,105,107,124,],[-51,72,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,72,-35,-36,-37,-38,-44,-45,-46,125,-40,]),'R_FIGBRACKET':([46,50,51,52,53,54,55,56,77,78,79,84,97,99,100,101,102,103,104,105,118,119,120,124,133,147,149,159,168,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,134,-15,-17,-40,147,-13,-16,168,-14,]),'BEGINFOR':([46,50,51,52,53,54,55,56,77,78,79,84,97,99,100,101,102,103,104,105,124,138,],[-51,-32,-33,-34,-47,-48,-49,-50,-39,-41,-42,-43,-52,-35,-36,-37,-38,-44,-45,-46,-40,152,]),'L_FIGBRACKET':([67,94,135,148,],[94,117,148,117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,108,109,145,156,162,163,165,170,173,176,],[2,126,127,157,166,171,172,174,177,180,182,]),'statement':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[3,37,3,3,37,37,3,3,37,3,3,3,37,3,37,37,3,37,3,37,37,37,]),'declaration':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assigment':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operation':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[11,11,91,116,11,11,11,11,116,116,116,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variable':([0,2,12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,108,109,117,125,126,127,136,145,148,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[13,13,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,13,13,50,50,13,13,50,13,50,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_list':([0,2,108,109,126,127,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'int':([0,2,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'bool':([0,2,65,92,108,109,126,127,128,130,137,145,156,157,162,163,165,166,170,171,172,173,174,176,177,180,182,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'call_list':([12,],[47,]),'expression':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,148,],[49,62,70,84,85,62,93,96,99,100,101,102,103,104,105,106,107,120,123,120,138,149,120,]),'const':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,146,148,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,158,51,]),'math_expression':([12,15,48,58,59,63,67,68,73,74,75,76,80,81,82,83,86,94,98,117,125,136,148,],[52,61,52,52,52,89,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'index':([48,],[69,]),'ind_exp':([48,98,],[71,122,]),'func_list':([92,128,137,],[113,141,150,]),'func':([92,128,130,137,],[115,115,144,115,]),'decl_list':([94,148,],[118,159,]),'expr_list':([94,117,148,],[119,133,119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',45),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',56),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',57),
  ('statement -> declaration NL','statement',2,'p_statement','parser.py',64),
  ('statement -> assigment NL','statement',2,'p_statement','parser.py',65),
  ('statement -> for NL','statement',2,'p_statement','parser.py',66),
  ('statement -> if NL','statement',2,'p_statement','parser.py',67),
  ('statement -> operation NL','statement',2,'p_statement','parser.py',68),
  ('statement -> function NL','statement',2,'p_statement','parser.py',69),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',70),
  ('declaration -> type VARIABLE EQ expression','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET','declaration',6,'p_declaration','parser.py',75),
  ('decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET','decl_list',3,'p_decl_list','parser.py',86),
  ('decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET','decl_list',5,'p_decl_list','parser.py',87),
  ('decl_list -> expr_list','decl_list',1,'p_decl_list','parser.py',88),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',97),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',98),
  ('type -> int','type',1,'p_type','parser.py',105),
  ('type -> bool','type',1,'p_type','parser.py',106),
  ('int -> INT','int',1,'p_int','parser.py',110),
  ('int -> CINT','int',1,'p_int','parser.py',111),
  ('int -> VINT','int',1,'p_int','parser.py',112),
  ('int -> MINT','int',1,'p_int','parser.py',113),
  ('int -> CVINT','int',1,'p_int','parser.py',114),
  ('int -> CMINT','int',1,'p_int','parser.py',115),
  ('bool -> BOOL','bool',1,'p_bool','parser.py',119),
  ('bool -> CBOOL','bool',1,'p_bool','parser.py',120),
  ('bool -> VBOOL','bool',1,'p_bool','parser.py',121),
  ('bool -> MBOOL','bool',1,'p_bool','parser.py',122),
  ('bool -> CVBOOL','bool',1,'p_bool','parser.py',123),
  ('bool -> CMBOOL','bool',1,'p_bool','parser.py',124),
  ('expression -> variable','expression',1,'p_expression','parser.py',128),
  ('expression -> const','expression',1,'p_expression','parser.py',129),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',130),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',134),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',135),
  ('math_expression -> expression MUL_MATRIX expression','math_expression',3,'p_math_expression','parser.py',136),
  ('math_expression -> expression MUL_ELEM expression','math_expression',3,'p_math_expression','parser.py',137),
  ('math_expression -> expression TRANSPOSE','math_expression',2,'p_math_expression','parser.py',138),
  ('math_expression -> SUM LBRACKET expression RBRACKET','math_expression',4,'p_math_expression','parser.py',139),
  ('math_expression -> expression STL','math_expression',2,'p_math_expression','parser.py',140),
  ('math_expression -> expression STR','math_expression',2,'p_math_expression','parser.py',141),
  ('math_expression -> DENY expression','math_expression',2,'p_math_expression','parser.py',142),
  ('math_expression -> expression AND expression','math_expression',3,'p_math_expression','parser.py',143),
  ('math_expression -> expression LESS expression','math_expression',3,'p_math_expression','parser.py',144),
  ('math_expression -> expression GREATER expression','math_expression',3,'p_math_expression','parser.py',145),
  ('const -> TRUE','const',1,'p_const','parser.py',152),
  ('const -> FALSE','const',1,'p_const','parser.py',153),
  ('const -> INT_DEC','const',1,'p_const','parser.py',154),
  ('const -> INT_BIN','const',1,'p_const','parser.py',155),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',159),
  ('variable -> VARIABLE LBRACKET index RBRACKET','variable',4,'p_variable','parser.py',160),
  ('ind_exp -> expression','ind_exp',1,'p_ind_exp','parser.py',167),
  ('ind_exp -> COLON','ind_exp',1,'p_ind_exp','parser.py',168),
  ('ind_exp -> <empty>','ind_exp',0,'p_ind_exp','parser.py',169),
  ('index -> expression','index',1,'p_index','parser.py',173),
  ('index -> ind_exp COMMA ind_exp','index',3,'p_index','parser.py',174),
  ('operation -> MOVE LBRACKET math_expression RBRACKET','operation',4,'p_operation','parser.py',181),
  ('operation -> RIGHT','operation',1,'p_operation','parser.py',182),
  ('operation -> LEFT','operation',1,'p_operation','parser.py',183),
  ('operation -> WALL','operation',1,'p_operation','parser.py',184),
  ('operation -> EXIT','operation',1,'p_operation','parser.py',185),
  ('assigment -> variable ASSIGMENT expression','assigment',3,'p_assigment','parser.py',192),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR','for',10,'p_for','parser.py',196),
  ('for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END','for',10,'p_for','parser.py',197),
  ('if -> IF math_expression BEGINIF NL stmt_list ENDIF','if',6,'p_if','parser.py',203),
  ('if -> IF math_expression BEGIN NL stmt_list END','if',6,'p_if','parser.py',204),
  ('return_list -> return_list COMMA type VARIABLE','return_list',4,'p_return_list','parser.py',208),
  ('return_list -> type VARIABLE','return_list',2,'p_return_list','parser.py',209),
  ('func_list -> func_list COMMA func','func_list',3,'p_func_list','parser.py',216),
  ('func_list -> func','func_list',1,'p_func_list','parser.py',217),
  ('func -> type VARIABLE','func',2,'p_func','parser.py',224),
  ('func -> type VARIABLE EQ const','func',4,'p_func','parser.py',225),
  ('call_list -> call_list COMMA expression','call_list',3,'p_call_list','parser.py',232),
  ('call_list -> expression','call_list',1,'p_call_list','parser.py',233),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',240),
  ('function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',9,'p_function','parser.py',241),
  ('function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',10,'p_function','parser.py',242),
  ('function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',8,'p_function','parser.py',243),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END','function',12,'p_function','parser.py',244),
  ('function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END','function',11,'p_function','parser.py',245),
  ('function_call -> VARIABLE','function_call',1,'p_function_call','parser.py',273),
  ('function_call -> VARIABLE call_list','function_call',2,'p_function_call','parser.py',274),
]
