Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt_list statement
Rule 3     stmt_list -> statement
Rule 4     statement -> declaration NL
Rule 5     statement -> assignment NL
Rule 6     statement -> for NL
Rule 7     statement -> if NL
Rule 8     statement -> operation NL
Rule 9     statement -> function NL
Rule 10    statement -> function_call NL
Rule 11    declaration -> type VARIABLE EQ expression
Rule 12    declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
Rule 13    decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET
Rule 14    decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
Rule 15    decl_list -> expr_list
Rule 16    expr_list -> expr_list COMMA expression
Rule 17    expr_list -> expression
Rule 18    type -> int
Rule 19    type -> bool
Rule 20    int -> INT
Rule 21    int -> CINT
Rule 22    int -> VINT
Rule 23    int -> MINT
Rule 24    int -> CVINT
Rule 25    int -> CMINT
Rule 26    bool -> BOOL
Rule 27    bool -> CBOOL
Rule 28    bool -> VBOOL
Rule 29    bool -> MBOOL
Rule 30    bool -> CVBOOL
Rule 31    bool -> CMBOOL
Rule 32    func_list -> func_list COMMA func
Rule 33    func_list -> func
Rule 34    func -> type VARIABLE
Rule 35    func -> type VARIABLE EQ const
Rule 36    func -> type VARIABLE EQ decl_list
Rule 37    func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
Rule 38    expression -> math_expression
Rule 39    expression -> const
Rule 40    expression -> variable
Rule 41    math_expression -> expression PLUS expression
Rule 42    math_expression -> expression MINUS expression
Rule 43    math_expression -> expression MUL_MATRIX expression
Rule 44    math_expression -> expression MUL_ELEM expression
Rule 45    math_expression -> expression TRANSPOSE
Rule 46    math_expression -> SUM LBRACKET expression RBRACKET
Rule 47    math_expression -> expression STL
Rule 48    math_expression -> expression STR
Rule 49    math_expression -> DENY expression
Rule 50    math_expression -> expression AND expression
Rule 51    math_expression -> expression LESS expression
Rule 52    math_expression -> expression GREATER expression
Rule 53    const -> TRUE
Rule 54    const -> FALSE
Rule 55    const -> INT_DEC
Rule 56    const -> INT_BIN
Rule 57    variable -> VARIABLE
Rule 58    variable -> VARIABLE LBRACKET index RBRACKET
Rule 59    ind -> COMMA
Rule 60    ind -> COMMA COLON
Rule 61    ind -> COLON COMMA
Rule 62    index -> expression
Rule 63    index -> expr_list
Rule 64    index -> expr_list ind
Rule 65    index -> ind expr_list
Rule 66    index -> decl_list ind
Rule 67    index -> ind decl_list
Rule 68    index -> decl_list
Rule 69    operation -> MOVE LBRACKET math_expression RBRACKET
Rule 70    operation -> RIGHT
Rule 71    operation -> LEFT
Rule 72    operation -> WALL
Rule 73    operation -> EXIT
Rule 74    assignment -> variable ASSIGNMENT expression
Rule 75    assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
Rule 76    for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
Rule 77    for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
Rule 78    if -> IF math_expression BEGINIF NL stmt_list ENDIF
Rule 79    if -> IF math_expression BEGIN NL stmt_list END
Rule 80    return_list -> return_list COMMA type VARIABLE
Rule 81    return_list -> type VARIABLE
Rule 82    call_list -> call_list COMMA expression
Rule 83    call_list -> expression
Rule 84    function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 85    function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 86    function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 87    function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 88    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 89    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 90    function_call -> VARIABLE
Rule 91    function_call -> VARIABLE call_list
Rule 92    function_call -> ret_list ASSIGNMENT VARIABLE call_list
Rule 93    function_call -> ret_list ASSIGNMENT VARIABLE
Rule 94    function_call -> variable ASSIGNMENT VARIABLE call_list
Rule 95    ret_list -> variable
Rule 96    ret_list -> ret_list COMMA variable

Terminals, with rules where they appear

AND                  : 50
ASSIGNMENT           : 74 75 92 93 94
BEGIN                : 77 79 84 85 86 87 88 89
BEGINFOR             : 76
BEGINIF              : 78
BOOL                 : 26
CBOOL                : 27
CINT                 : 21
CMBOOL               : 31
CMINT                : 25
COLON                : 60 61 76 77
COMMA                : 14 16 32 59 60 61 80 82 96
CVBOOL               : 30
CVINT                : 24
DENY                 : 49
END                  : 77 79 84 85 86 87 88 89
ENDFOR               : 76
ENDIF                : 78
EQ                   : 11 12 35 36 37 76 77 84 86 88 89
EXIT                 : 73
FALSE                : 54
FOR                  : 76 77
FUNCTION             : 84 85 86 87 88 89
GREATER              : 52
IF                   : 78 79
INT                  : 20
INT_BIN              : 56
INT_DEC              : 55
LBRACKET             : 46 58 69 84 85 86 87 88 89
LEFT                 : 71
LESS                 : 51
L_FIGBRACKET         : 12 13 14 37 75
MBOOL                : 29
MINT                 : 23
MINUS                : 42
MOVE                 : 69
MUL_ELEM             : 44
MUL_MATRIX           : 43
NL                   : 4 5 6 7 8 9 10 76 77 78 79 84 85 86 87 88 89
PLUS                 : 41
RBRACKET             : 46 58 69 84 85 86 87 88 89
RIGHT                : 70
R_FIGBRACKET         : 12 13 14 37 75
STL                  : 47
STR                  : 48
SUM                  : 46
TRANSPOSE            : 45
TRUE                 : 53
VARIABLE             : 11 12 34 35 36 37 57 58 76 77 80 81 84 85 86 87 88 88 89 89 90 91 92 93 94
VBOOL                : 28
VINT                 : 22
WALL                 : 72
error                : 

Nonterminals, with rules where they appear

assignment           : 5
bool                 : 19
call_list            : 82 91 92 94
const                : 35 39
decl_list            : 12 14 14 36 37 66 67 68 75
declaration          : 4
expr_list            : 13 15 16 63 64 65
expression           : 11 16 17 41 41 42 42 43 43 44 44 45 46 47 48 49 50 50 51 51 52 52 62 74 76 76 77 77 82 83
for                  : 6
func                 : 32 33
func_list            : 32 84 85 88
function             : 9
function_call        : 10
if                   : 7
ind                  : 64 65 66 67
index                : 58
int                  : 18
math_expression      : 38 69 78 79
operation            : 8
program              : 0
ret_list             : 92 93 96
return_list          : 80 84 86
statement            : 2 3
stmt_list            : 1 2 76 77 78 79 84 85 86 87 88 89
type                 : 11 12 34 35 36 37 80 81 88 89
variable             : 40 74 75 94 95 96

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    $end            reduce using rule 1 (program -> stmt_list .)
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 3

    (3) stmt_list -> statement .

    FOR             reduce using rule 3 (stmt_list -> statement .)
    IF              reduce using rule 3 (stmt_list -> statement .)
    MOVE            reduce using rule 3 (stmt_list -> statement .)
    RIGHT           reduce using rule 3 (stmt_list -> statement .)
    LEFT            reduce using rule 3 (stmt_list -> statement .)
    WALL            reduce using rule 3 (stmt_list -> statement .)
    EXIT            reduce using rule 3 (stmt_list -> statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> statement .)
    VARIABLE        reduce using rule 3 (stmt_list -> statement .)
    INT             reduce using rule 3 (stmt_list -> statement .)
    CINT            reduce using rule 3 (stmt_list -> statement .)
    VINT            reduce using rule 3 (stmt_list -> statement .)
    MINT            reduce using rule 3 (stmt_list -> statement .)
    CVINT           reduce using rule 3 (stmt_list -> statement .)
    CMINT           reduce using rule 3 (stmt_list -> statement .)
    BOOL            reduce using rule 3 (stmt_list -> statement .)
    CBOOL           reduce using rule 3 (stmt_list -> statement .)
    VBOOL           reduce using rule 3 (stmt_list -> statement .)
    MBOOL           reduce using rule 3 (stmt_list -> statement .)
    CVBOOL          reduce using rule 3 (stmt_list -> statement .)
    CMBOOL          reduce using rule 3 (stmt_list -> statement .)
    $end            reduce using rule 3 (stmt_list -> statement .)
    ENDIF           reduce using rule 3 (stmt_list -> statement .)
    END             reduce using rule 3 (stmt_list -> statement .)
    ENDFOR          reduce using rule 3 (stmt_list -> statement .)


state 4

    (4) statement -> declaration . NL

    NL              shift and go to state 39


state 5

    (5) statement -> assignment . NL

    NL              shift and go to state 40


state 6

    (6) statement -> for . NL

    NL              shift and go to state 41


state 7

    (7) statement -> if . NL

    NL              shift and go to state 42


state 8

    (8) statement -> operation . NL

    NL              shift and go to state 43


state 9

    (9) statement -> function . NL

    NL              shift and go to state 44


state 10

    (10) statement -> function_call . NL

    NL              shift and go to state 45


state 11

    (11) declaration -> type . VARIABLE EQ expression
    (12) declaration -> type . VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (88) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) return_list -> type . VARIABLE

    VARIABLE        shift and go to state 46


state 12

    (90) function_call -> VARIABLE .
    (91) function_call -> VARIABLE . call_list
    (57) variable -> VARIABLE .
    (58) variable -> VARIABLE . LBRACKET index RBRACKET
    (82) call_list -> . call_list COMMA expression
    (83) call_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    NL              reduce using rule 90 (function_call -> VARIABLE .)
    ASSIGNMENT      reduce using rule 57 (variable -> VARIABLE .)
    COMMA           reduce using rule 57 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 49
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    call_list                      shift and go to state 48
    expression                     shift and go to state 50
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 13

    (74) assignment -> variable . ASSIGNMENT expression
    (75) assignment -> variable . ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (94) function_call -> variable . ASSIGNMENT VARIABLE call_list
    (95) ret_list -> variable .

  ! shift/reduce conflict for ASSIGNMENT resolved as shift
    ASSIGNMENT      shift and go to state 60
    COMMA           reduce using rule 95 (ret_list -> variable .)

  ! ASSIGNMENT      [ reduce using rule 95 (ret_list -> variable .) ]


state 14

    (76) for -> FOR . VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> FOR . VARIABLE EQ expression COLON expression BEGIN NL stmt_list END

    VARIABLE        shift and go to state 61


state 15

    (78) if -> IF . math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> IF . math_expression BEGIN NL stmt_list END
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    math_expression                shift and go to state 62
    expression                     shift and go to state 63
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 16

    (69) operation -> MOVE . LBRACKET math_expression RBRACKET

    LBRACKET        shift and go to state 64


state 17

    (70) operation -> RIGHT .

    NL              reduce using rule 70 (operation -> RIGHT .)


state 18

    (71) operation -> LEFT .

    NL              reduce using rule 71 (operation -> LEFT .)


state 19

    (72) operation -> WALL .

    NL              reduce using rule 72 (operation -> WALL .)


state 20

    (73) operation -> EXIT .

    NL              reduce using rule 73 (operation -> EXIT .)


state 21

    (84) function -> return_list . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> return_list . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) return_list -> return_list . COMMA type VARIABLE

    EQ              shift and go to state 65
    COMMA           shift and go to state 66


state 22

    (85) function -> FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (87) function -> FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 67


state 23

    (92) function_call -> ret_list . ASSIGNMENT VARIABLE call_list
    (93) function_call -> ret_list . ASSIGNMENT VARIABLE
    (96) ret_list -> ret_list . COMMA variable

    ASSIGNMENT      shift and go to state 68
    COMMA           shift and go to state 69


state 24

    (18) type -> int .

    VARIABLE        reduce using rule 18 (type -> int .)


state 25

    (19) type -> bool .

    VARIABLE        reduce using rule 19 (type -> bool .)


state 26

    (20) int -> INT .

    VARIABLE        reduce using rule 20 (int -> INT .)


state 27

    (21) int -> CINT .

    VARIABLE        reduce using rule 21 (int -> CINT .)


state 28

    (22) int -> VINT .

    VARIABLE        reduce using rule 22 (int -> VINT .)


state 29

    (23) int -> MINT .

    VARIABLE        reduce using rule 23 (int -> MINT .)


state 30

    (24) int -> CVINT .

    VARIABLE        reduce using rule 24 (int -> CVINT .)


state 31

    (25) int -> CMINT .

    VARIABLE        reduce using rule 25 (int -> CMINT .)


state 32

    (26) bool -> BOOL .

    VARIABLE        reduce using rule 26 (bool -> BOOL .)


state 33

    (27) bool -> CBOOL .

    VARIABLE        reduce using rule 27 (bool -> CBOOL .)


state 34

    (28) bool -> VBOOL .

    VARIABLE        reduce using rule 28 (bool -> VBOOL .)


state 35

    (29) bool -> MBOOL .

    VARIABLE        reduce using rule 29 (bool -> MBOOL .)


state 36

    (30) bool -> CVBOOL .

    VARIABLE        reduce using rule 30 (bool -> CVBOOL .)


state 37

    (31) bool -> CMBOOL .

    VARIABLE        reduce using rule 31 (bool -> CMBOOL .)


state 38

    (2) stmt_list -> stmt_list statement .

    FOR             reduce using rule 2 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 2 (stmt_list -> stmt_list statement .)
    MOVE            reduce using rule 2 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    WALL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    EXIT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 2 (stmt_list -> stmt_list statement .)
    VARIABLE        reduce using rule 2 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 2 (stmt_list -> stmt_list statement .)
    CINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    VINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    MINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    VBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    MBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDIF           reduce using rule 2 (stmt_list -> stmt_list statement .)
    END             reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDFOR          reduce using rule 2 (stmt_list -> stmt_list statement .)


state 39

    (4) statement -> declaration NL .

    FOR             reduce using rule 4 (statement -> declaration NL .)
    IF              reduce using rule 4 (statement -> declaration NL .)
    MOVE            reduce using rule 4 (statement -> declaration NL .)
    RIGHT           reduce using rule 4 (statement -> declaration NL .)
    LEFT            reduce using rule 4 (statement -> declaration NL .)
    WALL            reduce using rule 4 (statement -> declaration NL .)
    EXIT            reduce using rule 4 (statement -> declaration NL .)
    FUNCTION        reduce using rule 4 (statement -> declaration NL .)
    VARIABLE        reduce using rule 4 (statement -> declaration NL .)
    INT             reduce using rule 4 (statement -> declaration NL .)
    CINT            reduce using rule 4 (statement -> declaration NL .)
    VINT            reduce using rule 4 (statement -> declaration NL .)
    MINT            reduce using rule 4 (statement -> declaration NL .)
    CVINT           reduce using rule 4 (statement -> declaration NL .)
    CMINT           reduce using rule 4 (statement -> declaration NL .)
    BOOL            reduce using rule 4 (statement -> declaration NL .)
    CBOOL           reduce using rule 4 (statement -> declaration NL .)
    VBOOL           reduce using rule 4 (statement -> declaration NL .)
    MBOOL           reduce using rule 4 (statement -> declaration NL .)
    CVBOOL          reduce using rule 4 (statement -> declaration NL .)
    CMBOOL          reduce using rule 4 (statement -> declaration NL .)
    $end            reduce using rule 4 (statement -> declaration NL .)
    ENDIF           reduce using rule 4 (statement -> declaration NL .)
    END             reduce using rule 4 (statement -> declaration NL .)
    ENDFOR          reduce using rule 4 (statement -> declaration NL .)


state 40

    (5) statement -> assignment NL .

    FOR             reduce using rule 5 (statement -> assignment NL .)
    IF              reduce using rule 5 (statement -> assignment NL .)
    MOVE            reduce using rule 5 (statement -> assignment NL .)
    RIGHT           reduce using rule 5 (statement -> assignment NL .)
    LEFT            reduce using rule 5 (statement -> assignment NL .)
    WALL            reduce using rule 5 (statement -> assignment NL .)
    EXIT            reduce using rule 5 (statement -> assignment NL .)
    FUNCTION        reduce using rule 5 (statement -> assignment NL .)
    VARIABLE        reduce using rule 5 (statement -> assignment NL .)
    INT             reduce using rule 5 (statement -> assignment NL .)
    CINT            reduce using rule 5 (statement -> assignment NL .)
    VINT            reduce using rule 5 (statement -> assignment NL .)
    MINT            reduce using rule 5 (statement -> assignment NL .)
    CVINT           reduce using rule 5 (statement -> assignment NL .)
    CMINT           reduce using rule 5 (statement -> assignment NL .)
    BOOL            reduce using rule 5 (statement -> assignment NL .)
    CBOOL           reduce using rule 5 (statement -> assignment NL .)
    VBOOL           reduce using rule 5 (statement -> assignment NL .)
    MBOOL           reduce using rule 5 (statement -> assignment NL .)
    CVBOOL          reduce using rule 5 (statement -> assignment NL .)
    CMBOOL          reduce using rule 5 (statement -> assignment NL .)
    $end            reduce using rule 5 (statement -> assignment NL .)
    ENDIF           reduce using rule 5 (statement -> assignment NL .)
    END             reduce using rule 5 (statement -> assignment NL .)
    ENDFOR          reduce using rule 5 (statement -> assignment NL .)


state 41

    (6) statement -> for NL .

    FOR             reduce using rule 6 (statement -> for NL .)
    IF              reduce using rule 6 (statement -> for NL .)
    MOVE            reduce using rule 6 (statement -> for NL .)
    RIGHT           reduce using rule 6 (statement -> for NL .)
    LEFT            reduce using rule 6 (statement -> for NL .)
    WALL            reduce using rule 6 (statement -> for NL .)
    EXIT            reduce using rule 6 (statement -> for NL .)
    FUNCTION        reduce using rule 6 (statement -> for NL .)
    VARIABLE        reduce using rule 6 (statement -> for NL .)
    INT             reduce using rule 6 (statement -> for NL .)
    CINT            reduce using rule 6 (statement -> for NL .)
    VINT            reduce using rule 6 (statement -> for NL .)
    MINT            reduce using rule 6 (statement -> for NL .)
    CVINT           reduce using rule 6 (statement -> for NL .)
    CMINT           reduce using rule 6 (statement -> for NL .)
    BOOL            reduce using rule 6 (statement -> for NL .)
    CBOOL           reduce using rule 6 (statement -> for NL .)
    VBOOL           reduce using rule 6 (statement -> for NL .)
    MBOOL           reduce using rule 6 (statement -> for NL .)
    CVBOOL          reduce using rule 6 (statement -> for NL .)
    CMBOOL          reduce using rule 6 (statement -> for NL .)
    $end            reduce using rule 6 (statement -> for NL .)
    ENDIF           reduce using rule 6 (statement -> for NL .)
    END             reduce using rule 6 (statement -> for NL .)
    ENDFOR          reduce using rule 6 (statement -> for NL .)


state 42

    (7) statement -> if NL .

    FOR             reduce using rule 7 (statement -> if NL .)
    IF              reduce using rule 7 (statement -> if NL .)
    MOVE            reduce using rule 7 (statement -> if NL .)
    RIGHT           reduce using rule 7 (statement -> if NL .)
    LEFT            reduce using rule 7 (statement -> if NL .)
    WALL            reduce using rule 7 (statement -> if NL .)
    EXIT            reduce using rule 7 (statement -> if NL .)
    FUNCTION        reduce using rule 7 (statement -> if NL .)
    VARIABLE        reduce using rule 7 (statement -> if NL .)
    INT             reduce using rule 7 (statement -> if NL .)
    CINT            reduce using rule 7 (statement -> if NL .)
    VINT            reduce using rule 7 (statement -> if NL .)
    MINT            reduce using rule 7 (statement -> if NL .)
    CVINT           reduce using rule 7 (statement -> if NL .)
    CMINT           reduce using rule 7 (statement -> if NL .)
    BOOL            reduce using rule 7 (statement -> if NL .)
    CBOOL           reduce using rule 7 (statement -> if NL .)
    VBOOL           reduce using rule 7 (statement -> if NL .)
    MBOOL           reduce using rule 7 (statement -> if NL .)
    CVBOOL          reduce using rule 7 (statement -> if NL .)
    CMBOOL          reduce using rule 7 (statement -> if NL .)
    $end            reduce using rule 7 (statement -> if NL .)
    ENDIF           reduce using rule 7 (statement -> if NL .)
    END             reduce using rule 7 (statement -> if NL .)
    ENDFOR          reduce using rule 7 (statement -> if NL .)


state 43

    (8) statement -> operation NL .

    FOR             reduce using rule 8 (statement -> operation NL .)
    IF              reduce using rule 8 (statement -> operation NL .)
    MOVE            reduce using rule 8 (statement -> operation NL .)
    RIGHT           reduce using rule 8 (statement -> operation NL .)
    LEFT            reduce using rule 8 (statement -> operation NL .)
    WALL            reduce using rule 8 (statement -> operation NL .)
    EXIT            reduce using rule 8 (statement -> operation NL .)
    FUNCTION        reduce using rule 8 (statement -> operation NL .)
    VARIABLE        reduce using rule 8 (statement -> operation NL .)
    INT             reduce using rule 8 (statement -> operation NL .)
    CINT            reduce using rule 8 (statement -> operation NL .)
    VINT            reduce using rule 8 (statement -> operation NL .)
    MINT            reduce using rule 8 (statement -> operation NL .)
    CVINT           reduce using rule 8 (statement -> operation NL .)
    CMINT           reduce using rule 8 (statement -> operation NL .)
    BOOL            reduce using rule 8 (statement -> operation NL .)
    CBOOL           reduce using rule 8 (statement -> operation NL .)
    VBOOL           reduce using rule 8 (statement -> operation NL .)
    MBOOL           reduce using rule 8 (statement -> operation NL .)
    CVBOOL          reduce using rule 8 (statement -> operation NL .)
    CMBOOL          reduce using rule 8 (statement -> operation NL .)
    $end            reduce using rule 8 (statement -> operation NL .)
    ENDIF           reduce using rule 8 (statement -> operation NL .)
    END             reduce using rule 8 (statement -> operation NL .)
    ENDFOR          reduce using rule 8 (statement -> operation NL .)


state 44

    (9) statement -> function NL .

    FOR             reduce using rule 9 (statement -> function NL .)
    IF              reduce using rule 9 (statement -> function NL .)
    MOVE            reduce using rule 9 (statement -> function NL .)
    RIGHT           reduce using rule 9 (statement -> function NL .)
    LEFT            reduce using rule 9 (statement -> function NL .)
    WALL            reduce using rule 9 (statement -> function NL .)
    EXIT            reduce using rule 9 (statement -> function NL .)
    FUNCTION        reduce using rule 9 (statement -> function NL .)
    VARIABLE        reduce using rule 9 (statement -> function NL .)
    INT             reduce using rule 9 (statement -> function NL .)
    CINT            reduce using rule 9 (statement -> function NL .)
    VINT            reduce using rule 9 (statement -> function NL .)
    MINT            reduce using rule 9 (statement -> function NL .)
    CVINT           reduce using rule 9 (statement -> function NL .)
    CMINT           reduce using rule 9 (statement -> function NL .)
    BOOL            reduce using rule 9 (statement -> function NL .)
    CBOOL           reduce using rule 9 (statement -> function NL .)
    VBOOL           reduce using rule 9 (statement -> function NL .)
    MBOOL           reduce using rule 9 (statement -> function NL .)
    CVBOOL          reduce using rule 9 (statement -> function NL .)
    CMBOOL          reduce using rule 9 (statement -> function NL .)
    $end            reduce using rule 9 (statement -> function NL .)
    ENDIF           reduce using rule 9 (statement -> function NL .)
    END             reduce using rule 9 (statement -> function NL .)
    ENDFOR          reduce using rule 9 (statement -> function NL .)


state 45

    (10) statement -> function_call NL .

    FOR             reduce using rule 10 (statement -> function_call NL .)
    IF              reduce using rule 10 (statement -> function_call NL .)
    MOVE            reduce using rule 10 (statement -> function_call NL .)
    RIGHT           reduce using rule 10 (statement -> function_call NL .)
    LEFT            reduce using rule 10 (statement -> function_call NL .)
    WALL            reduce using rule 10 (statement -> function_call NL .)
    EXIT            reduce using rule 10 (statement -> function_call NL .)
    FUNCTION        reduce using rule 10 (statement -> function_call NL .)
    VARIABLE        reduce using rule 10 (statement -> function_call NL .)
    INT             reduce using rule 10 (statement -> function_call NL .)
    CINT            reduce using rule 10 (statement -> function_call NL .)
    VINT            reduce using rule 10 (statement -> function_call NL .)
    MINT            reduce using rule 10 (statement -> function_call NL .)
    CVINT           reduce using rule 10 (statement -> function_call NL .)
    CMINT           reduce using rule 10 (statement -> function_call NL .)
    BOOL            reduce using rule 10 (statement -> function_call NL .)
    CBOOL           reduce using rule 10 (statement -> function_call NL .)
    VBOOL           reduce using rule 10 (statement -> function_call NL .)
    MBOOL           reduce using rule 10 (statement -> function_call NL .)
    CVBOOL          reduce using rule 10 (statement -> function_call NL .)
    CMBOOL          reduce using rule 10 (statement -> function_call NL .)
    $end            reduce using rule 10 (statement -> function_call NL .)
    ENDIF           reduce using rule 10 (statement -> function_call NL .)
    END             reduce using rule 10 (statement -> function_call NL .)
    ENDFOR          reduce using rule 10 (statement -> function_call NL .)


state 46

    (11) declaration -> type VARIABLE . EQ expression
    (12) declaration -> type VARIABLE . EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (88) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) return_list -> type VARIABLE .

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 70
    COMMA           reduce using rule 81 (return_list -> type VARIABLE .)

  ! EQ              [ reduce using rule 81 (return_list -> type VARIABLE .) ]


state 47

    (57) variable -> VARIABLE .
    (58) variable -> VARIABLE . LBRACKET index RBRACKET

    PLUS            reduce using rule 57 (variable -> VARIABLE .)
    MINUS           reduce using rule 57 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 57 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 57 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 57 (variable -> VARIABLE .)
    STL             reduce using rule 57 (variable -> VARIABLE .)
    STR             reduce using rule 57 (variable -> VARIABLE .)
    AND             reduce using rule 57 (variable -> VARIABLE .)
    LESS            reduce using rule 57 (variable -> VARIABLE .)
    GREATER         reduce using rule 57 (variable -> VARIABLE .)
    COMMA           reduce using rule 57 (variable -> VARIABLE .)
    NL              reduce using rule 57 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 57 (variable -> VARIABLE .)
    COLON           reduce using rule 57 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 57 (variable -> VARIABLE .)
    BEGIN           reduce using rule 57 (variable -> VARIABLE .)
    R_FIGBRACKET    reduce using rule 57 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 57 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 57 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 49


state 48

    (91) function_call -> VARIABLE call_list .
    (82) call_list -> call_list . COMMA expression

    NL              reduce using rule 91 (function_call -> VARIABLE call_list .)
    COMMA           shift and go to state 71


state 49

    (58) variable -> VARIABLE LBRACKET . index RBRACKET
    (62) index -> . expression
    (63) index -> . expr_list
    (64) index -> . expr_list ind
    (65) index -> . ind expr_list
    (66) index -> . decl_list ind
    (67) index -> . ind decl_list
    (68) index -> . decl_list
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (59) ind -> . COMMA
    (60) ind -> . COMMA COLON
    (61) ind -> . COLON COMMA
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    COMMA           shift and go to state 77
    COLON           shift and go to state 78
    L_FIGBRACKET    shift and go to state 79
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    index                          shift and go to state 72
    expression                     shift and go to state 73
    expr_list                      shift and go to state 74
    ind                            shift and go to state 75
    decl_list                      shift and go to state 76
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 50

    (83) call_list -> expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 83 (call_list -> expression .)
    NL              reduce using rule 83 (call_list -> expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 51

    (38) expression -> math_expression .

    PLUS            reduce using rule 38 (expression -> math_expression .)
    MINUS           reduce using rule 38 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 38 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 38 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 38 (expression -> math_expression .)
    STL             reduce using rule 38 (expression -> math_expression .)
    STR             reduce using rule 38 (expression -> math_expression .)
    AND             reduce using rule 38 (expression -> math_expression .)
    LESS            reduce using rule 38 (expression -> math_expression .)
    GREATER         reduce using rule 38 (expression -> math_expression .)
    COMMA           reduce using rule 38 (expression -> math_expression .)
    NL              reduce using rule 38 (expression -> math_expression .)
    RBRACKET        reduce using rule 38 (expression -> math_expression .)
    COLON           reduce using rule 38 (expression -> math_expression .)
    BEGINIF         reduce using rule 38 (expression -> math_expression .)
    BEGIN           reduce using rule 38 (expression -> math_expression .)
    R_FIGBRACKET    reduce using rule 38 (expression -> math_expression .)
    BEGINFOR        reduce using rule 38 (expression -> math_expression .)


state 52

    (39) expression -> const .

    PLUS            reduce using rule 39 (expression -> const .)
    MINUS           reduce using rule 39 (expression -> const .)
    MUL_MATRIX      reduce using rule 39 (expression -> const .)
    MUL_ELEM        reduce using rule 39 (expression -> const .)
    TRANSPOSE       reduce using rule 39 (expression -> const .)
    STL             reduce using rule 39 (expression -> const .)
    STR             reduce using rule 39 (expression -> const .)
    AND             reduce using rule 39 (expression -> const .)
    LESS            reduce using rule 39 (expression -> const .)
    GREATER         reduce using rule 39 (expression -> const .)
    COMMA           reduce using rule 39 (expression -> const .)
    NL              reduce using rule 39 (expression -> const .)
    RBRACKET        reduce using rule 39 (expression -> const .)
    COLON           reduce using rule 39 (expression -> const .)
    BEGINIF         reduce using rule 39 (expression -> const .)
    BEGIN           reduce using rule 39 (expression -> const .)
    R_FIGBRACKET    reduce using rule 39 (expression -> const .)
    BEGINFOR        reduce using rule 39 (expression -> const .)


state 53

    (40) expression -> variable .

    PLUS            reduce using rule 40 (expression -> variable .)
    MINUS           reduce using rule 40 (expression -> variable .)
    MUL_MATRIX      reduce using rule 40 (expression -> variable .)
    MUL_ELEM        reduce using rule 40 (expression -> variable .)
    TRANSPOSE       reduce using rule 40 (expression -> variable .)
    STL             reduce using rule 40 (expression -> variable .)
    STR             reduce using rule 40 (expression -> variable .)
    AND             reduce using rule 40 (expression -> variable .)
    LESS            reduce using rule 40 (expression -> variable .)
    GREATER         reduce using rule 40 (expression -> variable .)
    COMMA           reduce using rule 40 (expression -> variable .)
    NL              reduce using rule 40 (expression -> variable .)
    RBRACKET        reduce using rule 40 (expression -> variable .)
    COLON           reduce using rule 40 (expression -> variable .)
    BEGINIF         reduce using rule 40 (expression -> variable .)
    BEGIN           reduce using rule 40 (expression -> variable .)
    R_FIGBRACKET    reduce using rule 40 (expression -> variable .)
    BEGINFOR        reduce using rule 40 (expression -> variable .)


state 54

    (46) math_expression -> SUM . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 90


state 55

    (49) math_expression -> DENY . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 91
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 56

    (53) const -> TRUE .

    PLUS            reduce using rule 53 (const -> TRUE .)
    MINUS           reduce using rule 53 (const -> TRUE .)
    MUL_MATRIX      reduce using rule 53 (const -> TRUE .)
    MUL_ELEM        reduce using rule 53 (const -> TRUE .)
    TRANSPOSE       reduce using rule 53 (const -> TRUE .)
    STL             reduce using rule 53 (const -> TRUE .)
    STR             reduce using rule 53 (const -> TRUE .)
    AND             reduce using rule 53 (const -> TRUE .)
    LESS            reduce using rule 53 (const -> TRUE .)
    GREATER         reduce using rule 53 (const -> TRUE .)
    COMMA           reduce using rule 53 (const -> TRUE .)
    NL              reduce using rule 53 (const -> TRUE .)
    RBRACKET        reduce using rule 53 (const -> TRUE .)
    COLON           reduce using rule 53 (const -> TRUE .)
    BEGINIF         reduce using rule 53 (const -> TRUE .)
    BEGIN           reduce using rule 53 (const -> TRUE .)
    R_FIGBRACKET    reduce using rule 53 (const -> TRUE .)
    BEGINFOR        reduce using rule 53 (const -> TRUE .)


state 57

    (54) const -> FALSE .

    PLUS            reduce using rule 54 (const -> FALSE .)
    MINUS           reduce using rule 54 (const -> FALSE .)
    MUL_MATRIX      reduce using rule 54 (const -> FALSE .)
    MUL_ELEM        reduce using rule 54 (const -> FALSE .)
    TRANSPOSE       reduce using rule 54 (const -> FALSE .)
    STL             reduce using rule 54 (const -> FALSE .)
    STR             reduce using rule 54 (const -> FALSE .)
    AND             reduce using rule 54 (const -> FALSE .)
    LESS            reduce using rule 54 (const -> FALSE .)
    GREATER         reduce using rule 54 (const -> FALSE .)
    COMMA           reduce using rule 54 (const -> FALSE .)
    NL              reduce using rule 54 (const -> FALSE .)
    RBRACKET        reduce using rule 54 (const -> FALSE .)
    COLON           reduce using rule 54 (const -> FALSE .)
    BEGINIF         reduce using rule 54 (const -> FALSE .)
    BEGIN           reduce using rule 54 (const -> FALSE .)
    R_FIGBRACKET    reduce using rule 54 (const -> FALSE .)
    BEGINFOR        reduce using rule 54 (const -> FALSE .)


state 58

    (55) const -> INT_DEC .

    PLUS            reduce using rule 55 (const -> INT_DEC .)
    MINUS           reduce using rule 55 (const -> INT_DEC .)
    MUL_MATRIX      reduce using rule 55 (const -> INT_DEC .)
    MUL_ELEM        reduce using rule 55 (const -> INT_DEC .)
    TRANSPOSE       reduce using rule 55 (const -> INT_DEC .)
    STL             reduce using rule 55 (const -> INT_DEC .)
    STR             reduce using rule 55 (const -> INT_DEC .)
    AND             reduce using rule 55 (const -> INT_DEC .)
    LESS            reduce using rule 55 (const -> INT_DEC .)
    GREATER         reduce using rule 55 (const -> INT_DEC .)
    COMMA           reduce using rule 55 (const -> INT_DEC .)
    NL              reduce using rule 55 (const -> INT_DEC .)
    RBRACKET        reduce using rule 55 (const -> INT_DEC .)
    COLON           reduce using rule 55 (const -> INT_DEC .)
    BEGINIF         reduce using rule 55 (const -> INT_DEC .)
    BEGIN           reduce using rule 55 (const -> INT_DEC .)
    R_FIGBRACKET    reduce using rule 55 (const -> INT_DEC .)
    BEGINFOR        reduce using rule 55 (const -> INT_DEC .)


state 59

    (56) const -> INT_BIN .

    PLUS            reduce using rule 56 (const -> INT_BIN .)
    MINUS           reduce using rule 56 (const -> INT_BIN .)
    MUL_MATRIX      reduce using rule 56 (const -> INT_BIN .)
    MUL_ELEM        reduce using rule 56 (const -> INT_BIN .)
    TRANSPOSE       reduce using rule 56 (const -> INT_BIN .)
    STL             reduce using rule 56 (const -> INT_BIN .)
    STR             reduce using rule 56 (const -> INT_BIN .)
    AND             reduce using rule 56 (const -> INT_BIN .)
    LESS            reduce using rule 56 (const -> INT_BIN .)
    GREATER         reduce using rule 56 (const -> INT_BIN .)
    COMMA           reduce using rule 56 (const -> INT_BIN .)
    NL              reduce using rule 56 (const -> INT_BIN .)
    RBRACKET        reduce using rule 56 (const -> INT_BIN .)
    COLON           reduce using rule 56 (const -> INT_BIN .)
    BEGINIF         reduce using rule 56 (const -> INT_BIN .)
    BEGIN           reduce using rule 56 (const -> INT_BIN .)
    R_FIGBRACKET    reduce using rule 56 (const -> INT_BIN .)
    BEGINFOR        reduce using rule 56 (const -> INT_BIN .)


state 60

    (74) assignment -> variable ASSIGNMENT . expression
    (75) assignment -> variable ASSIGNMENT . L_FIGBRACKET decl_list R_FIGBRACKET
    (94) function_call -> variable ASSIGNMENT . VARIABLE call_list
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 93
    VARIABLE        shift and go to state 94
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59

    variable                       shift and go to state 53
    expression                     shift and go to state 92
    math_expression                shift and go to state 51
    const                          shift and go to state 52

state 61

    (76) for -> FOR VARIABLE . EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> FOR VARIABLE . EQ expression COLON expression BEGIN NL stmt_list END

    EQ              shift and go to state 95


state 62

    (78) if -> IF math_expression . BEGINIF NL stmt_list ENDIF
    (79) if -> IF math_expression . BEGIN NL stmt_list END
    (38) expression -> math_expression .

    BEGINIF         shift and go to state 96
    BEGIN           shift and go to state 97
    PLUS            reduce using rule 38 (expression -> math_expression .)
    MINUS           reduce using rule 38 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 38 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 38 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 38 (expression -> math_expression .)
    STL             reduce using rule 38 (expression -> math_expression .)
    STR             reduce using rule 38 (expression -> math_expression .)
    AND             reduce using rule 38 (expression -> math_expression .)
    LESS            reduce using rule 38 (expression -> math_expression .)
    GREATER         reduce using rule 38 (expression -> math_expression .)


state 63

    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 64

    (69) operation -> MOVE LBRACKET . math_expression RBRACKET
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    math_expression                shift and go to state 98
    expression                     shift and go to state 63
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 65

    (84) function -> return_list EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> return_list EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    FUNCTION        shift and go to state 99


state 66

    (80) return_list -> return_list COMMA . type VARIABLE
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 100
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 67

    (85) function -> FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (87) function -> FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 101


state 68

    (92) function_call -> ret_list ASSIGNMENT . VARIABLE call_list
    (93) function_call -> ret_list ASSIGNMENT . VARIABLE

    VARIABLE        shift and go to state 102


state 69

    (96) ret_list -> ret_list COMMA . variable
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    VARIABLE        shift and go to state 47

    variable                       shift and go to state 103

state 70

    (11) declaration -> type VARIABLE EQ . expression
    (12) declaration -> type VARIABLE EQ . L_FIGBRACKET decl_list R_FIGBRACKET
    (88) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 105
    FUNCTION        shift and go to state 106
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 104
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 71

    (82) call_list -> call_list COMMA . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 107
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 72

    (58) variable -> VARIABLE LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 108


state 73

    (62) index -> expression .
    (17) expr_list -> expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! reduce/reduce conflict for RBRACKET resolved using rule 17 (expr_list -> expression .)
    COMMA           reduce using rule 17 (expr_list -> expression .)
    COLON           reduce using rule 17 (expr_list -> expression .)
    RBRACKET        reduce using rule 17 (expr_list -> expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! RBRACKET        [ reduce using rule 62 (index -> expression .) ]


state 74

    (63) index -> expr_list .
    (64) index -> expr_list . ind
    (16) expr_list -> expr_list . COMMA expression
    (15) decl_list -> expr_list .
    (59) ind -> . COMMA
    (60) ind -> . COMMA COLON
    (61) ind -> . COLON COMMA

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 15 (decl_list -> expr_list .)
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           shift and go to state 110
    RBRACKET        reduce using rule 15 (decl_list -> expr_list .)
    COLON           shift and go to state 78

  ! RBRACKET        [ reduce using rule 63 (index -> expr_list .) ]
  ! COMMA           [ reduce using rule 15 (decl_list -> expr_list .) ]
  ! COLON           [ reduce using rule 15 (decl_list -> expr_list .) ]

    ind                            shift and go to state 109

state 75

    (65) index -> ind . expr_list
    (67) index -> ind . decl_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 79
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expr_list                      shift and go to state 111
    decl_list                      shift and go to state 112
    expression                     shift and go to state 113
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 76

    (66) index -> decl_list . ind
    (68) index -> decl_list .
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (59) ind -> . COMMA
    (60) ind -> . COMMA COLON
    (61) ind -> . COLON COMMA

    RBRACKET        reduce using rule 68 (index -> decl_list .)
    COMMA           shift and go to state 115
    COLON           shift and go to state 78

    ind                            shift and go to state 114

state 77

    (59) ind -> COMMA .
    (60) ind -> COMMA . COLON

    L_FIGBRACKET    reduce using rule 59 (ind -> COMMA .)
    SUM             reduce using rule 59 (ind -> COMMA .)
    DENY            reduce using rule 59 (ind -> COMMA .)
    TRUE            reduce using rule 59 (ind -> COMMA .)
    FALSE           reduce using rule 59 (ind -> COMMA .)
    INT_DEC         reduce using rule 59 (ind -> COMMA .)
    INT_BIN         reduce using rule 59 (ind -> COMMA .)
    VARIABLE        reduce using rule 59 (ind -> COMMA .)
    COLON           shift and go to state 116


state 78

    (61) ind -> COLON . COMMA

    COMMA           shift and go to state 117


state 79

    (13) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expr_list                      shift and go to state 118
    expression                     shift and go to state 113
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 80

    (41) math_expression -> expression PLUS . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 119
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 81

    (42) math_expression -> expression MINUS . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 120
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 82

    (43) math_expression -> expression MUL_MATRIX . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 121
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 83

    (44) math_expression -> expression MUL_ELEM . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 122
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 84

    (45) math_expression -> expression TRANSPOSE .

    PLUS            reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    MINUS           reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    MUL_MATRIX      reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    MUL_ELEM        reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    STL             reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    STR             reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    AND             reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    LESS            reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    GREATER         reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    COMMA           reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    NL              reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    BEGINIF         reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    BEGIN           reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    RBRACKET        reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    COLON           reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    R_FIGBRACKET    reduce using rule 45 (math_expression -> expression TRANSPOSE .)
    BEGINFOR        reduce using rule 45 (math_expression -> expression TRANSPOSE .)


state 85

    (47) math_expression -> expression STL .

    PLUS            reduce using rule 47 (math_expression -> expression STL .)
    MINUS           reduce using rule 47 (math_expression -> expression STL .)
    MUL_MATRIX      reduce using rule 47 (math_expression -> expression STL .)
    MUL_ELEM        reduce using rule 47 (math_expression -> expression STL .)
    TRANSPOSE       reduce using rule 47 (math_expression -> expression STL .)
    STL             reduce using rule 47 (math_expression -> expression STL .)
    STR             reduce using rule 47 (math_expression -> expression STL .)
    AND             reduce using rule 47 (math_expression -> expression STL .)
    LESS            reduce using rule 47 (math_expression -> expression STL .)
    GREATER         reduce using rule 47 (math_expression -> expression STL .)
    COMMA           reduce using rule 47 (math_expression -> expression STL .)
    NL              reduce using rule 47 (math_expression -> expression STL .)
    BEGINIF         reduce using rule 47 (math_expression -> expression STL .)
    BEGIN           reduce using rule 47 (math_expression -> expression STL .)
    RBRACKET        reduce using rule 47 (math_expression -> expression STL .)
    COLON           reduce using rule 47 (math_expression -> expression STL .)
    R_FIGBRACKET    reduce using rule 47 (math_expression -> expression STL .)
    BEGINFOR        reduce using rule 47 (math_expression -> expression STL .)


state 86

    (48) math_expression -> expression STR .

    PLUS            reduce using rule 48 (math_expression -> expression STR .)
    MINUS           reduce using rule 48 (math_expression -> expression STR .)
    MUL_MATRIX      reduce using rule 48 (math_expression -> expression STR .)
    MUL_ELEM        reduce using rule 48 (math_expression -> expression STR .)
    TRANSPOSE       reduce using rule 48 (math_expression -> expression STR .)
    STL             reduce using rule 48 (math_expression -> expression STR .)
    STR             reduce using rule 48 (math_expression -> expression STR .)
    AND             reduce using rule 48 (math_expression -> expression STR .)
    LESS            reduce using rule 48 (math_expression -> expression STR .)
    GREATER         reduce using rule 48 (math_expression -> expression STR .)
    COMMA           reduce using rule 48 (math_expression -> expression STR .)
    NL              reduce using rule 48 (math_expression -> expression STR .)
    BEGINIF         reduce using rule 48 (math_expression -> expression STR .)
    BEGIN           reduce using rule 48 (math_expression -> expression STR .)
    RBRACKET        reduce using rule 48 (math_expression -> expression STR .)
    COLON           reduce using rule 48 (math_expression -> expression STR .)
    R_FIGBRACKET    reduce using rule 48 (math_expression -> expression STR .)
    BEGINFOR        reduce using rule 48 (math_expression -> expression STR .)


state 87

    (50) math_expression -> expression AND . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 123
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 88

    (51) math_expression -> expression LESS . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 124
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 89

    (52) math_expression -> expression GREATER . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 125
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 90

    (46) math_expression -> SUM LBRACKET . expression RBRACKET
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 126
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 91

    (49) math_expression -> DENY expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 49 (math_expression -> DENY expression .)
    NL              reduce using rule 49 (math_expression -> DENY expression .)
    BEGINIF         reduce using rule 49 (math_expression -> DENY expression .)
    BEGIN           reduce using rule 49 (math_expression -> DENY expression .)
    RBRACKET        reduce using rule 49 (math_expression -> DENY expression .)
    COLON           reduce using rule 49 (math_expression -> DENY expression .)
    R_FIGBRACKET    reduce using rule 49 (math_expression -> DENY expression .)
    BEGINFOR        reduce using rule 49 (math_expression -> DENY expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! MINUS           [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! MUL_MATRIX      [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! MUL_ELEM        [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! TRANSPOSE       [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! STL             [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! STR             [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! AND             [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! LESS            [ reduce using rule 49 (math_expression -> DENY expression .) ]
  ! GREATER         [ reduce using rule 49 (math_expression -> DENY expression .) ]


state 92

    (74) assignment -> variable ASSIGNMENT expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    NL              reduce using rule 74 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 93

    (75) assignment -> variable ASSIGNMENT L_FIGBRACKET . decl_list R_FIGBRACKET
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 79
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    variable                       shift and go to state 53
    decl_list                      shift and go to state 127
    expr_list                      shift and go to state 128
    expression                     shift and go to state 113
    math_expression                shift and go to state 51
    const                          shift and go to state 52

state 94

    (94) function_call -> variable ASSIGNMENT VARIABLE . call_list
    (57) variable -> VARIABLE .
    (58) variable -> VARIABLE . LBRACKET index RBRACKET
    (82) call_list -> . call_list COMMA expression
    (83) call_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    PLUS            reduce using rule 57 (variable -> VARIABLE .)
    MINUS           reduce using rule 57 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 57 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 57 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 57 (variable -> VARIABLE .)
    STL             reduce using rule 57 (variable -> VARIABLE .)
    STR             reduce using rule 57 (variable -> VARIABLE .)
    AND             reduce using rule 57 (variable -> VARIABLE .)
    LESS            reduce using rule 57 (variable -> VARIABLE .)
    GREATER         reduce using rule 57 (variable -> VARIABLE .)
    NL              reduce using rule 57 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 49
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    variable                       shift and go to state 53
    call_list                      shift and go to state 129
    expression                     shift and go to state 50
    math_expression                shift and go to state 51
    const                          shift and go to state 52

state 95

    (76) for -> FOR VARIABLE EQ . expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> FOR VARIABLE EQ . expression COLON expression BEGIN NL stmt_list END
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 130
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 96

    (78) if -> IF math_expression BEGINIF . NL stmt_list ENDIF

    NL              shift and go to state 131


state 97

    (79) if -> IF math_expression BEGIN . NL stmt_list END

    NL              shift and go to state 132


state 98

    (69) operation -> MOVE LBRACKET math_expression . RBRACKET
    (38) expression -> math_expression .

    RBRACKET        shift and go to state 133
    PLUS            reduce using rule 38 (expression -> math_expression .)
    MINUS           reduce using rule 38 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 38 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 38 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 38 (expression -> math_expression .)
    STL             reduce using rule 38 (expression -> math_expression .)
    STR             reduce using rule 38 (expression -> math_expression .)
    AND             reduce using rule 38 (expression -> math_expression .)
    LESS            reduce using rule 38 (expression -> math_expression .)
    GREATER         reduce using rule 38 (expression -> math_expression .)


state 99

    (84) function -> return_list EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> return_list EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 134


state 100

    (80) return_list -> return_list COMMA type . VARIABLE

    VARIABLE        shift and go to state 135


state 101

    (85) function -> FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (87) function -> FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (32) func_list -> . func_list COMMA func
    (33) func_list -> . func
    (34) func -> . type VARIABLE
    (35) func -> . type VARIABLE EQ const
    (36) func -> . type VARIABLE EQ decl_list
    (37) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    RBRACKET        shift and go to state 137
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    func_list                      shift and go to state 136
    func                           shift and go to state 138
    type                           shift and go to state 139
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 102

    (92) function_call -> ret_list ASSIGNMENT VARIABLE . call_list
    (93) function_call -> ret_list ASSIGNMENT VARIABLE .
    (82) call_list -> . call_list COMMA expression
    (83) call_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    NL              reduce using rule 93 (function_call -> ret_list ASSIGNMENT VARIABLE .)
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    call_list                      shift and go to state 140
    expression                     shift and go to state 50
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 103

    (96) ret_list -> ret_list COMMA variable .

    ASSIGNMENT      reduce using rule 96 (ret_list -> ret_list COMMA variable .)
    COMMA           reduce using rule 96 (ret_list -> ret_list COMMA variable .)


state 104

    (11) declaration -> type VARIABLE EQ expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    NL              reduce using rule 11 (declaration -> type VARIABLE EQ expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 105

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET . decl_list R_FIGBRACKET
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 79
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    decl_list                      shift and go to state 141
    expr_list                      shift and go to state 128
    expression                     shift and go to state 113
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 106

    (88) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 142


state 107

    (82) call_list -> call_list COMMA expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 82 (call_list -> call_list COMMA expression .)
    NL              reduce using rule 82 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 108

    (58) variable -> VARIABLE LBRACKET index RBRACKET .

    ASSIGNMENT      reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COMMA           reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    PLUS            reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MINUS           reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_MATRIX      reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_ELEM        reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    TRANSPOSE       reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STL             reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STR             reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    AND             reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    LESS            reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    GREATER         reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    NL              reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    RBRACKET        reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COLON           reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINIF         reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGIN           reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    R_FIGBRACKET    reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINFOR        reduce using rule 58 (variable -> VARIABLE LBRACKET index RBRACKET .)


state 109

    (64) index -> expr_list ind .

    RBRACKET        reduce using rule 64 (index -> expr_list ind .)


state 110

    (16) expr_list -> expr_list COMMA . expression
    (59) ind -> COMMA .
    (60) ind -> COMMA . COLON
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    RBRACKET        reduce using rule 59 (ind -> COMMA .)
    COLON           shift and go to state 116
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 143
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 111

    (65) index -> ind expr_list .
    (16) expr_list -> expr_list . COMMA expression
    (15) decl_list -> expr_list .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 15 (decl_list -> expr_list .)
    COMMA           shift and go to state 144
    RBRACKET        reduce using rule 15 (decl_list -> expr_list .)

  ! RBRACKET        [ reduce using rule 65 (index -> ind expr_list .) ]
  ! COMMA           [ reduce using rule 15 (decl_list -> expr_list .) ]


state 112

    (67) index -> ind decl_list .
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    RBRACKET        reduce using rule 67 (index -> ind decl_list .)
    COMMA           shift and go to state 145


state 113

    (17) expr_list -> expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 17 (expr_list -> expression .)
    RBRACKET        reduce using rule 17 (expr_list -> expression .)
    R_FIGBRACKET    reduce using rule 17 (expr_list -> expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 114

    (66) index -> decl_list ind .

    RBRACKET        reduce using rule 66 (index -> decl_list ind .)


state 115

    (14) decl_list -> decl_list COMMA . L_FIGBRACKET decl_list R_FIGBRACKET
    (59) ind -> COMMA .
    (60) ind -> COMMA . COLON

    L_FIGBRACKET    shift and go to state 146
    RBRACKET        reduce using rule 59 (ind -> COMMA .)
    COLON           shift and go to state 116


state 116

    (60) ind -> COMMA COLON .

    L_FIGBRACKET    reduce using rule 60 (ind -> COMMA COLON .)
    SUM             reduce using rule 60 (ind -> COMMA COLON .)
    DENY            reduce using rule 60 (ind -> COMMA COLON .)
    TRUE            reduce using rule 60 (ind -> COMMA COLON .)
    FALSE           reduce using rule 60 (ind -> COMMA COLON .)
    INT_DEC         reduce using rule 60 (ind -> COMMA COLON .)
    INT_BIN         reduce using rule 60 (ind -> COMMA COLON .)
    VARIABLE        reduce using rule 60 (ind -> COMMA COLON .)
    RBRACKET        reduce using rule 60 (ind -> COMMA COLON .)


state 117

    (61) ind -> COLON COMMA .

    L_FIGBRACKET    reduce using rule 61 (ind -> COLON COMMA .)
    SUM             reduce using rule 61 (ind -> COLON COMMA .)
    DENY            reduce using rule 61 (ind -> COLON COMMA .)
    TRUE            reduce using rule 61 (ind -> COLON COMMA .)
    FALSE           reduce using rule 61 (ind -> COLON COMMA .)
    INT_DEC         reduce using rule 61 (ind -> COLON COMMA .)
    INT_BIN         reduce using rule 61 (ind -> COLON COMMA .)
    VARIABLE        reduce using rule 61 (ind -> COLON COMMA .)
    RBRACKET        reduce using rule 61 (ind -> COLON COMMA .)


state 118

    (13) decl_list -> L_FIGBRACKET expr_list . R_FIGBRACKET
    (16) expr_list -> expr_list . COMMA expression

    R_FIGBRACKET    shift and go to state 147
    COMMA           shift and go to state 144


state 119

    (41) math_expression -> expression PLUS expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 41 (math_expression -> expression PLUS expression .)
    NL              reduce using rule 41 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 41 (math_expression -> expression PLUS expression .)
    BEGIN           reduce using rule 41 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 41 (math_expression -> expression PLUS expression .)
    COLON           reduce using rule 41 (math_expression -> expression PLUS expression .)
    R_FIGBRACKET    reduce using rule 41 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 41 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! STL             [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! STR             [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 41 (math_expression -> expression PLUS expression .) ]


state 120

    (42) math_expression -> expression MINUS expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 42 (math_expression -> expression MINUS expression .)
    NL              reduce using rule 42 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 42 (math_expression -> expression MINUS expression .)
    BEGIN           reduce using rule 42 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 42 (math_expression -> expression MINUS expression .)
    COLON           reduce using rule 42 (math_expression -> expression MINUS expression .)
    R_FIGBRACKET    reduce using rule 42 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 42 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! STL             [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! STR             [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 42 (math_expression -> expression MINUS expression .) ]


state 121

    (43) math_expression -> expression MUL_MATRIX expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    NL              reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    BEGINIF         reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    BEGIN           reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    RBRACKET        reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    COLON           reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    R_FIGBRACKET    reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    BEGINFOR        reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MINUS           [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_MATRIX      [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_ELEM        [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! TRANSPOSE       [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STL             [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STR             [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! AND             [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! LESS            [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]
  ! GREATER         [ reduce using rule 43 (math_expression -> expression MUL_MATRIX expression .) ]


state 122

    (44) math_expression -> expression MUL_ELEM expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    NL              reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    BEGINIF         reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    BEGIN           reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    RBRACKET        reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    COLON           reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    R_FIGBRACKET    reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    BEGINFOR        reduce using rule 44 (math_expression -> expression MUL_ELEM expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! MINUS           [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_MATRIX      [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_ELEM        [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! TRANSPOSE       [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! STL             [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! STR             [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! AND             [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! LESS            [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]
  ! GREATER         [ reduce using rule 44 (math_expression -> expression MUL_ELEM expression .) ]


state 123

    (50) math_expression -> expression AND expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 50 (math_expression -> expression AND expression .)
    NL              reduce using rule 50 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 50 (math_expression -> expression AND expression .)
    BEGIN           reduce using rule 50 (math_expression -> expression AND expression .)
    RBRACKET        reduce using rule 50 (math_expression -> expression AND expression .)
    COLON           reduce using rule 50 (math_expression -> expression AND expression .)
    R_FIGBRACKET    reduce using rule 50 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 50 (math_expression -> expression AND expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! MUL_MATRIX      [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! MUL_ELEM        [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! TRANSPOSE       [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! STL             [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! STR             [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 50 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 50 (math_expression -> expression AND expression .) ]


state 124

    (51) math_expression -> expression LESS expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 51 (math_expression -> expression LESS expression .)
    NL              reduce using rule 51 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 51 (math_expression -> expression LESS expression .)
    BEGIN           reduce using rule 51 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 51 (math_expression -> expression LESS expression .)
    COLON           reduce using rule 51 (math_expression -> expression LESS expression .)
    R_FIGBRACKET    reduce using rule 51 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 51 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! MUL_ELEM        [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! TRANSPOSE       [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! STL             [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! STR             [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! AND             [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 51 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 51 (math_expression -> expression LESS expression .) ]


state 125

    (52) math_expression -> expression GREATER expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 52 (math_expression -> expression GREATER expression .)
    NL              reduce using rule 52 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 52 (math_expression -> expression GREATER expression .)
    BEGIN           reduce using rule 52 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 52 (math_expression -> expression GREATER expression .)
    COLON           reduce using rule 52 (math_expression -> expression GREATER expression .)
    R_FIGBRACKET    reduce using rule 52 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 52 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89

  ! PLUS            [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! MUL_MATRIX      [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! MUL_ELEM        [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! TRANSPOSE       [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! STL             [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! STR             [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! AND             [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 52 (math_expression -> expression GREATER expression .) ]


state 126

    (46) math_expression -> SUM LBRACKET expression . RBRACKET
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    RBRACKET        shift and go to state 148
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 127

    (75) assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list . R_FIGBRACKET
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 149
    COMMA           shift and go to state 145


state 128

    (15) decl_list -> expr_list .
    (16) expr_list -> expr_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    R_FIGBRACKET    reduce using rule 15 (decl_list -> expr_list .)
    RBRACKET        reduce using rule 15 (decl_list -> expr_list .)
    COMMA           shift and go to state 144

  ! COMMA           [ reduce using rule 15 (decl_list -> expr_list .) ]


state 129

    (94) function_call -> variable ASSIGNMENT VARIABLE call_list .
    (82) call_list -> call_list . COMMA expression

    NL              reduce using rule 94 (function_call -> variable ASSIGNMENT VARIABLE call_list .)
    COMMA           shift and go to state 71


state 130

    (76) for -> FOR VARIABLE EQ expression . COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> FOR VARIABLE EQ expression . COLON expression BEGIN NL stmt_list END
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    COLON           shift and go to state 150
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 131

    (78) if -> IF math_expression BEGINIF NL . stmt_list ENDIF
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 151
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 132

    (79) if -> IF math_expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 152
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 133

    (69) operation -> MOVE LBRACKET math_expression RBRACKET .

    NL              reduce using rule 69 (operation -> MOVE LBRACKET math_expression RBRACKET .)


state 134

    (84) function -> return_list EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> return_list EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 153


state 135

    (80) return_list -> return_list COMMA type VARIABLE .

    EQ              reduce using rule 80 (return_list -> return_list COMMA type VARIABLE .)
    COMMA           reduce using rule 80 (return_list -> return_list COMMA type VARIABLE .)


state 136

    (85) function -> FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (32) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 154
    COMMA           shift and go to state 155


state 137

    (87) function -> FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 156


state 138

    (33) func_list -> func .

    RBRACKET        reduce using rule 33 (func_list -> func .)
    COMMA           reduce using rule 33 (func_list -> func .)


state 139

    (34) func -> type . VARIABLE
    (35) func -> type . VARIABLE EQ const
    (36) func -> type . VARIABLE EQ decl_list
    (37) func -> type . VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET

    VARIABLE        shift and go to state 157


state 140

    (92) function_call -> ret_list ASSIGNMENT VARIABLE call_list .
    (82) call_list -> call_list . COMMA expression

    NL              reduce using rule 92 (function_call -> ret_list ASSIGNMENT VARIABLE call_list .)
    COMMA           shift and go to state 71


state 141

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list . R_FIGBRACKET
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 158
    COMMA           shift and go to state 145


state 142

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 159


state 143

    (16) expr_list -> expr_list COMMA expression .
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 16 (expr_list -> expr_list COMMA expression .)
    COLON           reduce using rule 16 (expr_list -> expr_list COMMA expression .)
    RBRACKET        reduce using rule 16 (expr_list -> expr_list COMMA expression .)
    R_FIGBRACKET    reduce using rule 16 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 144

    (16) expr_list -> expr_list COMMA . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 143
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 145

    (14) decl_list -> decl_list COMMA . L_FIGBRACKET decl_list R_FIGBRACKET

    L_FIGBRACKET    shift and go to state 146


state 146

    (14) decl_list -> decl_list COMMA L_FIGBRACKET . decl_list R_FIGBRACKET
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 79
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    decl_list                      shift and go to state 160
    expr_list                      shift and go to state 128
    expression                     shift and go to state 113
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 147

    (13) decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .

    COMMA           reduce using rule 13 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    COLON           reduce using rule 13 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    RBRACKET        reduce using rule 13 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    R_FIGBRACKET    reduce using rule 13 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)


state 148

    (46) math_expression -> SUM LBRACKET expression RBRACKET .

    PLUS            reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_MATRIX      reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_ELEM        reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    TRANSPOSE       reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STL             reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STR             reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    AND             reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    LESS            reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    NL              reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINIF         reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COLON           reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    R_FIGBRACKET    reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINFOR        reduce using rule 46 (math_expression -> SUM LBRACKET expression RBRACKET .)


state 149

    (75) assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 75 (assignment -> variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET .)


state 150

    (76) for -> FOR VARIABLE EQ expression COLON . expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> FOR VARIABLE EQ expression COLON . expression BEGIN NL stmt_list END
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    expression                     shift and go to state 161
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 151

    (78) if -> IF math_expression BEGINIF NL stmt_list . ENDIF
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    ENDIF           shift and go to state 162
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 152

    (79) if -> IF math_expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 163
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 153

    (84) function -> return_list EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> return_list EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (32) func_list -> . func_list COMMA func
    (33) func_list -> . func
    (34) func -> . type VARIABLE
    (35) func -> . type VARIABLE EQ const
    (36) func -> . type VARIABLE EQ decl_list
    (37) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    RBRACKET        shift and go to state 165
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    func_list                      shift and go to state 164
    func                           shift and go to state 138
    type                           shift and go to state 139
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 154

    (85) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 166


state 155

    (32) func_list -> func_list COMMA . func
    (34) func -> . type VARIABLE
    (35) func -> . type VARIABLE EQ const
    (36) func -> . type VARIABLE EQ decl_list
    (37) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    func                           shift and go to state 167
    type                           shift and go to state 139
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 156

    (87) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 168


state 157

    (34) func -> type VARIABLE .
    (35) func -> type VARIABLE . EQ const
    (36) func -> type VARIABLE . EQ decl_list
    (37) func -> type VARIABLE . EQ L_FIGBRACKET decl_list R_FIGBRACKET

    RBRACKET        reduce using rule 34 (func -> type VARIABLE .)
    COMMA           reduce using rule 34 (func -> type VARIABLE .)
    EQ              shift and go to state 169


state 158

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 12 (declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)


state 159

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (32) func_list -> . func_list COMMA func
    (33) func_list -> . func
    (34) func -> . type VARIABLE
    (35) func -> . type VARIABLE EQ const
    (36) func -> . type VARIABLE EQ decl_list
    (37) func -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    RBRACKET        shift and go to state 171
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 139
    func_list                      shift and go to state 170
    func                           shift and go to state 138
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 160

    (14) decl_list -> decl_list COMMA L_FIGBRACKET decl_list . R_FIGBRACKET
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 172
    COMMA           shift and go to state 145


state 161

    (76) for -> FOR VARIABLE EQ expression COLON expression . BEGINFOR NL stmt_list ENDFOR
    (77) for -> FOR VARIABLE EQ expression COLON expression . BEGIN NL stmt_list END
    (41) math_expression -> expression . PLUS expression
    (42) math_expression -> expression . MINUS expression
    (43) math_expression -> expression . MUL_MATRIX expression
    (44) math_expression -> expression . MUL_ELEM expression
    (45) math_expression -> expression . TRANSPOSE
    (47) math_expression -> expression . STL
    (48) math_expression -> expression . STR
    (50) math_expression -> expression . AND expression
    (51) math_expression -> expression . LESS expression
    (52) math_expression -> expression . GREATER expression

    BEGINFOR        shift and go to state 173
    BEGIN           shift and go to state 174
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL_MATRIX      shift and go to state 82
    MUL_ELEM        shift and go to state 83
    TRANSPOSE       shift and go to state 84
    STL             shift and go to state 85
    STR             shift and go to state 86
    AND             shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89


state 162

    (78) if -> IF math_expression BEGINIF NL stmt_list ENDIF .

    NL              reduce using rule 78 (if -> IF math_expression BEGINIF NL stmt_list ENDIF .)


state 163

    (79) if -> IF math_expression BEGIN NL stmt_list END .

    NL              reduce using rule 79 (if -> IF math_expression BEGIN NL stmt_list END .)


state 164

    (84) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (32) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 175
    COMMA           shift and go to state 155


state 165

    (86) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 176


state 166

    (85) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 177


state 167

    (32) func_list -> func_list COMMA func .

    RBRACKET        reduce using rule 32 (func_list -> func_list COMMA func .)
    COMMA           reduce using rule 32 (func_list -> func_list COMMA func .)


state 168

    (87) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 178
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 169

    (35) func -> type VARIABLE EQ . const
    (36) func -> type VARIABLE EQ . decl_list
    (37) func -> type VARIABLE EQ . L_FIGBRACKET decl_list R_FIGBRACKET
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 181
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    VARIABLE        shift and go to state 47

    const                          shift and go to state 179
    decl_list                      shift and go to state 180
    expr_list                      shift and go to state 128
    expression                     shift and go to state 113
    math_expression                shift and go to state 51
    variable                       shift and go to state 53

state 170

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (32) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 182
    COMMA           shift and go to state 155


state 171

    (89) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 183


state 172

    (14) decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .

    COMMA           reduce using rule 14 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    COLON           reduce using rule 14 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    RBRACKET        reduce using rule 14 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    R_FIGBRACKET    reduce using rule 14 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)


state 173

    (76) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR . NL stmt_list ENDFOR

    NL              shift and go to state 184


state 174

    (77) for -> FOR VARIABLE EQ expression COLON expression BEGIN . NL stmt_list END

    NL              shift and go to state 185


state 175

    (84) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 186


state 176

    (86) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 187


state 177

    (85) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 188
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 178

    (87) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 189
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 179

    (35) func -> type VARIABLE EQ const .
    (39) expression -> const .

  ! reduce/reduce conflict for COMMA resolved using rule 35 (func -> type VARIABLE EQ const .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 35 (func -> type VARIABLE EQ const .)
    RBRACKET        reduce using rule 35 (func -> type VARIABLE EQ const .)
    COMMA           reduce using rule 35 (func -> type VARIABLE EQ const .)
    PLUS            reduce using rule 39 (expression -> const .)
    MINUS           reduce using rule 39 (expression -> const .)
    MUL_MATRIX      reduce using rule 39 (expression -> const .)
    MUL_ELEM        reduce using rule 39 (expression -> const .)
    TRANSPOSE       reduce using rule 39 (expression -> const .)
    STL             reduce using rule 39 (expression -> const .)
    STR             reduce using rule 39 (expression -> const .)
    AND             reduce using rule 39 (expression -> const .)
    LESS            reduce using rule 39 (expression -> const .)
    GREATER         reduce using rule 39 (expression -> const .)

  ! COMMA           [ reduce using rule 39 (expression -> const .) ]
  ! RBRACKET        [ reduce using rule 39 (expression -> const .) ]


state 180

    (36) func -> type VARIABLE EQ decl_list .
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    RBRACKET        reduce using rule 36 (func -> type VARIABLE EQ decl_list .)
    COMMA           shift and go to state 145

  ! COMMA           [ reduce using rule 36 (func -> type VARIABLE EQ decl_list .) ]


state 181

    (37) func -> type VARIABLE EQ L_FIGBRACKET . decl_list R_FIGBRACKET
    (13) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variable
    (41) math_expression -> . expression PLUS expression
    (42) math_expression -> . expression MINUS expression
    (43) math_expression -> . expression MUL_MATRIX expression
    (44) math_expression -> . expression MUL_ELEM expression
    (45) math_expression -> . expression TRANSPOSE
    (46) math_expression -> . SUM LBRACKET expression RBRACKET
    (47) math_expression -> . expression STL
    (48) math_expression -> . expression STR
    (49) math_expression -> . DENY expression
    (50) math_expression -> . expression AND expression
    (51) math_expression -> . expression LESS expression
    (52) math_expression -> . expression GREATER expression
    (53) const -> . TRUE
    (54) const -> . FALSE
    (55) const -> . INT_DEC
    (56) const -> . INT_BIN
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET

    L_FIGBRACKET    shift and go to state 79
    SUM             shift and go to state 54
    DENY            shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    VARIABLE        shift and go to state 47

    decl_list                      shift and go to state 190
    expr_list                      shift and go to state 191
    expression                     shift and go to state 113
    math_expression                shift and go to state 51
    const                          shift and go to state 52
    variable                       shift and go to state 53

state 182

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 192


state 183

    (89) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 193


state 184

    (76) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL . stmt_list ENDFOR
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 194
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 185

    (77) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    stmt_list                      shift and go to state 195
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 186

    (84) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 196


state 187

    (86) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 197
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 188

    (85) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 198
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 189

    (87) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 87 (function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 190

    (37) func -> type VARIABLE EQ L_FIGBRACKET decl_list . R_FIGBRACKET
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 199
    COMMA           shift and go to state 145


state 191

    (13) decl_list -> L_FIGBRACKET expr_list . R_FIGBRACKET
    (15) decl_list -> expr_list .
    (16) expr_list -> expr_list . COMMA expression

  ! shift/reduce conflict for R_FIGBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    R_FIGBRACKET    shift and go to state 147
    COMMA           shift and go to state 144

  ! R_FIGBRACKET    [ reduce using rule 15 (decl_list -> expr_list .) ]
  ! COMMA           [ reduce using rule 15 (decl_list -> expr_list .) ]


state 192

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 200


state 193

    (89) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    stmt_list                      shift and go to state 201
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 194

    (76) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list . ENDFOR
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    ENDFOR          shift and go to state 202
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 195

    (77) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 203
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 196

    (84) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 204
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 197

    (86) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 205
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 198

    (85) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 85 (function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 199

    (37) func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .

    RBRACKET        reduce using rule 37 (func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)
    COMMA           reduce using rule 37 (func -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)


state 200

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    stmt_list                      shift and go to state 206
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 201

    (89) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 207
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 202

    (76) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .

    NL              reduce using rule 76 (for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .)


state 203

    (77) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .

    NL              reduce using rule 77 (for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .)


state 204

    (84) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 208
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    return_list                    shift and go to state 21
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 205

    (86) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 86 (function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 206

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assignment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (74) assignment -> . variable ASSIGNMENT expression
    (75) assignment -> . variable ASSIGNMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (76) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (77) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (78) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (79) if -> . IF math_expression BEGIN NL stmt_list END
    (69) operation -> . MOVE LBRACKET math_expression RBRACKET
    (70) operation -> . RIGHT
    (71) operation -> . LEFT
    (72) operation -> . WALL
    (73) operation -> . EXIT
    (84) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (85) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (86) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (87) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (88) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (89) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (90) function_call -> . VARIABLE
    (91) function_call -> . VARIABLE call_list
    (92) function_call -> . ret_list ASSIGNMENT VARIABLE call_list
    (93) function_call -> . ret_list ASSIGNMENT VARIABLE
    (94) function_call -> . variable ASSIGNMENT VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (57) variable -> . VARIABLE
    (58) variable -> . VARIABLE LBRACKET index RBRACKET
    (80) return_list -> . return_list COMMA type VARIABLE
    (81) return_list -> . type VARIABLE
    (95) ret_list -> . variable
    (96) ret_list -> . ret_list COMMA variable
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 209
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 26
    CINT            shift and go to state 27
    VINT            shift and go to state 28
    MINT            shift and go to state 29
    CVINT           shift and go to state 30
    CMINT           shift and go to state 31
    BOOL            shift and go to state 32
    CBOOL           shift and go to state 33
    VBOOL           shift and go to state 34
    MBOOL           shift and go to state 35
    CVBOOL          shift and go to state 36
    CMBOOL          shift and go to state 37

    type                           shift and go to state 11
    statement                      shift and go to state 38
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    ret_list                       shift and go to state 23
    int                            shift and go to state 24
    bool                           shift and go to state 25

state 207

    (89) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 89 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 208

    (84) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 84 (function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 209

    (88) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 88 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGNMENT in state 13 resolved as shift
WARNING: shift/reduce conflict for EQ in state 46 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 74 resolved as shift
WARNING: shift/reduce conflict for COLON in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 91 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 91 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 91 resolved as shift
WARNING: shift/reduce conflict for STL in state 91 resolved as shift
WARNING: shift/reduce conflict for STR in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for LESS in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 91 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 119 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 119 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 119 resolved as shift
WARNING: shift/reduce conflict for STL in state 119 resolved as shift
WARNING: shift/reduce conflict for STR in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 120 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 120 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 120 resolved as shift
WARNING: shift/reduce conflict for STL in state 120 resolved as shift
WARNING: shift/reduce conflict for STR in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 121 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 121 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 121 resolved as shift
WARNING: shift/reduce conflict for STL in state 121 resolved as shift
WARNING: shift/reduce conflict for STR in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 122 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 122 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 122 resolved as shift
WARNING: shift/reduce conflict for STL in state 122 resolved as shift
WARNING: shift/reduce conflict for STR in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 123 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 123 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 123 resolved as shift
WARNING: shift/reduce conflict for STL in state 123 resolved as shift
WARNING: shift/reduce conflict for STR in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 124 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 124 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 124 resolved as shift
WARNING: shift/reduce conflict for STL in state 124 resolved as shift
WARNING: shift/reduce conflict for STR in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for LESS in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 125 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 125 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 125 resolved as shift
WARNING: shift/reduce conflict for STL in state 125 resolved as shift
WARNING: shift/reduce conflict for STR in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 125 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 128 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 180 resolved as shift
WARNING: shift/reduce conflict for R_FIGBRACKET in state 191 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 191 resolved as shift
WARNING: reduce/reduce conflict in state 73 resolved using rule (expr_list -> expression)
WARNING: rejected rule (index -> expression) in state 73
WARNING: reduce/reduce conflict in state 74 resolved using rule (decl_list -> expr_list)
WARNING: rejected rule (index -> expr_list) in state 74
WARNING: reduce/reduce conflict in state 111 resolved using rule (decl_list -> expr_list)
WARNING: rejected rule (index -> ind expr_list) in state 111
WARNING: reduce/reduce conflict in state 179 resolved using rule (func -> type VARIABLE EQ const)
WARNING: rejected rule (expression -> const) in state 179
WARNING: Rule (index -> expression) is never reduced
WARNING: Rule (index -> expr_list) is never reduced
WARNING: Rule (index -> ind expr_list) is never reduced
