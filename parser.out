Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt_list statement
Rule 3     stmt_list -> statement
Rule 4     statement -> declaration NL
Rule 5     statement -> assigment NL
Rule 6     statement -> for NL
Rule 7     statement -> if NL
Rule 8     statement -> operation NL
Rule 9     statement -> function NL
Rule 10    statement -> function_call NL
Rule 11    declaration -> type var
Rule 12    expr_list -> expr_list expression
Rule 13    expr_list -> expression
Rule 14    type -> int
Rule 15    type -> bool
Rule 16    int -> INT
Rule 17    int -> CINT
Rule 18    int -> VINT
Rule 19    int -> MINT
Rule 20    int -> CVINT
Rule 21    int -> CMINT
Rule 22    bool -> BOOL
Rule 23    bool -> CBOOL
Rule 24    bool -> VBOOL
Rule 25    bool -> MBOOL
Rule 26    bool -> CVBOOL
Rule 27    bool -> CMBOOL
Rule 28    var -> VARIABLE EQ expression
Rule 29    var -> VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKET
Rule 30    expression -> variable
Rule 31    expression -> const
Rule 32    expression -> math_expression
Rule 33    math_expression -> expression PLUS expression
Rule 34    math_expression -> expression MINUS expression
Rule 35    math_expression -> expression MUL_MATRIX expression
Rule 36    math_expression -> expression MUL_ELEM expression
Rule 37    math_expression -> expression TRANSPOSE
Rule 38    math_expression -> SUM LBRACKET expression RBRACKET
Rule 39    math_expression -> expression STL
Rule 40    math_expression -> expression STR
Rule 41    math_expression -> DENY expression
Rule 42    math_expression -> expression AND expression
Rule 43    math_expression -> expression LESS expression
Rule 44    math_expression -> expression GREATER expression
Rule 45    const -> TRUE
Rule 46    const -> FALSE
Rule 47    const -> INT_DEC
Rule 48    const -> INT_BIN
Rule 49    variable -> VARIABLE
Rule 50    variable -> VARIABLE LBRACKET index RBRACKET
Rule 51    ind_exp -> expression
Rule 52    ind_exp -> COLON
Rule 53    ind_exp -> <empty>
Rule 54    index -> expression
Rule 55    index -> ind_exp COMMA ind_exp
Rule 56    operation -> MOVE LBRACKET math_expression RBRACKET
Rule 57    operation -> RIGHT
Rule 58    operation -> LEFT
Rule 59    operation -> WALL
Rule 60    operation -> EXIT
Rule 61    assigment -> variable ASSIGMENT expression
Rule 62    for -> FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
Rule 63    for -> FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
Rule 64    if -> IF math_expression BEGINIF stmt_list ENDIF
Rule 65    if -> IF math_expression BEGIN stmt_list END
Rule 66    function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
Rule 67    function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
Rule 68    function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
Rule 69    function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
Rule 70    function_call -> VARIABLE
Rule 71    function_call -> VARIABLE call_list
Rule 72    return_list -> return_list COMMA type VARIABLE
Rule 73    return_list -> type VARIABLE
Rule 74    func_list -> func_list COMMA func
Rule 75    func_list -> func
Rule 76    func -> type VARIABLE
Rule 77    func -> type VARIABLE EQ const
Rule 78    call_list -> call_list COMMA expression
Rule 79    call_list -> expression

Terminals, with rules where they appear

AND                  : 42
ASSIGMENT            : 61
BEGIN                : 63 65 66 67 68 69
BEGINFOR             : 62
BEGINIF              : 64
BOOL                 : 22
CBOOL                : 23
CINT                 : 17
CMBOOL               : 27
CMINT                : 21
COLON                : 52 62 63
COMMA                : 55 72 74 78
CVBOOL               : 26
CVINT                : 20
DENY                 : 41
END                  : 63 65 66 67 68 69
ENDFOR               : 62
ENDIF                : 64
EQ                   : 28 29 62 63 66 68 77
EXIT                 : 60
FALSE                : 46
FOR                  : 62 63
FUNCTION             : 66 67 68 69
GREATER              : 44
IF                   : 64 65
INT                  : 16
INT_BIN              : 48
INT_DEC              : 47
LBRACKET             : 38 50 56 66 67 68 69
LEFT                 : 58
LESS                 : 43
L_FIGBRACKET         : 29
MBOOL                : 25
MINT                 : 19
MINUS                : 34
MOVE                 : 56
MUL_ELEM             : 36
MUL_MATRIX           : 35
NL                   : 4 5 6 7 8 9 10
PLUS                 : 33
RBRACKET             : 38 50 56 66 67 68 69
RIGHT                : 57
R_FIGBRACKET         : 29
STL                  : 39
STR                  : 40
SUM                  : 38
TRANSPOSE            : 37
TRUE                 : 45
VARIABLE             : 28 29 49 50 62 63 66 67 68 69 70 71 72 73 76 77
VBOOL                : 24
VINT                 : 18
WALL                 : 59
error                : 

Nonterminals, with rules where they appear

assigment            : 5
bool                 : 15
call_list            : 71 78
const                : 31 77
declaration          : 4
expr_list            : 12 29
expression           : 12 13 28 33 33 34 34 35 35 36 36 37 38 39 40 41 42 42 43 43 44 44 51 54 61 62 62 63 63 78 79
for                  : 6
func                 : 74 75
func_list            : 66 67 74
function             : 9
function_call        : 10
if                   : 7
ind_exp              : 55 55
index                : 50
int                  : 14
math_expression      : 32 56 64 65
operation            : 8
program              : 0
return_list          : 66 68 72
statement            : 2 3
stmt_list            : 1 2 62 63 64 65 66 67 68 69
type                 : 11 72 73 76 77
var                  : 11
variable             : 30 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    $end            reduce using rule 1 (program -> stmt_list .)
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 3

    (3) stmt_list -> statement .

    FOR             reduce using rule 3 (stmt_list -> statement .)
    IF              reduce using rule 3 (stmt_list -> statement .)
    MOVE            reduce using rule 3 (stmt_list -> statement .)
    RIGHT           reduce using rule 3 (stmt_list -> statement .)
    LEFT            reduce using rule 3 (stmt_list -> statement .)
    WALL            reduce using rule 3 (stmt_list -> statement .)
    EXIT            reduce using rule 3 (stmt_list -> statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> statement .)
    VARIABLE        reduce using rule 3 (stmt_list -> statement .)
    INT             reduce using rule 3 (stmt_list -> statement .)
    CINT            reduce using rule 3 (stmt_list -> statement .)
    VINT            reduce using rule 3 (stmt_list -> statement .)
    MINT            reduce using rule 3 (stmt_list -> statement .)
    CVINT           reduce using rule 3 (stmt_list -> statement .)
    CMINT           reduce using rule 3 (stmt_list -> statement .)
    BOOL            reduce using rule 3 (stmt_list -> statement .)
    CBOOL           reduce using rule 3 (stmt_list -> statement .)
    VBOOL           reduce using rule 3 (stmt_list -> statement .)
    MBOOL           reduce using rule 3 (stmt_list -> statement .)
    CVBOOL          reduce using rule 3 (stmt_list -> statement .)
    CMBOOL          reduce using rule 3 (stmt_list -> statement .)
    $end            reduce using rule 3 (stmt_list -> statement .)
    ENDIF           reduce using rule 3 (stmt_list -> statement .)
    END             reduce using rule 3 (stmt_list -> statement .)
    ENDFOR          reduce using rule 3 (stmt_list -> statement .)


state 4

    (4) statement -> declaration . NL

    NL              shift and go to state 38


state 5

    (5) statement -> assigment . NL

    NL              shift and go to state 39


state 6

    (6) statement -> for . NL

    NL              shift and go to state 40


state 7

    (7) statement -> if . NL

    NL              shift and go to state 41


state 8

    (8) statement -> operation . NL

    NL              shift and go to state 42


state 9

    (9) statement -> function . NL

    NL              shift and go to state 43


state 10

    (10) statement -> function_call . NL

    NL              shift and go to state 44


state 11

    (11) declaration -> type . var
    (73) return_list -> type . VARIABLE
    (28) var -> . VARIABLE EQ expression
    (29) var -> . VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKET

    VARIABLE        shift and go to state 46

    var                            shift and go to state 45

state 12

    (61) assigment -> variable . ASSIGMENT expression

    ASSIGMENT       shift and go to state 47


state 13

    (62) for -> FOR . VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> FOR . VARIABLE EQ expression COLON expression BEGIN stmt_list END

    VARIABLE        shift and go to state 48


state 14

    (70) function_call -> VARIABLE .
    (71) function_call -> VARIABLE . call_list
    (49) variable -> VARIABLE .
    (50) variable -> VARIABLE . LBRACKET index RBRACKET
    (78) call_list -> . call_list COMMA expression
    (79) call_list -> . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    NL              reduce using rule 70 (function_call -> VARIABLE .)
    ASSIGMENT       reduce using rule 49 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 51
    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    call_list                      shift and go to state 50
    expression                     shift and go to state 52
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 15

    (64) if -> IF . math_expression BEGINIF stmt_list ENDIF
    (65) if -> IF . math_expression BEGIN stmt_list END
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN

    SUM             shift and go to state 60
    DENY            shift and go to state 61
    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59

    math_expression                shift and go to state 62
    expression                     shift and go to state 63
    variable                       shift and go to state 53
    const                          shift and go to state 54

state 16

    (56) operation -> MOVE . LBRACKET math_expression RBRACKET

    LBRACKET        shift and go to state 64


state 17

    (57) operation -> RIGHT .

    NL              reduce using rule 57 (operation -> RIGHT .)


state 18

    (58) operation -> LEFT .

    NL              reduce using rule 58 (operation -> LEFT .)


state 19

    (59) operation -> WALL .

    NL              reduce using rule 59 (operation -> WALL .)


state 20

    (60) operation -> EXIT .

    NL              reduce using rule 60 (operation -> EXIT .)


state 21

    (66) function -> return_list . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> return_list . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (72) return_list -> return_list . COMMA type VARIABLE

    EQ              shift and go to state 65
    COMMA           shift and go to state 66


state 22

    (67) function -> FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (69) function -> FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN stmt_list END

    VARIABLE        shift and go to state 67


state 23

    (14) type -> int .

    VARIABLE        reduce using rule 14 (type -> int .)


state 24

    (15) type -> bool .

    VARIABLE        reduce using rule 15 (type -> bool .)


state 25

    (16) int -> INT .

    VARIABLE        reduce using rule 16 (int -> INT .)


state 26

    (17) int -> CINT .

    VARIABLE        reduce using rule 17 (int -> CINT .)


state 27

    (18) int -> VINT .

    VARIABLE        reduce using rule 18 (int -> VINT .)


state 28

    (19) int -> MINT .

    VARIABLE        reduce using rule 19 (int -> MINT .)


state 29

    (20) int -> CVINT .

    VARIABLE        reduce using rule 20 (int -> CVINT .)


state 30

    (21) int -> CMINT .

    VARIABLE        reduce using rule 21 (int -> CMINT .)


state 31

    (22) bool -> BOOL .

    VARIABLE        reduce using rule 22 (bool -> BOOL .)


state 32

    (23) bool -> CBOOL .

    VARIABLE        reduce using rule 23 (bool -> CBOOL .)


state 33

    (24) bool -> VBOOL .

    VARIABLE        reduce using rule 24 (bool -> VBOOL .)


state 34

    (25) bool -> MBOOL .

    VARIABLE        reduce using rule 25 (bool -> MBOOL .)


state 35

    (26) bool -> CVBOOL .

    VARIABLE        reduce using rule 26 (bool -> CVBOOL .)


state 36

    (27) bool -> CMBOOL .

    VARIABLE        reduce using rule 27 (bool -> CMBOOL .)


state 37

    (2) stmt_list -> stmt_list statement .

    FOR             reduce using rule 2 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 2 (stmt_list -> stmt_list statement .)
    MOVE            reduce using rule 2 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    WALL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    EXIT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 2 (stmt_list -> stmt_list statement .)
    VARIABLE        reduce using rule 2 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 2 (stmt_list -> stmt_list statement .)
    CINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    VINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    MINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    VBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    MBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDIF           reduce using rule 2 (stmt_list -> stmt_list statement .)
    END             reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDFOR          reduce using rule 2 (stmt_list -> stmt_list statement .)


state 38

    (4) statement -> declaration NL .

    FOR             reduce using rule 4 (statement -> declaration NL .)
    IF              reduce using rule 4 (statement -> declaration NL .)
    MOVE            reduce using rule 4 (statement -> declaration NL .)
    RIGHT           reduce using rule 4 (statement -> declaration NL .)
    LEFT            reduce using rule 4 (statement -> declaration NL .)
    WALL            reduce using rule 4 (statement -> declaration NL .)
    EXIT            reduce using rule 4 (statement -> declaration NL .)
    FUNCTION        reduce using rule 4 (statement -> declaration NL .)
    VARIABLE        reduce using rule 4 (statement -> declaration NL .)
    INT             reduce using rule 4 (statement -> declaration NL .)
    CINT            reduce using rule 4 (statement -> declaration NL .)
    VINT            reduce using rule 4 (statement -> declaration NL .)
    MINT            reduce using rule 4 (statement -> declaration NL .)
    CVINT           reduce using rule 4 (statement -> declaration NL .)
    CMINT           reduce using rule 4 (statement -> declaration NL .)
    BOOL            reduce using rule 4 (statement -> declaration NL .)
    CBOOL           reduce using rule 4 (statement -> declaration NL .)
    VBOOL           reduce using rule 4 (statement -> declaration NL .)
    MBOOL           reduce using rule 4 (statement -> declaration NL .)
    CVBOOL          reduce using rule 4 (statement -> declaration NL .)
    CMBOOL          reduce using rule 4 (statement -> declaration NL .)
    $end            reduce using rule 4 (statement -> declaration NL .)
    ENDIF           reduce using rule 4 (statement -> declaration NL .)
    END             reduce using rule 4 (statement -> declaration NL .)
    ENDFOR          reduce using rule 4 (statement -> declaration NL .)


state 39

    (5) statement -> assigment NL .

    FOR             reduce using rule 5 (statement -> assigment NL .)
    IF              reduce using rule 5 (statement -> assigment NL .)
    MOVE            reduce using rule 5 (statement -> assigment NL .)
    RIGHT           reduce using rule 5 (statement -> assigment NL .)
    LEFT            reduce using rule 5 (statement -> assigment NL .)
    WALL            reduce using rule 5 (statement -> assigment NL .)
    EXIT            reduce using rule 5 (statement -> assigment NL .)
    FUNCTION        reduce using rule 5 (statement -> assigment NL .)
    VARIABLE        reduce using rule 5 (statement -> assigment NL .)
    INT             reduce using rule 5 (statement -> assigment NL .)
    CINT            reduce using rule 5 (statement -> assigment NL .)
    VINT            reduce using rule 5 (statement -> assigment NL .)
    MINT            reduce using rule 5 (statement -> assigment NL .)
    CVINT           reduce using rule 5 (statement -> assigment NL .)
    CMINT           reduce using rule 5 (statement -> assigment NL .)
    BOOL            reduce using rule 5 (statement -> assigment NL .)
    CBOOL           reduce using rule 5 (statement -> assigment NL .)
    VBOOL           reduce using rule 5 (statement -> assigment NL .)
    MBOOL           reduce using rule 5 (statement -> assigment NL .)
    CVBOOL          reduce using rule 5 (statement -> assigment NL .)
    CMBOOL          reduce using rule 5 (statement -> assigment NL .)
    $end            reduce using rule 5 (statement -> assigment NL .)
    ENDIF           reduce using rule 5 (statement -> assigment NL .)
    END             reduce using rule 5 (statement -> assigment NL .)
    ENDFOR          reduce using rule 5 (statement -> assigment NL .)


state 40

    (6) statement -> for NL .

    FOR             reduce using rule 6 (statement -> for NL .)
    IF              reduce using rule 6 (statement -> for NL .)
    MOVE            reduce using rule 6 (statement -> for NL .)
    RIGHT           reduce using rule 6 (statement -> for NL .)
    LEFT            reduce using rule 6 (statement -> for NL .)
    WALL            reduce using rule 6 (statement -> for NL .)
    EXIT            reduce using rule 6 (statement -> for NL .)
    FUNCTION        reduce using rule 6 (statement -> for NL .)
    VARIABLE        reduce using rule 6 (statement -> for NL .)
    INT             reduce using rule 6 (statement -> for NL .)
    CINT            reduce using rule 6 (statement -> for NL .)
    VINT            reduce using rule 6 (statement -> for NL .)
    MINT            reduce using rule 6 (statement -> for NL .)
    CVINT           reduce using rule 6 (statement -> for NL .)
    CMINT           reduce using rule 6 (statement -> for NL .)
    BOOL            reduce using rule 6 (statement -> for NL .)
    CBOOL           reduce using rule 6 (statement -> for NL .)
    VBOOL           reduce using rule 6 (statement -> for NL .)
    MBOOL           reduce using rule 6 (statement -> for NL .)
    CVBOOL          reduce using rule 6 (statement -> for NL .)
    CMBOOL          reduce using rule 6 (statement -> for NL .)
    $end            reduce using rule 6 (statement -> for NL .)
    ENDIF           reduce using rule 6 (statement -> for NL .)
    END             reduce using rule 6 (statement -> for NL .)
    ENDFOR          reduce using rule 6 (statement -> for NL .)


state 41

    (7) statement -> if NL .

    FOR             reduce using rule 7 (statement -> if NL .)
    IF              reduce using rule 7 (statement -> if NL .)
    MOVE            reduce using rule 7 (statement -> if NL .)
    RIGHT           reduce using rule 7 (statement -> if NL .)
    LEFT            reduce using rule 7 (statement -> if NL .)
    WALL            reduce using rule 7 (statement -> if NL .)
    EXIT            reduce using rule 7 (statement -> if NL .)
    FUNCTION        reduce using rule 7 (statement -> if NL .)
    VARIABLE        reduce using rule 7 (statement -> if NL .)
    INT             reduce using rule 7 (statement -> if NL .)
    CINT            reduce using rule 7 (statement -> if NL .)
    VINT            reduce using rule 7 (statement -> if NL .)
    MINT            reduce using rule 7 (statement -> if NL .)
    CVINT           reduce using rule 7 (statement -> if NL .)
    CMINT           reduce using rule 7 (statement -> if NL .)
    BOOL            reduce using rule 7 (statement -> if NL .)
    CBOOL           reduce using rule 7 (statement -> if NL .)
    VBOOL           reduce using rule 7 (statement -> if NL .)
    MBOOL           reduce using rule 7 (statement -> if NL .)
    CVBOOL          reduce using rule 7 (statement -> if NL .)
    CMBOOL          reduce using rule 7 (statement -> if NL .)
    $end            reduce using rule 7 (statement -> if NL .)
    ENDIF           reduce using rule 7 (statement -> if NL .)
    END             reduce using rule 7 (statement -> if NL .)
    ENDFOR          reduce using rule 7 (statement -> if NL .)


state 42

    (8) statement -> operation NL .

    FOR             reduce using rule 8 (statement -> operation NL .)
    IF              reduce using rule 8 (statement -> operation NL .)
    MOVE            reduce using rule 8 (statement -> operation NL .)
    RIGHT           reduce using rule 8 (statement -> operation NL .)
    LEFT            reduce using rule 8 (statement -> operation NL .)
    WALL            reduce using rule 8 (statement -> operation NL .)
    EXIT            reduce using rule 8 (statement -> operation NL .)
    FUNCTION        reduce using rule 8 (statement -> operation NL .)
    VARIABLE        reduce using rule 8 (statement -> operation NL .)
    INT             reduce using rule 8 (statement -> operation NL .)
    CINT            reduce using rule 8 (statement -> operation NL .)
    VINT            reduce using rule 8 (statement -> operation NL .)
    MINT            reduce using rule 8 (statement -> operation NL .)
    CVINT           reduce using rule 8 (statement -> operation NL .)
    CMINT           reduce using rule 8 (statement -> operation NL .)
    BOOL            reduce using rule 8 (statement -> operation NL .)
    CBOOL           reduce using rule 8 (statement -> operation NL .)
    VBOOL           reduce using rule 8 (statement -> operation NL .)
    MBOOL           reduce using rule 8 (statement -> operation NL .)
    CVBOOL          reduce using rule 8 (statement -> operation NL .)
    CMBOOL          reduce using rule 8 (statement -> operation NL .)
    $end            reduce using rule 8 (statement -> operation NL .)
    ENDIF           reduce using rule 8 (statement -> operation NL .)
    END             reduce using rule 8 (statement -> operation NL .)
    ENDFOR          reduce using rule 8 (statement -> operation NL .)


state 43

    (9) statement -> function NL .

    FOR             reduce using rule 9 (statement -> function NL .)
    IF              reduce using rule 9 (statement -> function NL .)
    MOVE            reduce using rule 9 (statement -> function NL .)
    RIGHT           reduce using rule 9 (statement -> function NL .)
    LEFT            reduce using rule 9 (statement -> function NL .)
    WALL            reduce using rule 9 (statement -> function NL .)
    EXIT            reduce using rule 9 (statement -> function NL .)
    FUNCTION        reduce using rule 9 (statement -> function NL .)
    VARIABLE        reduce using rule 9 (statement -> function NL .)
    INT             reduce using rule 9 (statement -> function NL .)
    CINT            reduce using rule 9 (statement -> function NL .)
    VINT            reduce using rule 9 (statement -> function NL .)
    MINT            reduce using rule 9 (statement -> function NL .)
    CVINT           reduce using rule 9 (statement -> function NL .)
    CMINT           reduce using rule 9 (statement -> function NL .)
    BOOL            reduce using rule 9 (statement -> function NL .)
    CBOOL           reduce using rule 9 (statement -> function NL .)
    VBOOL           reduce using rule 9 (statement -> function NL .)
    MBOOL           reduce using rule 9 (statement -> function NL .)
    CVBOOL          reduce using rule 9 (statement -> function NL .)
    CMBOOL          reduce using rule 9 (statement -> function NL .)
    $end            reduce using rule 9 (statement -> function NL .)
    ENDIF           reduce using rule 9 (statement -> function NL .)
    END             reduce using rule 9 (statement -> function NL .)
    ENDFOR          reduce using rule 9 (statement -> function NL .)


state 44

    (10) statement -> function_call NL .

    FOR             reduce using rule 10 (statement -> function_call NL .)
    IF              reduce using rule 10 (statement -> function_call NL .)
    MOVE            reduce using rule 10 (statement -> function_call NL .)
    RIGHT           reduce using rule 10 (statement -> function_call NL .)
    LEFT            reduce using rule 10 (statement -> function_call NL .)
    WALL            reduce using rule 10 (statement -> function_call NL .)
    EXIT            reduce using rule 10 (statement -> function_call NL .)
    FUNCTION        reduce using rule 10 (statement -> function_call NL .)
    VARIABLE        reduce using rule 10 (statement -> function_call NL .)
    INT             reduce using rule 10 (statement -> function_call NL .)
    CINT            reduce using rule 10 (statement -> function_call NL .)
    VINT            reduce using rule 10 (statement -> function_call NL .)
    MINT            reduce using rule 10 (statement -> function_call NL .)
    CVINT           reduce using rule 10 (statement -> function_call NL .)
    CMINT           reduce using rule 10 (statement -> function_call NL .)
    BOOL            reduce using rule 10 (statement -> function_call NL .)
    CBOOL           reduce using rule 10 (statement -> function_call NL .)
    VBOOL           reduce using rule 10 (statement -> function_call NL .)
    MBOOL           reduce using rule 10 (statement -> function_call NL .)
    CVBOOL          reduce using rule 10 (statement -> function_call NL .)
    CMBOOL          reduce using rule 10 (statement -> function_call NL .)
    $end            reduce using rule 10 (statement -> function_call NL .)
    ENDIF           reduce using rule 10 (statement -> function_call NL .)
    END             reduce using rule 10 (statement -> function_call NL .)
    ENDFOR          reduce using rule 10 (statement -> function_call NL .)


state 45

    (11) declaration -> type var .

    NL              reduce using rule 11 (declaration -> type var .)


state 46

    (73) return_list -> type VARIABLE .
    (28) var -> VARIABLE . EQ expression
    (29) var -> VARIABLE . EQ L_FIGBRACKET expr_list R_FIGBRACKET

  ! shift/reduce conflict for EQ resolved as shift
    COMMA           reduce using rule 73 (return_list -> type VARIABLE .)
    EQ              shift and go to state 68

  ! EQ              [ reduce using rule 73 (return_list -> type VARIABLE .) ]


state 47

    (61) assigment -> variable ASSIGMENT . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    variable                       shift and go to state 53
    expression                     shift and go to state 69
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 48

    (62) for -> FOR VARIABLE . EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> FOR VARIABLE . EQ expression COLON expression BEGIN stmt_list END

    EQ              shift and go to state 70


state 49

    (49) variable -> VARIABLE .
    (50) variable -> VARIABLE . LBRACKET index RBRACKET

    PLUS            reduce using rule 49 (variable -> VARIABLE .)
    MINUS           reduce using rule 49 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 49 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 49 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 49 (variable -> VARIABLE .)
    STL             reduce using rule 49 (variable -> VARIABLE .)
    STR             reduce using rule 49 (variable -> VARIABLE .)
    AND             reduce using rule 49 (variable -> VARIABLE .)
    LESS            reduce using rule 49 (variable -> VARIABLE .)
    GREATER         reduce using rule 49 (variable -> VARIABLE .)
    COMMA           reduce using rule 49 (variable -> VARIABLE .)
    NL              reduce using rule 49 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 49 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 49 (variable -> VARIABLE .)
    BEGIN           reduce using rule 49 (variable -> VARIABLE .)
    COLON           reduce using rule 49 (variable -> VARIABLE .)
    R_FIGBRACKET    reduce using rule 49 (variable -> VARIABLE .)
    VARIABLE        reduce using rule 49 (variable -> VARIABLE .)
    TRUE            reduce using rule 49 (variable -> VARIABLE .)
    FALSE           reduce using rule 49 (variable -> VARIABLE .)
    INT_DEC         reduce using rule 49 (variable -> VARIABLE .)
    INT_BIN         reduce using rule 49 (variable -> VARIABLE .)
    SUM             reduce using rule 49 (variable -> VARIABLE .)
    DENY            reduce using rule 49 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 49 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 51


state 50

    (71) function_call -> VARIABLE call_list .
    (78) call_list -> call_list . COMMA expression

    NL              reduce using rule 71 (function_call -> VARIABLE call_list .)
    COMMA           shift and go to state 71


state 51

    (50) variable -> VARIABLE LBRACKET . index RBRACKET
    (54) index -> . expression
    (55) index -> . ind_exp COMMA ind_exp
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (51) ind_exp -> . expression
    (52) ind_exp -> . COLON
    (53) ind_exp -> .
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    COLON           shift and go to state 75
    COMMA           reduce using rule 53 (ind_exp -> .)
    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    index                          shift and go to state 72
    expression                     shift and go to state 73
    ind_exp                        shift and go to state 74
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 52

    (79) call_list -> expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 79 (call_list -> expression .)
    NL              reduce using rule 79 (call_list -> expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 53

    (30) expression -> variable .

    PLUS            reduce using rule 30 (expression -> variable .)
    MINUS           reduce using rule 30 (expression -> variable .)
    MUL_MATRIX      reduce using rule 30 (expression -> variable .)
    MUL_ELEM        reduce using rule 30 (expression -> variable .)
    TRANSPOSE       reduce using rule 30 (expression -> variable .)
    STL             reduce using rule 30 (expression -> variable .)
    STR             reduce using rule 30 (expression -> variable .)
    AND             reduce using rule 30 (expression -> variable .)
    LESS            reduce using rule 30 (expression -> variable .)
    GREATER         reduce using rule 30 (expression -> variable .)
    COMMA           reduce using rule 30 (expression -> variable .)
    NL              reduce using rule 30 (expression -> variable .)
    RBRACKET        reduce using rule 30 (expression -> variable .)
    BEGINIF         reduce using rule 30 (expression -> variable .)
    BEGIN           reduce using rule 30 (expression -> variable .)
    COLON           reduce using rule 30 (expression -> variable .)
    R_FIGBRACKET    reduce using rule 30 (expression -> variable .)
    VARIABLE        reduce using rule 30 (expression -> variable .)
    TRUE            reduce using rule 30 (expression -> variable .)
    FALSE           reduce using rule 30 (expression -> variable .)
    INT_DEC         reduce using rule 30 (expression -> variable .)
    INT_BIN         reduce using rule 30 (expression -> variable .)
    SUM             reduce using rule 30 (expression -> variable .)
    DENY            reduce using rule 30 (expression -> variable .)
    BEGINFOR        reduce using rule 30 (expression -> variable .)


state 54

    (31) expression -> const .

    PLUS            reduce using rule 31 (expression -> const .)
    MINUS           reduce using rule 31 (expression -> const .)
    MUL_MATRIX      reduce using rule 31 (expression -> const .)
    MUL_ELEM        reduce using rule 31 (expression -> const .)
    TRANSPOSE       reduce using rule 31 (expression -> const .)
    STL             reduce using rule 31 (expression -> const .)
    STR             reduce using rule 31 (expression -> const .)
    AND             reduce using rule 31 (expression -> const .)
    LESS            reduce using rule 31 (expression -> const .)
    GREATER         reduce using rule 31 (expression -> const .)
    COMMA           reduce using rule 31 (expression -> const .)
    NL              reduce using rule 31 (expression -> const .)
    RBRACKET        reduce using rule 31 (expression -> const .)
    BEGINIF         reduce using rule 31 (expression -> const .)
    BEGIN           reduce using rule 31 (expression -> const .)
    COLON           reduce using rule 31 (expression -> const .)
    R_FIGBRACKET    reduce using rule 31 (expression -> const .)
    VARIABLE        reduce using rule 31 (expression -> const .)
    TRUE            reduce using rule 31 (expression -> const .)
    FALSE           reduce using rule 31 (expression -> const .)
    INT_DEC         reduce using rule 31 (expression -> const .)
    INT_BIN         reduce using rule 31 (expression -> const .)
    SUM             reduce using rule 31 (expression -> const .)
    DENY            reduce using rule 31 (expression -> const .)
    BEGINFOR        reduce using rule 31 (expression -> const .)


state 55

    (32) expression -> math_expression .

    PLUS            reduce using rule 32 (expression -> math_expression .)
    MINUS           reduce using rule 32 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 32 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 32 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 32 (expression -> math_expression .)
    STL             reduce using rule 32 (expression -> math_expression .)
    STR             reduce using rule 32 (expression -> math_expression .)
    AND             reduce using rule 32 (expression -> math_expression .)
    LESS            reduce using rule 32 (expression -> math_expression .)
    GREATER         reduce using rule 32 (expression -> math_expression .)
    COMMA           reduce using rule 32 (expression -> math_expression .)
    NL              reduce using rule 32 (expression -> math_expression .)
    RBRACKET        reduce using rule 32 (expression -> math_expression .)
    BEGINIF         reduce using rule 32 (expression -> math_expression .)
    BEGIN           reduce using rule 32 (expression -> math_expression .)
    COLON           reduce using rule 32 (expression -> math_expression .)
    R_FIGBRACKET    reduce using rule 32 (expression -> math_expression .)
    VARIABLE        reduce using rule 32 (expression -> math_expression .)
    TRUE            reduce using rule 32 (expression -> math_expression .)
    FALSE           reduce using rule 32 (expression -> math_expression .)
    INT_DEC         reduce using rule 32 (expression -> math_expression .)
    INT_BIN         reduce using rule 32 (expression -> math_expression .)
    SUM             reduce using rule 32 (expression -> math_expression .)
    DENY            reduce using rule 32 (expression -> math_expression .)
    BEGINFOR        reduce using rule 32 (expression -> math_expression .)


state 56

    (45) const -> TRUE .

    PLUS            reduce using rule 45 (const -> TRUE .)
    MINUS           reduce using rule 45 (const -> TRUE .)
    MUL_MATRIX      reduce using rule 45 (const -> TRUE .)
    MUL_ELEM        reduce using rule 45 (const -> TRUE .)
    TRANSPOSE       reduce using rule 45 (const -> TRUE .)
    STL             reduce using rule 45 (const -> TRUE .)
    STR             reduce using rule 45 (const -> TRUE .)
    AND             reduce using rule 45 (const -> TRUE .)
    LESS            reduce using rule 45 (const -> TRUE .)
    GREATER         reduce using rule 45 (const -> TRUE .)
    COMMA           reduce using rule 45 (const -> TRUE .)
    NL              reduce using rule 45 (const -> TRUE .)
    RBRACKET        reduce using rule 45 (const -> TRUE .)
    BEGINIF         reduce using rule 45 (const -> TRUE .)
    BEGIN           reduce using rule 45 (const -> TRUE .)
    COLON           reduce using rule 45 (const -> TRUE .)
    R_FIGBRACKET    reduce using rule 45 (const -> TRUE .)
    VARIABLE        reduce using rule 45 (const -> TRUE .)
    TRUE            reduce using rule 45 (const -> TRUE .)
    FALSE           reduce using rule 45 (const -> TRUE .)
    INT_DEC         reduce using rule 45 (const -> TRUE .)
    INT_BIN         reduce using rule 45 (const -> TRUE .)
    SUM             reduce using rule 45 (const -> TRUE .)
    DENY            reduce using rule 45 (const -> TRUE .)
    BEGINFOR        reduce using rule 45 (const -> TRUE .)


state 57

    (46) const -> FALSE .

    PLUS            reduce using rule 46 (const -> FALSE .)
    MINUS           reduce using rule 46 (const -> FALSE .)
    MUL_MATRIX      reduce using rule 46 (const -> FALSE .)
    MUL_ELEM        reduce using rule 46 (const -> FALSE .)
    TRANSPOSE       reduce using rule 46 (const -> FALSE .)
    STL             reduce using rule 46 (const -> FALSE .)
    STR             reduce using rule 46 (const -> FALSE .)
    AND             reduce using rule 46 (const -> FALSE .)
    LESS            reduce using rule 46 (const -> FALSE .)
    GREATER         reduce using rule 46 (const -> FALSE .)
    COMMA           reduce using rule 46 (const -> FALSE .)
    NL              reduce using rule 46 (const -> FALSE .)
    RBRACKET        reduce using rule 46 (const -> FALSE .)
    BEGINIF         reduce using rule 46 (const -> FALSE .)
    BEGIN           reduce using rule 46 (const -> FALSE .)
    COLON           reduce using rule 46 (const -> FALSE .)
    R_FIGBRACKET    reduce using rule 46 (const -> FALSE .)
    VARIABLE        reduce using rule 46 (const -> FALSE .)
    TRUE            reduce using rule 46 (const -> FALSE .)
    FALSE           reduce using rule 46 (const -> FALSE .)
    INT_DEC         reduce using rule 46 (const -> FALSE .)
    INT_BIN         reduce using rule 46 (const -> FALSE .)
    SUM             reduce using rule 46 (const -> FALSE .)
    DENY            reduce using rule 46 (const -> FALSE .)
    BEGINFOR        reduce using rule 46 (const -> FALSE .)


state 58

    (47) const -> INT_DEC .

    PLUS            reduce using rule 47 (const -> INT_DEC .)
    MINUS           reduce using rule 47 (const -> INT_DEC .)
    MUL_MATRIX      reduce using rule 47 (const -> INT_DEC .)
    MUL_ELEM        reduce using rule 47 (const -> INT_DEC .)
    TRANSPOSE       reduce using rule 47 (const -> INT_DEC .)
    STL             reduce using rule 47 (const -> INT_DEC .)
    STR             reduce using rule 47 (const -> INT_DEC .)
    AND             reduce using rule 47 (const -> INT_DEC .)
    LESS            reduce using rule 47 (const -> INT_DEC .)
    GREATER         reduce using rule 47 (const -> INT_DEC .)
    COMMA           reduce using rule 47 (const -> INT_DEC .)
    NL              reduce using rule 47 (const -> INT_DEC .)
    RBRACKET        reduce using rule 47 (const -> INT_DEC .)
    BEGINIF         reduce using rule 47 (const -> INT_DEC .)
    BEGIN           reduce using rule 47 (const -> INT_DEC .)
    COLON           reduce using rule 47 (const -> INT_DEC .)
    R_FIGBRACKET    reduce using rule 47 (const -> INT_DEC .)
    VARIABLE        reduce using rule 47 (const -> INT_DEC .)
    TRUE            reduce using rule 47 (const -> INT_DEC .)
    FALSE           reduce using rule 47 (const -> INT_DEC .)
    INT_DEC         reduce using rule 47 (const -> INT_DEC .)
    INT_BIN         reduce using rule 47 (const -> INT_DEC .)
    SUM             reduce using rule 47 (const -> INT_DEC .)
    DENY            reduce using rule 47 (const -> INT_DEC .)
    BEGINFOR        reduce using rule 47 (const -> INT_DEC .)


state 59

    (48) const -> INT_BIN .

    PLUS            reduce using rule 48 (const -> INT_BIN .)
    MINUS           reduce using rule 48 (const -> INT_BIN .)
    MUL_MATRIX      reduce using rule 48 (const -> INT_BIN .)
    MUL_ELEM        reduce using rule 48 (const -> INT_BIN .)
    TRANSPOSE       reduce using rule 48 (const -> INT_BIN .)
    STL             reduce using rule 48 (const -> INT_BIN .)
    STR             reduce using rule 48 (const -> INT_BIN .)
    AND             reduce using rule 48 (const -> INT_BIN .)
    LESS            reduce using rule 48 (const -> INT_BIN .)
    GREATER         reduce using rule 48 (const -> INT_BIN .)
    COMMA           reduce using rule 48 (const -> INT_BIN .)
    NL              reduce using rule 48 (const -> INT_BIN .)
    RBRACKET        reduce using rule 48 (const -> INT_BIN .)
    BEGINIF         reduce using rule 48 (const -> INT_BIN .)
    BEGIN           reduce using rule 48 (const -> INT_BIN .)
    COLON           reduce using rule 48 (const -> INT_BIN .)
    R_FIGBRACKET    reduce using rule 48 (const -> INT_BIN .)
    VARIABLE        reduce using rule 48 (const -> INT_BIN .)
    TRUE            reduce using rule 48 (const -> INT_BIN .)
    FALSE           reduce using rule 48 (const -> INT_BIN .)
    INT_DEC         reduce using rule 48 (const -> INT_BIN .)
    INT_BIN         reduce using rule 48 (const -> INT_BIN .)
    SUM             reduce using rule 48 (const -> INT_BIN .)
    DENY            reduce using rule 48 (const -> INT_BIN .)
    BEGINFOR        reduce using rule 48 (const -> INT_BIN .)


state 60

    (38) math_expression -> SUM . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 86


state 61

    (41) math_expression -> DENY . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 87
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 62

    (64) if -> IF math_expression . BEGINIF stmt_list ENDIF
    (65) if -> IF math_expression . BEGIN stmt_list END
    (32) expression -> math_expression .

    BEGINIF         shift and go to state 88
    BEGIN           shift and go to state 89
    PLUS            reduce using rule 32 (expression -> math_expression .)
    MINUS           reduce using rule 32 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 32 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 32 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 32 (expression -> math_expression .)
    STL             reduce using rule 32 (expression -> math_expression .)
    STR             reduce using rule 32 (expression -> math_expression .)
    AND             reduce using rule 32 (expression -> math_expression .)
    LESS            reduce using rule 32 (expression -> math_expression .)
    GREATER         reduce using rule 32 (expression -> math_expression .)


state 63

    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 64

    (56) operation -> MOVE LBRACKET . math_expression RBRACKET
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN

    SUM             shift and go to state 60
    DENY            shift and go to state 61
    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59

    math_expression                shift and go to state 90
    expression                     shift and go to state 63
    variable                       shift and go to state 53
    const                          shift and go to state 54

state 65

    (66) function -> return_list EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> return_list EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END

    FUNCTION        shift and go to state 91


state 66

    (72) return_list -> return_list COMMA . type VARIABLE
    (14) type -> . int
    (15) type -> . bool
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    type                           shift and go to state 92
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 67

    (67) function -> FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN stmt_list END
    (69) function -> FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN stmt_list END

    LBRACKET        shift and go to state 93


state 68

    (28) var -> VARIABLE EQ . expression
    (29) var -> VARIABLE EQ . L_FIGBRACKET expr_list R_FIGBRACKET
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    L_FIGBRACKET    shift and go to state 95
    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 94
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 69

    (61) assigment -> variable ASSIGMENT expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    NL              reduce using rule 61 (assigment -> variable ASSIGMENT expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 70

    (62) for -> FOR VARIABLE EQ . expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> FOR VARIABLE EQ . expression COLON expression BEGIN stmt_list END
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 96
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 71

    (78) call_list -> call_list COMMA . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 97
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 72

    (50) variable -> VARIABLE LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 98


state 73

    (54) index -> expression .
    (51) ind_exp -> expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    RBRACKET        reduce using rule 54 (index -> expression .)
    COMMA           reduce using rule 51 (ind_exp -> expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 74

    (55) index -> ind_exp . COMMA ind_exp

    COMMA           shift and go to state 99


state 75

    (52) ind_exp -> COLON .

    COMMA           reduce using rule 52 (ind_exp -> COLON .)
    RBRACKET        reduce using rule 52 (ind_exp -> COLON .)


state 76

    (33) math_expression -> expression PLUS . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 100
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 77

    (34) math_expression -> expression MINUS . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 101
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 78

    (35) math_expression -> expression MUL_MATRIX . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 102
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 79

    (36) math_expression -> expression MUL_ELEM . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 103
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 80

    (37) math_expression -> expression TRANSPOSE .

    PLUS            reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    MINUS           reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    MUL_MATRIX      reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    MUL_ELEM        reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    STL             reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    STR             reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    AND             reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    LESS            reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    GREATER         reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    COMMA           reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    NL              reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    BEGINIF         reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    BEGIN           reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    RBRACKET        reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    COLON           reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    R_FIGBRACKET    reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    VARIABLE        reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    TRUE            reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    FALSE           reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    INT_DEC         reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    INT_BIN         reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    SUM             reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    DENY            reduce using rule 37 (math_expression -> expression TRANSPOSE .)
    BEGINFOR        reduce using rule 37 (math_expression -> expression TRANSPOSE .)


state 81

    (39) math_expression -> expression STL .

    PLUS            reduce using rule 39 (math_expression -> expression STL .)
    MINUS           reduce using rule 39 (math_expression -> expression STL .)
    MUL_MATRIX      reduce using rule 39 (math_expression -> expression STL .)
    MUL_ELEM        reduce using rule 39 (math_expression -> expression STL .)
    TRANSPOSE       reduce using rule 39 (math_expression -> expression STL .)
    STL             reduce using rule 39 (math_expression -> expression STL .)
    STR             reduce using rule 39 (math_expression -> expression STL .)
    AND             reduce using rule 39 (math_expression -> expression STL .)
    LESS            reduce using rule 39 (math_expression -> expression STL .)
    GREATER         reduce using rule 39 (math_expression -> expression STL .)
    COMMA           reduce using rule 39 (math_expression -> expression STL .)
    NL              reduce using rule 39 (math_expression -> expression STL .)
    BEGINIF         reduce using rule 39 (math_expression -> expression STL .)
    BEGIN           reduce using rule 39 (math_expression -> expression STL .)
    RBRACKET        reduce using rule 39 (math_expression -> expression STL .)
    COLON           reduce using rule 39 (math_expression -> expression STL .)
    R_FIGBRACKET    reduce using rule 39 (math_expression -> expression STL .)
    VARIABLE        reduce using rule 39 (math_expression -> expression STL .)
    TRUE            reduce using rule 39 (math_expression -> expression STL .)
    FALSE           reduce using rule 39 (math_expression -> expression STL .)
    INT_DEC         reduce using rule 39 (math_expression -> expression STL .)
    INT_BIN         reduce using rule 39 (math_expression -> expression STL .)
    SUM             reduce using rule 39 (math_expression -> expression STL .)
    DENY            reduce using rule 39 (math_expression -> expression STL .)
    BEGINFOR        reduce using rule 39 (math_expression -> expression STL .)


state 82

    (40) math_expression -> expression STR .

    PLUS            reduce using rule 40 (math_expression -> expression STR .)
    MINUS           reduce using rule 40 (math_expression -> expression STR .)
    MUL_MATRIX      reduce using rule 40 (math_expression -> expression STR .)
    MUL_ELEM        reduce using rule 40 (math_expression -> expression STR .)
    TRANSPOSE       reduce using rule 40 (math_expression -> expression STR .)
    STL             reduce using rule 40 (math_expression -> expression STR .)
    STR             reduce using rule 40 (math_expression -> expression STR .)
    AND             reduce using rule 40 (math_expression -> expression STR .)
    LESS            reduce using rule 40 (math_expression -> expression STR .)
    GREATER         reduce using rule 40 (math_expression -> expression STR .)
    COMMA           reduce using rule 40 (math_expression -> expression STR .)
    NL              reduce using rule 40 (math_expression -> expression STR .)
    BEGINIF         reduce using rule 40 (math_expression -> expression STR .)
    BEGIN           reduce using rule 40 (math_expression -> expression STR .)
    RBRACKET        reduce using rule 40 (math_expression -> expression STR .)
    COLON           reduce using rule 40 (math_expression -> expression STR .)
    R_FIGBRACKET    reduce using rule 40 (math_expression -> expression STR .)
    VARIABLE        reduce using rule 40 (math_expression -> expression STR .)
    TRUE            reduce using rule 40 (math_expression -> expression STR .)
    FALSE           reduce using rule 40 (math_expression -> expression STR .)
    INT_DEC         reduce using rule 40 (math_expression -> expression STR .)
    INT_BIN         reduce using rule 40 (math_expression -> expression STR .)
    SUM             reduce using rule 40 (math_expression -> expression STR .)
    DENY            reduce using rule 40 (math_expression -> expression STR .)
    BEGINFOR        reduce using rule 40 (math_expression -> expression STR .)


state 83

    (42) math_expression -> expression AND . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 104
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 84

    (43) math_expression -> expression LESS . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 105
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 85

    (44) math_expression -> expression GREATER . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 106
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 86

    (38) math_expression -> SUM LBRACKET . expression RBRACKET
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 107
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 87

    (41) math_expression -> DENY expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 41 (math_expression -> DENY expression .)
    NL              reduce using rule 41 (math_expression -> DENY expression .)
    BEGINIF         reduce using rule 41 (math_expression -> DENY expression .)
    BEGIN           reduce using rule 41 (math_expression -> DENY expression .)
    RBRACKET        reduce using rule 41 (math_expression -> DENY expression .)
    COLON           reduce using rule 41 (math_expression -> DENY expression .)
    R_FIGBRACKET    reduce using rule 41 (math_expression -> DENY expression .)
    VARIABLE        reduce using rule 41 (math_expression -> DENY expression .)
    TRUE            reduce using rule 41 (math_expression -> DENY expression .)
    FALSE           reduce using rule 41 (math_expression -> DENY expression .)
    INT_DEC         reduce using rule 41 (math_expression -> DENY expression .)
    INT_BIN         reduce using rule 41 (math_expression -> DENY expression .)
    SUM             reduce using rule 41 (math_expression -> DENY expression .)
    DENY            reduce using rule 41 (math_expression -> DENY expression .)
    BEGINFOR        reduce using rule 41 (math_expression -> DENY expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! MINUS           [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! MUL_MATRIX      [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! MUL_ELEM        [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! TRANSPOSE       [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! STL             [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! STR             [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! AND             [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! LESS            [ reduce using rule 41 (math_expression -> DENY expression .) ]
  ! GREATER         [ reduce using rule 41 (math_expression -> DENY expression .) ]


state 88

    (64) if -> IF math_expression BEGINIF . stmt_list ENDIF
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 108
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 89

    (65) if -> IF math_expression BEGIN . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 109
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 90

    (56) operation -> MOVE LBRACKET math_expression . RBRACKET
    (32) expression -> math_expression .

    RBRACKET        shift and go to state 110
    PLUS            reduce using rule 32 (expression -> math_expression .)
    MINUS           reduce using rule 32 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 32 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 32 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 32 (expression -> math_expression .)
    STL             reduce using rule 32 (expression -> math_expression .)
    STR             reduce using rule 32 (expression -> math_expression .)
    AND             reduce using rule 32 (expression -> math_expression .)
    LESS            reduce using rule 32 (expression -> math_expression .)
    GREATER         reduce using rule 32 (expression -> math_expression .)


state 91

    (66) function -> return_list EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> return_list EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN stmt_list END

    VARIABLE        shift and go to state 111


state 92

    (72) return_list -> return_list COMMA type . VARIABLE

    VARIABLE        shift and go to state 112


state 93

    (67) function -> FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN stmt_list END
    (69) function -> FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN stmt_list END
    (74) func_list -> . func_list COMMA func
    (75) func_list -> . func
    (76) func -> . type VARIABLE
    (77) func -> . type VARIABLE EQ const
    (14) type -> . int
    (15) type -> . bool
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    RBRACKET        shift and go to state 114
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    func_list                      shift and go to state 113
    func                           shift and go to state 115
    type                           shift and go to state 116
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 94

    (28) var -> VARIABLE EQ expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    NL              reduce using rule 28 (var -> VARIABLE EQ expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 95

    (29) var -> VARIABLE EQ L_FIGBRACKET . expr_list R_FIGBRACKET
    (12) expr_list -> . expr_list expression
    (13) expr_list -> . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expr_list                      shift and go to state 117
    expression                     shift and go to state 118
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 96

    (62) for -> FOR VARIABLE EQ expression . COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> FOR VARIABLE EQ expression . COLON expression BEGIN stmt_list END
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    COLON           shift and go to state 119
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 97

    (78) call_list -> call_list COMMA expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 78 (call_list -> call_list COMMA expression .)
    NL              reduce using rule 78 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 98

    (50) variable -> VARIABLE LBRACKET index RBRACKET .

    ASSIGMENT       reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    PLUS            reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MINUS           reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_MATRIX      reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_ELEM        reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    TRANSPOSE       reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STL             reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STR             reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    AND             reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    LESS            reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    GREATER         reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COMMA           reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    NL              reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    RBRACKET        reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINIF         reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGIN           reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COLON           reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    R_FIGBRACKET    reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    VARIABLE        reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    TRUE            reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    FALSE           reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    INT_DEC         reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    INT_BIN         reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    SUM             reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    DENY            reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINFOR        reduce using rule 50 (variable -> VARIABLE LBRACKET index RBRACKET .)


state 99

    (55) index -> ind_exp COMMA . ind_exp
    (51) ind_exp -> . expression
    (52) ind_exp -> . COLON
    (53) ind_exp -> .
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    COLON           shift and go to state 75
    RBRACKET        reduce using rule 53 (ind_exp -> .)
    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    ind_exp                        shift and go to state 120
    expression                     shift and go to state 121
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 100

    (33) math_expression -> expression PLUS expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 33 (math_expression -> expression PLUS expression .)
    NL              reduce using rule 33 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 33 (math_expression -> expression PLUS expression .)
    BEGIN           reduce using rule 33 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 33 (math_expression -> expression PLUS expression .)
    COLON           reduce using rule 33 (math_expression -> expression PLUS expression .)
    R_FIGBRACKET    reduce using rule 33 (math_expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 33 (math_expression -> expression PLUS expression .)
    TRUE            reduce using rule 33 (math_expression -> expression PLUS expression .)
    FALSE           reduce using rule 33 (math_expression -> expression PLUS expression .)
    INT_DEC         reduce using rule 33 (math_expression -> expression PLUS expression .)
    INT_BIN         reduce using rule 33 (math_expression -> expression PLUS expression .)
    SUM             reduce using rule 33 (math_expression -> expression PLUS expression .)
    DENY            reduce using rule 33 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 33 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! STL             [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! STR             [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 33 (math_expression -> expression PLUS expression .) ]


state 101

    (34) math_expression -> expression MINUS expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 34 (math_expression -> expression MINUS expression .)
    NL              reduce using rule 34 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 34 (math_expression -> expression MINUS expression .)
    BEGIN           reduce using rule 34 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 34 (math_expression -> expression MINUS expression .)
    COLON           reduce using rule 34 (math_expression -> expression MINUS expression .)
    R_FIGBRACKET    reduce using rule 34 (math_expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 34 (math_expression -> expression MINUS expression .)
    TRUE            reduce using rule 34 (math_expression -> expression MINUS expression .)
    FALSE           reduce using rule 34 (math_expression -> expression MINUS expression .)
    INT_DEC         reduce using rule 34 (math_expression -> expression MINUS expression .)
    INT_BIN         reduce using rule 34 (math_expression -> expression MINUS expression .)
    SUM             reduce using rule 34 (math_expression -> expression MINUS expression .)
    DENY            reduce using rule 34 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 34 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! STL             [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! STR             [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 34 (math_expression -> expression MINUS expression .) ]


state 102

    (35) math_expression -> expression MUL_MATRIX expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    NL              reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    BEGINIF         reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    BEGIN           reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    RBRACKET        reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    COLON           reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    R_FIGBRACKET    reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    VARIABLE        reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    TRUE            reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    FALSE           reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    INT_DEC         reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    INT_BIN         reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    SUM             reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    DENY            reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    BEGINFOR        reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MINUS           [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_MATRIX      [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_ELEM        [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! TRANSPOSE       [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STL             [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STR             [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! AND             [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! LESS            [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]
  ! GREATER         [ reduce using rule 35 (math_expression -> expression MUL_MATRIX expression .) ]


state 103

    (36) math_expression -> expression MUL_ELEM expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    NL              reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    BEGINIF         reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    BEGIN           reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    RBRACKET        reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    COLON           reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    R_FIGBRACKET    reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    VARIABLE        reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    TRUE            reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    FALSE           reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    INT_DEC         reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    INT_BIN         reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    SUM             reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    DENY            reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    BEGINFOR        reduce using rule 36 (math_expression -> expression MUL_ELEM expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! MINUS           [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_MATRIX      [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_ELEM        [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! TRANSPOSE       [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! STL             [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! STR             [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! AND             [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! LESS            [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]
  ! GREATER         [ reduce using rule 36 (math_expression -> expression MUL_ELEM expression .) ]


state 104

    (42) math_expression -> expression AND expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 42 (math_expression -> expression AND expression .)
    NL              reduce using rule 42 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 42 (math_expression -> expression AND expression .)
    BEGIN           reduce using rule 42 (math_expression -> expression AND expression .)
    RBRACKET        reduce using rule 42 (math_expression -> expression AND expression .)
    COLON           reduce using rule 42 (math_expression -> expression AND expression .)
    R_FIGBRACKET    reduce using rule 42 (math_expression -> expression AND expression .)
    VARIABLE        reduce using rule 42 (math_expression -> expression AND expression .)
    TRUE            reduce using rule 42 (math_expression -> expression AND expression .)
    FALSE           reduce using rule 42 (math_expression -> expression AND expression .)
    INT_DEC         reduce using rule 42 (math_expression -> expression AND expression .)
    INT_BIN         reduce using rule 42 (math_expression -> expression AND expression .)
    SUM             reduce using rule 42 (math_expression -> expression AND expression .)
    DENY            reduce using rule 42 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 42 (math_expression -> expression AND expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! MUL_MATRIX      [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! MUL_ELEM        [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! TRANSPOSE       [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! STL             [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! STR             [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 42 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 42 (math_expression -> expression AND expression .) ]


state 105

    (43) math_expression -> expression LESS expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 43 (math_expression -> expression LESS expression .)
    NL              reduce using rule 43 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 43 (math_expression -> expression LESS expression .)
    BEGIN           reduce using rule 43 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 43 (math_expression -> expression LESS expression .)
    COLON           reduce using rule 43 (math_expression -> expression LESS expression .)
    R_FIGBRACKET    reduce using rule 43 (math_expression -> expression LESS expression .)
    VARIABLE        reduce using rule 43 (math_expression -> expression LESS expression .)
    TRUE            reduce using rule 43 (math_expression -> expression LESS expression .)
    FALSE           reduce using rule 43 (math_expression -> expression LESS expression .)
    INT_DEC         reduce using rule 43 (math_expression -> expression LESS expression .)
    INT_BIN         reduce using rule 43 (math_expression -> expression LESS expression .)
    SUM             reduce using rule 43 (math_expression -> expression LESS expression .)
    DENY            reduce using rule 43 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 43 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! MUL_ELEM        [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! TRANSPOSE       [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! STL             [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! STR             [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! AND             [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 43 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 43 (math_expression -> expression LESS expression .) ]


state 106

    (44) math_expression -> expression GREATER expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 44 (math_expression -> expression GREATER expression .)
    NL              reduce using rule 44 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 44 (math_expression -> expression GREATER expression .)
    BEGIN           reduce using rule 44 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 44 (math_expression -> expression GREATER expression .)
    COLON           reduce using rule 44 (math_expression -> expression GREATER expression .)
    R_FIGBRACKET    reduce using rule 44 (math_expression -> expression GREATER expression .)
    VARIABLE        reduce using rule 44 (math_expression -> expression GREATER expression .)
    TRUE            reduce using rule 44 (math_expression -> expression GREATER expression .)
    FALSE           reduce using rule 44 (math_expression -> expression GREATER expression .)
    INT_DEC         reduce using rule 44 (math_expression -> expression GREATER expression .)
    INT_BIN         reduce using rule 44 (math_expression -> expression GREATER expression .)
    SUM             reduce using rule 44 (math_expression -> expression GREATER expression .)
    DENY            reduce using rule 44 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 44 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85

  ! PLUS            [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! MUL_MATRIX      [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! MUL_ELEM        [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! TRANSPOSE       [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! STL             [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! STR             [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! AND             [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 44 (math_expression -> expression GREATER expression .) ]


state 107

    (38) math_expression -> SUM LBRACKET expression . RBRACKET
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    RBRACKET        shift and go to state 122
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 108

    (64) if -> IF math_expression BEGINIF stmt_list . ENDIF
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    ENDIF           shift and go to state 123
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 109

    (65) if -> IF math_expression BEGIN stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    END             shift and go to state 124
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 110

    (56) operation -> MOVE LBRACKET math_expression RBRACKET .

    NL              reduce using rule 56 (operation -> MOVE LBRACKET math_expression RBRACKET .)


state 111

    (66) function -> return_list EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> return_list EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN stmt_list END

    LBRACKET        shift and go to state 125


state 112

    (72) return_list -> return_list COMMA type VARIABLE .

    EQ              reduce using rule 72 (return_list -> return_list COMMA type VARIABLE .)
    COMMA           reduce using rule 72 (return_list -> return_list COMMA type VARIABLE .)


state 113

    (67) function -> FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN stmt_list END
    (74) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 126
    COMMA           shift and go to state 127


state 114

    (69) function -> FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN stmt_list END

    BEGIN           shift and go to state 128


state 115

    (75) func_list -> func .

    RBRACKET        reduce using rule 75 (func_list -> func .)
    COMMA           reduce using rule 75 (func_list -> func .)


state 116

    (76) func -> type . VARIABLE
    (77) func -> type . VARIABLE EQ const

    VARIABLE        shift and go to state 129


state 117

    (29) var -> VARIABLE EQ L_FIGBRACKET expr_list . R_FIGBRACKET
    (12) expr_list -> expr_list . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    R_FIGBRACKET    shift and go to state 130
    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 131
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 118

    (13) expr_list -> expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    R_FIGBRACKET    reduce using rule 13 (expr_list -> expression .)
    VARIABLE        reduce using rule 13 (expr_list -> expression .)
    TRUE            reduce using rule 13 (expr_list -> expression .)
    FALSE           reduce using rule 13 (expr_list -> expression .)
    INT_DEC         reduce using rule 13 (expr_list -> expression .)
    INT_BIN         reduce using rule 13 (expr_list -> expression .)
    SUM             reduce using rule 13 (expr_list -> expression .)
    DENY            reduce using rule 13 (expr_list -> expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 119

    (62) for -> FOR VARIABLE EQ expression COLON . expression BEGINFOR stmt_list ENDFOR
    (63) for -> FOR VARIABLE EQ expression COLON . expression BEGIN stmt_list END
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . math_expression
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN
    (33) math_expression -> . expression PLUS expression
    (34) math_expression -> . expression MINUS expression
    (35) math_expression -> . expression MUL_MATRIX expression
    (36) math_expression -> . expression MUL_ELEM expression
    (37) math_expression -> . expression TRANSPOSE
    (38) math_expression -> . SUM LBRACKET expression RBRACKET
    (39) math_expression -> . expression STL
    (40) math_expression -> . expression STR
    (41) math_expression -> . DENY expression
    (42) math_expression -> . expression AND expression
    (43) math_expression -> . expression LESS expression
    (44) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 49
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59
    SUM             shift and go to state 60
    DENY            shift and go to state 61

    expression                     shift and go to state 132
    variable                       shift and go to state 53
    const                          shift and go to state 54
    math_expression                shift and go to state 55

state 120

    (55) index -> ind_exp COMMA ind_exp .

    RBRACKET        reduce using rule 55 (index -> ind_exp COMMA ind_exp .)


state 121

    (51) ind_exp -> expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    RBRACKET        reduce using rule 51 (ind_exp -> expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 122

    (38) math_expression -> SUM LBRACKET expression RBRACKET .

    PLUS            reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_MATRIX      reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_ELEM        reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    TRANSPOSE       reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STL             reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STR             reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    AND             reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    LESS            reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    NL              reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINIF         reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COLON           reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    R_FIGBRACKET    reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    VARIABLE        reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    INT_DEC         reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    INT_BIN         reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    SUM             reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    DENY            reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINFOR        reduce using rule 38 (math_expression -> SUM LBRACKET expression RBRACKET .)


state 123

    (64) if -> IF math_expression BEGINIF stmt_list ENDIF .

    NL              reduce using rule 64 (if -> IF math_expression BEGINIF stmt_list ENDIF .)


state 124

    (65) if -> IF math_expression BEGIN stmt_list END .

    NL              reduce using rule 65 (if -> IF math_expression BEGIN stmt_list END .)


state 125

    (66) function -> return_list EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN stmt_list END
    (68) function -> return_list EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN stmt_list END
    (74) func_list -> . func_list COMMA func
    (75) func_list -> . func
    (76) func -> . type VARIABLE
    (77) func -> . type VARIABLE EQ const
    (14) type -> . int
    (15) type -> . bool
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    RBRACKET        shift and go to state 134
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    func_list                      shift and go to state 133
    func                           shift and go to state 115
    type                           shift and go to state 116
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 126

    (67) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN stmt_list END

    BEGIN           shift and go to state 135


state 127

    (74) func_list -> func_list COMMA . func
    (76) func -> . type VARIABLE
    (77) func -> . type VARIABLE EQ const
    (14) type -> . int
    (15) type -> . bool
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    func                           shift and go to state 136
    type                           shift and go to state 116
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 128

    (69) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 137
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 129

    (76) func -> type VARIABLE .
    (77) func -> type VARIABLE . EQ const

    RBRACKET        reduce using rule 76 (func -> type VARIABLE .)
    COMMA           reduce using rule 76 (func -> type VARIABLE .)
    EQ              shift and go to state 138


state 130

    (29) var -> VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKET .

    NL              reduce using rule 29 (var -> VARIABLE EQ L_FIGBRACKET expr_list R_FIGBRACKET .)


state 131

    (12) expr_list -> expr_list expression .
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    R_FIGBRACKET    reduce using rule 12 (expr_list -> expr_list expression .)
    VARIABLE        reduce using rule 12 (expr_list -> expr_list expression .)
    TRUE            reduce using rule 12 (expr_list -> expr_list expression .)
    FALSE           reduce using rule 12 (expr_list -> expr_list expression .)
    INT_DEC         reduce using rule 12 (expr_list -> expr_list expression .)
    INT_BIN         reduce using rule 12 (expr_list -> expr_list expression .)
    SUM             reduce using rule 12 (expr_list -> expr_list expression .)
    DENY            reduce using rule 12 (expr_list -> expr_list expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 132

    (62) for -> FOR VARIABLE EQ expression COLON expression . BEGINFOR stmt_list ENDFOR
    (63) for -> FOR VARIABLE EQ expression COLON expression . BEGIN stmt_list END
    (33) math_expression -> expression . PLUS expression
    (34) math_expression -> expression . MINUS expression
    (35) math_expression -> expression . MUL_MATRIX expression
    (36) math_expression -> expression . MUL_ELEM expression
    (37) math_expression -> expression . TRANSPOSE
    (39) math_expression -> expression . STL
    (40) math_expression -> expression . STR
    (42) math_expression -> expression . AND expression
    (43) math_expression -> expression . LESS expression
    (44) math_expression -> expression . GREATER expression

    BEGINFOR        shift and go to state 139
    BEGIN           shift and go to state 140
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MUL_MATRIX      shift and go to state 78
    MUL_ELEM        shift and go to state 79
    TRANSPOSE       shift and go to state 80
    STL             shift and go to state 81
    STR             shift and go to state 82
    AND             shift and go to state 83
    LESS            shift and go to state 84
    GREATER         shift and go to state 85


state 133

    (66) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN stmt_list END
    (74) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 141
    COMMA           shift and go to state 127


state 134

    (68) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN stmt_list END

    BEGIN           shift and go to state 142


state 135

    (67) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 143
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 136

    (74) func_list -> func_list COMMA func .

    RBRACKET        reduce using rule 74 (func_list -> func_list COMMA func .)
    COMMA           reduce using rule 74 (func_list -> func_list COMMA func .)


state 137

    (69) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    END             shift and go to state 144
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 138

    (77) func -> type VARIABLE EQ . const
    (45) const -> . TRUE
    (46) const -> . FALSE
    (47) const -> . INT_DEC
    (48) const -> . INT_BIN

    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    INT_DEC         shift and go to state 58
    INT_BIN         shift and go to state 59

    const                          shift and go to state 145

state 139

    (62) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR . stmt_list ENDFOR
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 146
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 140

    (63) for -> FOR VARIABLE EQ expression COLON expression BEGIN . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 147
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 141

    (66) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN stmt_list END

    BEGIN           shift and go to state 148


state 142

    (68) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 149
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 143

    (67) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    END             shift and go to state 150
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 144

    (69) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END .

    NL              reduce using rule 69 (function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END .)


state 145

    (77) func -> type VARIABLE EQ const .

    RBRACKET        reduce using rule 77 (func -> type VARIABLE EQ const .)
    COMMA           reduce using rule 77 (func -> type VARIABLE EQ const .)


state 146

    (62) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list . ENDFOR
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    ENDFOR          shift and go to state 151
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 147

    (63) for -> FOR VARIABLE EQ expression COLON expression BEGIN stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    END             shift and go to state 152
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 148

    (66) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 153
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 149

    (68) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    END             shift and go to state 154
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 150

    (67) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END .

    NL              reduce using rule 67 (function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END .)


state 151

    (62) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR .

    NL              reduce using rule 62 (for -> FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR .)


state 152

    (63) for -> FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END .

    NL              reduce using rule 63 (for -> FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END .)


state 153

    (66) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type var
    (61) assigment -> . variable ASSIGMENT expression
    (62) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR stmt_list ENDFOR
    (63) for -> . FOR VARIABLE EQ expression COLON expression BEGIN stmt_list END
    (64) if -> . IF math_expression BEGINIF stmt_list ENDIF
    (65) if -> . IF math_expression BEGIN stmt_list END
    (56) operation -> . MOVE LBRACKET math_expression RBRACKET
    (57) operation -> . RIGHT
    (58) operation -> . LEFT
    (59) operation -> . WALL
    (60) operation -> . EXIT
    (66) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (67) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END
    (68) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (69) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END
    (70) function_call -> . VARIABLE
    (71) function_call -> . VARIABLE call_list
    (14) type -> . int
    (15) type -> . bool
    (49) variable -> . VARIABLE
    (50) variable -> . VARIABLE LBRACKET index RBRACKET
    (72) return_list -> . return_list COMMA type VARIABLE
    (73) return_list -> . type VARIABLE
    (16) int -> . INT
    (17) int -> . CINT
    (18) int -> . VINT
    (19) int -> . MINT
    (20) int -> . CVINT
    (21) int -> . CMINT
    (22) bool -> . BOOL
    (23) bool -> . CBOOL
    (24) bool -> . VBOOL
    (25) bool -> . MBOOL
    (26) bool -> . CVBOOL
    (27) bool -> . CMBOOL

    END             shift and go to state 155
    FOR             shift and go to state 13
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 14
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 12
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 154

    (68) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END .

    NL              reduce using rule 68 (function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN stmt_list END .)


state 155

    (66) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END .

    NL              reduce using rule 66 (function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN stmt_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 87 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 87 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 87 resolved as shift
WARNING: shift/reduce conflict for STL in state 87 resolved as shift
WARNING: shift/reduce conflict for STR in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 100 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 100 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 100 resolved as shift
WARNING: shift/reduce conflict for STL in state 100 resolved as shift
WARNING: shift/reduce conflict for STR in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 101 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 101 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 101 resolved as shift
WARNING: shift/reduce conflict for STL in state 101 resolved as shift
WARNING: shift/reduce conflict for STR in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 102 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 102 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 102 resolved as shift
WARNING: shift/reduce conflict for STL in state 102 resolved as shift
WARNING: shift/reduce conflict for STR in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 103 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 103 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 103 resolved as shift
WARNING: shift/reduce conflict for STL in state 103 resolved as shift
WARNING: shift/reduce conflict for STR in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 104 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 104 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 104 resolved as shift
WARNING: shift/reduce conflict for STL in state 104 resolved as shift
WARNING: shift/reduce conflict for STR in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 105 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 105 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 105 resolved as shift
WARNING: shift/reduce conflict for STL in state 105 resolved as shift
WARNING: shift/reduce conflict for STR in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 106 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 106 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 106 resolved as shift
WARNING: shift/reduce conflict for STL in state 106 resolved as shift
WARNING: shift/reduce conflict for STR in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 106 resolved as shift
