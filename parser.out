Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt_list statement
Rule 3     stmt_list -> statement
Rule 4     statement -> declaration NL
Rule 5     statement -> assigment NL
Rule 6     statement -> for NL
Rule 7     statement -> if NL
Rule 8     statement -> operation NL
Rule 9     statement -> function NL
Rule 10    statement -> function_call NL
Rule 11    declaration -> type VARIABLE EQ expression
Rule 12    declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
Rule 13    decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET
Rule 14    decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
Rule 15    decl_list -> expr_list
Rule 16    expr_list -> expr_list COMMA expression
Rule 17    expr_list -> expression
Rule 18    type -> int
Rule 19    type -> bool
Rule 20    int -> INT
Rule 21    int -> CINT
Rule 22    int -> VINT
Rule 23    int -> MINT
Rule 24    int -> CVINT
Rule 25    int -> CMINT
Rule 26    bool -> BOOL
Rule 27    bool -> CBOOL
Rule 28    bool -> VBOOL
Rule 29    bool -> MBOOL
Rule 30    bool -> CVBOOL
Rule 31    bool -> CMBOOL
Rule 32    expression -> variable
Rule 33    expression -> const
Rule 34    expression -> math_expression
Rule 35    math_expression -> expression PLUS expression
Rule 36    math_expression -> expression MINUS expression
Rule 37    math_expression -> expression MUL_MATRIX expression
Rule 38    math_expression -> expression MUL_ELEM expression
Rule 39    math_expression -> expression TRANSPOSE
Rule 40    math_expression -> SUM LBRACKET expression RBRACKET
Rule 41    math_expression -> expression STL
Rule 42    math_expression -> expression STR
Rule 43    math_expression -> DENY expression
Rule 44    math_expression -> expression AND expression
Rule 45    math_expression -> expression LESS expression
Rule 46    math_expression -> expression GREATER expression
Rule 47    const -> TRUE
Rule 48    const -> FALSE
Rule 49    const -> INT_DEC
Rule 50    const -> INT_BIN
Rule 51    variable -> VARIABLE
Rule 52    variable -> VARIABLE LBRACKET index RBRACKET
Rule 53    ind_exp -> expression
Rule 54    ind_exp -> COLON
Rule 55    ind_exp -> <empty>
Rule 56    index -> expression
Rule 57    index -> ind_exp COMMA ind_exp
Rule 58    operation -> MOVE LBRACKET math_expression RBRACKET
Rule 59    operation -> RIGHT
Rule 60    operation -> LEFT
Rule 61    operation -> WALL
Rule 62    operation -> EXIT
Rule 63    assigment -> variable ASSIGMENT expression
Rule 64    assigment -> variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
Rule 65    for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
Rule 66    for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
Rule 67    if -> IF math_expression BEGINIF NL stmt_list ENDIF
Rule 68    if -> IF math_expression BEGIN NL stmt_list END
Rule 69    return_list -> return_list COMMA type VARIABLE
Rule 70    return_list -> type VARIABLE
Rule 71    func_list -> func_list COMMA func
Rule 72    func_list -> func
Rule 73    func -> type VARIABLE
Rule 74    func -> type VARIABLE EQ const
Rule 75    call_list -> call_list COMMA expression
Rule 76    call_list -> expression
Rule 77    function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 78    function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 79    function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 80    function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 81    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
Rule 82    function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
Rule 83    function_call -> VARIABLE
Rule 84    function_call -> VARIABLE call_list

Terminals, with rules where they appear

AND                  : 44
ASSIGMENT            : 63 64
BEGIN                : 66 68 77 78 79 80 81 82
BEGINFOR             : 65
BEGINIF              : 67
BOOL                 : 26
CBOOL                : 27
CINT                 : 21
CMBOOL               : 31
CMINT                : 25
COLON                : 54 65 66
COMMA                : 14 16 57 69 71 75
CVBOOL               : 30
CVINT                : 24
DENY                 : 43
END                  : 66 68 77 78 79 80 81 82
ENDFOR               : 65
ENDIF                : 67
EQ                   : 11 12 65 66 74 77 79 81 82
EXIT                 : 62
FALSE                : 48
FOR                  : 65 66
FUNCTION             : 77 78 79 80 81 82
GREATER              : 46
IF                   : 67 68
INT                  : 20
INT_BIN              : 50
INT_DEC              : 49
LBRACKET             : 40 52 58 77 78 79 80 81 82
LEFT                 : 60
LESS                 : 45
L_FIGBRACKET         : 12 13 14 64
MBOOL                : 29
MINT                 : 23
MINUS                : 36
MOVE                 : 58
MUL_ELEM             : 38
MUL_MATRIX           : 37
NL                   : 4 5 6 7 8 9 10 65 66 67 68 77 78 79 80 81 82
PLUS                 : 35
RBRACKET             : 40 52 58 77 78 79 80 81 82
RIGHT                : 59
R_FIGBRACKET         : 12 13 14 64
STL                  : 41
STR                  : 42
SUM                  : 40
TRANSPOSE            : 39
TRUE                 : 47
VARIABLE             : 11 12 51 52 65 66 69 70 73 74 77 78 79 80 81 81 82 82 83 84
VBOOL                : 28
VINT                 : 22
WALL                 : 61
error                : 

Nonterminals, with rules where they appear

assigment            : 5
bool                 : 19
call_list            : 75 84
const                : 33 74
decl_list            : 12 14 14 64
declaration          : 4
expr_list            : 13 15 16
expression           : 11 16 17 35 35 36 36 37 37 38 38 39 40 41 42 43 44 44 45 45 46 46 53 56 63 65 65 66 66 75 76
for                  : 6
func                 : 71 72
func_list            : 71 77 78 81
function             : 9
function_call        : 10
if                   : 7
ind_exp              : 57 57
index                : 52
int                  : 18
math_expression      : 34 58 67 68
operation            : 8
program              : 0
return_list          : 69 77 79
statement            : 2 3
stmt_list            : 1 2 65 66 67 68 77 78 79 80 81 82
type                 : 11 12 69 70 73 74 81 82
variable             : 32 63 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    $end            reduce using rule 1 (program -> stmt_list .)
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 3

    (3) stmt_list -> statement .

    FOR             reduce using rule 3 (stmt_list -> statement .)
    IF              reduce using rule 3 (stmt_list -> statement .)
    MOVE            reduce using rule 3 (stmt_list -> statement .)
    RIGHT           reduce using rule 3 (stmt_list -> statement .)
    LEFT            reduce using rule 3 (stmt_list -> statement .)
    WALL            reduce using rule 3 (stmt_list -> statement .)
    EXIT            reduce using rule 3 (stmt_list -> statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> statement .)
    VARIABLE        reduce using rule 3 (stmt_list -> statement .)
    INT             reduce using rule 3 (stmt_list -> statement .)
    CINT            reduce using rule 3 (stmt_list -> statement .)
    VINT            reduce using rule 3 (stmt_list -> statement .)
    MINT            reduce using rule 3 (stmt_list -> statement .)
    CVINT           reduce using rule 3 (stmt_list -> statement .)
    CMINT           reduce using rule 3 (stmt_list -> statement .)
    BOOL            reduce using rule 3 (stmt_list -> statement .)
    CBOOL           reduce using rule 3 (stmt_list -> statement .)
    VBOOL           reduce using rule 3 (stmt_list -> statement .)
    MBOOL           reduce using rule 3 (stmt_list -> statement .)
    CVBOOL          reduce using rule 3 (stmt_list -> statement .)
    CMBOOL          reduce using rule 3 (stmt_list -> statement .)
    $end            reduce using rule 3 (stmt_list -> statement .)
    ENDIF           reduce using rule 3 (stmt_list -> statement .)
    END             reduce using rule 3 (stmt_list -> statement .)
    ENDFOR          reduce using rule 3 (stmt_list -> statement .)


state 4

    (4) statement -> declaration . NL

    NL              shift and go to state 38


state 5

    (5) statement -> assigment . NL

    NL              shift and go to state 39


state 6

    (6) statement -> for . NL

    NL              shift and go to state 40


state 7

    (7) statement -> if . NL

    NL              shift and go to state 41


state 8

    (8) statement -> operation . NL

    NL              shift and go to state 42


state 9

    (9) statement -> function . NL

    NL              shift and go to state 43


state 10

    (10) statement -> function_call . NL

    NL              shift and go to state 44


state 11

    (11) declaration -> type . VARIABLE EQ expression
    (12) declaration -> type . VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (81) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> type . VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (70) return_list -> type . VARIABLE

    VARIABLE        shift and go to state 45


state 12

    (83) function_call -> VARIABLE .
    (84) function_call -> VARIABLE . call_list
    (51) variable -> VARIABLE .
    (52) variable -> VARIABLE . LBRACKET index RBRACKET
    (75) call_list -> . call_list COMMA expression
    (76) call_list -> . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    NL              reduce using rule 83 (function_call -> VARIABLE .)
    ASSIGMENT       reduce using rule 51 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 48
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    call_list                      shift and go to state 47
    expression                     shift and go to state 49
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 13

    (63) assigment -> variable . ASSIGMENT expression
    (64) assigment -> variable . ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET

    ASSIGMENT       shift and go to state 59


state 14

    (65) for -> FOR . VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> FOR . VARIABLE EQ expression COLON expression BEGIN NL stmt_list END

    VARIABLE        shift and go to state 60


state 15

    (67) if -> IF . math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> IF . math_expression BEGIN NL stmt_list END
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN

    SUM             shift and go to state 57
    DENY            shift and go to state 58
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56

    math_expression                shift and go to state 61
    expression                     shift and go to state 62
    variable                       shift and go to state 50
    const                          shift and go to state 51

state 16

    (58) operation -> MOVE . LBRACKET math_expression RBRACKET

    LBRACKET        shift and go to state 63


state 17

    (59) operation -> RIGHT .

    NL              reduce using rule 59 (operation -> RIGHT .)


state 18

    (60) operation -> LEFT .

    NL              reduce using rule 60 (operation -> LEFT .)


state 19

    (61) operation -> WALL .

    NL              reduce using rule 61 (operation -> WALL .)


state 20

    (62) operation -> EXIT .

    NL              reduce using rule 62 (operation -> EXIT .)


state 21

    (77) function -> return_list . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> return_list . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (69) return_list -> return_list . COMMA type VARIABLE

    EQ              shift and go to state 64
    COMMA           shift and go to state 65


state 22

    (78) function -> FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (80) function -> FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 66


state 23

    (18) type -> int .

    VARIABLE        reduce using rule 18 (type -> int .)


state 24

    (19) type -> bool .

    VARIABLE        reduce using rule 19 (type -> bool .)


state 25

    (20) int -> INT .

    VARIABLE        reduce using rule 20 (int -> INT .)


state 26

    (21) int -> CINT .

    VARIABLE        reduce using rule 21 (int -> CINT .)


state 27

    (22) int -> VINT .

    VARIABLE        reduce using rule 22 (int -> VINT .)


state 28

    (23) int -> MINT .

    VARIABLE        reduce using rule 23 (int -> MINT .)


state 29

    (24) int -> CVINT .

    VARIABLE        reduce using rule 24 (int -> CVINT .)


state 30

    (25) int -> CMINT .

    VARIABLE        reduce using rule 25 (int -> CMINT .)


state 31

    (26) bool -> BOOL .

    VARIABLE        reduce using rule 26 (bool -> BOOL .)


state 32

    (27) bool -> CBOOL .

    VARIABLE        reduce using rule 27 (bool -> CBOOL .)


state 33

    (28) bool -> VBOOL .

    VARIABLE        reduce using rule 28 (bool -> VBOOL .)


state 34

    (29) bool -> MBOOL .

    VARIABLE        reduce using rule 29 (bool -> MBOOL .)


state 35

    (30) bool -> CVBOOL .

    VARIABLE        reduce using rule 30 (bool -> CVBOOL .)


state 36

    (31) bool -> CMBOOL .

    VARIABLE        reduce using rule 31 (bool -> CMBOOL .)


state 37

    (2) stmt_list -> stmt_list statement .

    FOR             reduce using rule 2 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 2 (stmt_list -> stmt_list statement .)
    MOVE            reduce using rule 2 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    WALL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    EXIT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 2 (stmt_list -> stmt_list statement .)
    VARIABLE        reduce using rule 2 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 2 (stmt_list -> stmt_list statement .)
    CINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    VINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    MINT            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMINT           reduce using rule 2 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 2 (stmt_list -> stmt_list statement .)
    CBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    VBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    MBOOL           reduce using rule 2 (stmt_list -> stmt_list statement .)
    CVBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    CMBOOL          reduce using rule 2 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDIF           reduce using rule 2 (stmt_list -> stmt_list statement .)
    END             reduce using rule 2 (stmt_list -> stmt_list statement .)
    ENDFOR          reduce using rule 2 (stmt_list -> stmt_list statement .)


state 38

    (4) statement -> declaration NL .

    FOR             reduce using rule 4 (statement -> declaration NL .)
    IF              reduce using rule 4 (statement -> declaration NL .)
    MOVE            reduce using rule 4 (statement -> declaration NL .)
    RIGHT           reduce using rule 4 (statement -> declaration NL .)
    LEFT            reduce using rule 4 (statement -> declaration NL .)
    WALL            reduce using rule 4 (statement -> declaration NL .)
    EXIT            reduce using rule 4 (statement -> declaration NL .)
    FUNCTION        reduce using rule 4 (statement -> declaration NL .)
    VARIABLE        reduce using rule 4 (statement -> declaration NL .)
    INT             reduce using rule 4 (statement -> declaration NL .)
    CINT            reduce using rule 4 (statement -> declaration NL .)
    VINT            reduce using rule 4 (statement -> declaration NL .)
    MINT            reduce using rule 4 (statement -> declaration NL .)
    CVINT           reduce using rule 4 (statement -> declaration NL .)
    CMINT           reduce using rule 4 (statement -> declaration NL .)
    BOOL            reduce using rule 4 (statement -> declaration NL .)
    CBOOL           reduce using rule 4 (statement -> declaration NL .)
    VBOOL           reduce using rule 4 (statement -> declaration NL .)
    MBOOL           reduce using rule 4 (statement -> declaration NL .)
    CVBOOL          reduce using rule 4 (statement -> declaration NL .)
    CMBOOL          reduce using rule 4 (statement -> declaration NL .)
    $end            reduce using rule 4 (statement -> declaration NL .)
    ENDIF           reduce using rule 4 (statement -> declaration NL .)
    END             reduce using rule 4 (statement -> declaration NL .)
    ENDFOR          reduce using rule 4 (statement -> declaration NL .)


state 39

    (5) statement -> assigment NL .

    FOR             reduce using rule 5 (statement -> assigment NL .)
    IF              reduce using rule 5 (statement -> assigment NL .)
    MOVE            reduce using rule 5 (statement -> assigment NL .)
    RIGHT           reduce using rule 5 (statement -> assigment NL .)
    LEFT            reduce using rule 5 (statement -> assigment NL .)
    WALL            reduce using rule 5 (statement -> assigment NL .)
    EXIT            reduce using rule 5 (statement -> assigment NL .)
    FUNCTION        reduce using rule 5 (statement -> assigment NL .)
    VARIABLE        reduce using rule 5 (statement -> assigment NL .)
    INT             reduce using rule 5 (statement -> assigment NL .)
    CINT            reduce using rule 5 (statement -> assigment NL .)
    VINT            reduce using rule 5 (statement -> assigment NL .)
    MINT            reduce using rule 5 (statement -> assigment NL .)
    CVINT           reduce using rule 5 (statement -> assigment NL .)
    CMINT           reduce using rule 5 (statement -> assigment NL .)
    BOOL            reduce using rule 5 (statement -> assigment NL .)
    CBOOL           reduce using rule 5 (statement -> assigment NL .)
    VBOOL           reduce using rule 5 (statement -> assigment NL .)
    MBOOL           reduce using rule 5 (statement -> assigment NL .)
    CVBOOL          reduce using rule 5 (statement -> assigment NL .)
    CMBOOL          reduce using rule 5 (statement -> assigment NL .)
    $end            reduce using rule 5 (statement -> assigment NL .)
    ENDIF           reduce using rule 5 (statement -> assigment NL .)
    END             reduce using rule 5 (statement -> assigment NL .)
    ENDFOR          reduce using rule 5 (statement -> assigment NL .)


state 40

    (6) statement -> for NL .

    FOR             reduce using rule 6 (statement -> for NL .)
    IF              reduce using rule 6 (statement -> for NL .)
    MOVE            reduce using rule 6 (statement -> for NL .)
    RIGHT           reduce using rule 6 (statement -> for NL .)
    LEFT            reduce using rule 6 (statement -> for NL .)
    WALL            reduce using rule 6 (statement -> for NL .)
    EXIT            reduce using rule 6 (statement -> for NL .)
    FUNCTION        reduce using rule 6 (statement -> for NL .)
    VARIABLE        reduce using rule 6 (statement -> for NL .)
    INT             reduce using rule 6 (statement -> for NL .)
    CINT            reduce using rule 6 (statement -> for NL .)
    VINT            reduce using rule 6 (statement -> for NL .)
    MINT            reduce using rule 6 (statement -> for NL .)
    CVINT           reduce using rule 6 (statement -> for NL .)
    CMINT           reduce using rule 6 (statement -> for NL .)
    BOOL            reduce using rule 6 (statement -> for NL .)
    CBOOL           reduce using rule 6 (statement -> for NL .)
    VBOOL           reduce using rule 6 (statement -> for NL .)
    MBOOL           reduce using rule 6 (statement -> for NL .)
    CVBOOL          reduce using rule 6 (statement -> for NL .)
    CMBOOL          reduce using rule 6 (statement -> for NL .)
    $end            reduce using rule 6 (statement -> for NL .)
    ENDIF           reduce using rule 6 (statement -> for NL .)
    END             reduce using rule 6 (statement -> for NL .)
    ENDFOR          reduce using rule 6 (statement -> for NL .)


state 41

    (7) statement -> if NL .

    FOR             reduce using rule 7 (statement -> if NL .)
    IF              reduce using rule 7 (statement -> if NL .)
    MOVE            reduce using rule 7 (statement -> if NL .)
    RIGHT           reduce using rule 7 (statement -> if NL .)
    LEFT            reduce using rule 7 (statement -> if NL .)
    WALL            reduce using rule 7 (statement -> if NL .)
    EXIT            reduce using rule 7 (statement -> if NL .)
    FUNCTION        reduce using rule 7 (statement -> if NL .)
    VARIABLE        reduce using rule 7 (statement -> if NL .)
    INT             reduce using rule 7 (statement -> if NL .)
    CINT            reduce using rule 7 (statement -> if NL .)
    VINT            reduce using rule 7 (statement -> if NL .)
    MINT            reduce using rule 7 (statement -> if NL .)
    CVINT           reduce using rule 7 (statement -> if NL .)
    CMINT           reduce using rule 7 (statement -> if NL .)
    BOOL            reduce using rule 7 (statement -> if NL .)
    CBOOL           reduce using rule 7 (statement -> if NL .)
    VBOOL           reduce using rule 7 (statement -> if NL .)
    MBOOL           reduce using rule 7 (statement -> if NL .)
    CVBOOL          reduce using rule 7 (statement -> if NL .)
    CMBOOL          reduce using rule 7 (statement -> if NL .)
    $end            reduce using rule 7 (statement -> if NL .)
    ENDIF           reduce using rule 7 (statement -> if NL .)
    END             reduce using rule 7 (statement -> if NL .)
    ENDFOR          reduce using rule 7 (statement -> if NL .)


state 42

    (8) statement -> operation NL .

    FOR             reduce using rule 8 (statement -> operation NL .)
    IF              reduce using rule 8 (statement -> operation NL .)
    MOVE            reduce using rule 8 (statement -> operation NL .)
    RIGHT           reduce using rule 8 (statement -> operation NL .)
    LEFT            reduce using rule 8 (statement -> operation NL .)
    WALL            reduce using rule 8 (statement -> operation NL .)
    EXIT            reduce using rule 8 (statement -> operation NL .)
    FUNCTION        reduce using rule 8 (statement -> operation NL .)
    VARIABLE        reduce using rule 8 (statement -> operation NL .)
    INT             reduce using rule 8 (statement -> operation NL .)
    CINT            reduce using rule 8 (statement -> operation NL .)
    VINT            reduce using rule 8 (statement -> operation NL .)
    MINT            reduce using rule 8 (statement -> operation NL .)
    CVINT           reduce using rule 8 (statement -> operation NL .)
    CMINT           reduce using rule 8 (statement -> operation NL .)
    BOOL            reduce using rule 8 (statement -> operation NL .)
    CBOOL           reduce using rule 8 (statement -> operation NL .)
    VBOOL           reduce using rule 8 (statement -> operation NL .)
    MBOOL           reduce using rule 8 (statement -> operation NL .)
    CVBOOL          reduce using rule 8 (statement -> operation NL .)
    CMBOOL          reduce using rule 8 (statement -> operation NL .)
    $end            reduce using rule 8 (statement -> operation NL .)
    ENDIF           reduce using rule 8 (statement -> operation NL .)
    END             reduce using rule 8 (statement -> operation NL .)
    ENDFOR          reduce using rule 8 (statement -> operation NL .)


state 43

    (9) statement -> function NL .

    FOR             reduce using rule 9 (statement -> function NL .)
    IF              reduce using rule 9 (statement -> function NL .)
    MOVE            reduce using rule 9 (statement -> function NL .)
    RIGHT           reduce using rule 9 (statement -> function NL .)
    LEFT            reduce using rule 9 (statement -> function NL .)
    WALL            reduce using rule 9 (statement -> function NL .)
    EXIT            reduce using rule 9 (statement -> function NL .)
    FUNCTION        reduce using rule 9 (statement -> function NL .)
    VARIABLE        reduce using rule 9 (statement -> function NL .)
    INT             reduce using rule 9 (statement -> function NL .)
    CINT            reduce using rule 9 (statement -> function NL .)
    VINT            reduce using rule 9 (statement -> function NL .)
    MINT            reduce using rule 9 (statement -> function NL .)
    CVINT           reduce using rule 9 (statement -> function NL .)
    CMINT           reduce using rule 9 (statement -> function NL .)
    BOOL            reduce using rule 9 (statement -> function NL .)
    CBOOL           reduce using rule 9 (statement -> function NL .)
    VBOOL           reduce using rule 9 (statement -> function NL .)
    MBOOL           reduce using rule 9 (statement -> function NL .)
    CVBOOL          reduce using rule 9 (statement -> function NL .)
    CMBOOL          reduce using rule 9 (statement -> function NL .)
    $end            reduce using rule 9 (statement -> function NL .)
    ENDIF           reduce using rule 9 (statement -> function NL .)
    END             reduce using rule 9 (statement -> function NL .)
    ENDFOR          reduce using rule 9 (statement -> function NL .)


state 44

    (10) statement -> function_call NL .

    FOR             reduce using rule 10 (statement -> function_call NL .)
    IF              reduce using rule 10 (statement -> function_call NL .)
    MOVE            reduce using rule 10 (statement -> function_call NL .)
    RIGHT           reduce using rule 10 (statement -> function_call NL .)
    LEFT            reduce using rule 10 (statement -> function_call NL .)
    WALL            reduce using rule 10 (statement -> function_call NL .)
    EXIT            reduce using rule 10 (statement -> function_call NL .)
    FUNCTION        reduce using rule 10 (statement -> function_call NL .)
    VARIABLE        reduce using rule 10 (statement -> function_call NL .)
    INT             reduce using rule 10 (statement -> function_call NL .)
    CINT            reduce using rule 10 (statement -> function_call NL .)
    VINT            reduce using rule 10 (statement -> function_call NL .)
    MINT            reduce using rule 10 (statement -> function_call NL .)
    CVINT           reduce using rule 10 (statement -> function_call NL .)
    CMINT           reduce using rule 10 (statement -> function_call NL .)
    BOOL            reduce using rule 10 (statement -> function_call NL .)
    CBOOL           reduce using rule 10 (statement -> function_call NL .)
    VBOOL           reduce using rule 10 (statement -> function_call NL .)
    MBOOL           reduce using rule 10 (statement -> function_call NL .)
    CVBOOL          reduce using rule 10 (statement -> function_call NL .)
    CMBOOL          reduce using rule 10 (statement -> function_call NL .)
    $end            reduce using rule 10 (statement -> function_call NL .)
    ENDIF           reduce using rule 10 (statement -> function_call NL .)
    END             reduce using rule 10 (statement -> function_call NL .)
    ENDFOR          reduce using rule 10 (statement -> function_call NL .)


state 45

    (11) declaration -> type VARIABLE . EQ expression
    (12) declaration -> type VARIABLE . EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (81) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> type VARIABLE . EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (70) return_list -> type VARIABLE .

  ! shift/reduce conflict for EQ resolved as shift
    EQ              shift and go to state 67
    COMMA           reduce using rule 70 (return_list -> type VARIABLE .)

  ! EQ              [ reduce using rule 70 (return_list -> type VARIABLE .) ]


state 46

    (51) variable -> VARIABLE .
    (52) variable -> VARIABLE . LBRACKET index RBRACKET

    PLUS            reduce using rule 51 (variable -> VARIABLE .)
    MINUS           reduce using rule 51 (variable -> VARIABLE .)
    MUL_MATRIX      reduce using rule 51 (variable -> VARIABLE .)
    MUL_ELEM        reduce using rule 51 (variable -> VARIABLE .)
    TRANSPOSE       reduce using rule 51 (variable -> VARIABLE .)
    STL             reduce using rule 51 (variable -> VARIABLE .)
    STR             reduce using rule 51 (variable -> VARIABLE .)
    AND             reduce using rule 51 (variable -> VARIABLE .)
    LESS            reduce using rule 51 (variable -> VARIABLE .)
    GREATER         reduce using rule 51 (variable -> VARIABLE .)
    COMMA           reduce using rule 51 (variable -> VARIABLE .)
    NL              reduce using rule 51 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 51 (variable -> VARIABLE .)
    BEGINIF         reduce using rule 51 (variable -> VARIABLE .)
    BEGIN           reduce using rule 51 (variable -> VARIABLE .)
    R_FIGBRACKET    reduce using rule 51 (variable -> VARIABLE .)
    COLON           reduce using rule 51 (variable -> VARIABLE .)
    BEGINFOR        reduce using rule 51 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 48


state 47

    (84) function_call -> VARIABLE call_list .
    (75) call_list -> call_list . COMMA expression

    NL              reduce using rule 84 (function_call -> VARIABLE call_list .)
    COMMA           shift and go to state 68


state 48

    (52) variable -> VARIABLE LBRACKET . index RBRACKET
    (56) index -> . expression
    (57) index -> . ind_exp COMMA ind_exp
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (53) ind_exp -> . expression
    (54) ind_exp -> . COLON
    (55) ind_exp -> .
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    COLON           shift and go to state 72
    COMMA           reduce using rule 55 (ind_exp -> .)
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    index                          shift and go to state 69
    expression                     shift and go to state 70
    ind_exp                        shift and go to state 71
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 49

    (76) call_list -> expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 76 (call_list -> expression .)
    NL              reduce using rule 76 (call_list -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 50

    (32) expression -> variable .

    PLUS            reduce using rule 32 (expression -> variable .)
    MINUS           reduce using rule 32 (expression -> variable .)
    MUL_MATRIX      reduce using rule 32 (expression -> variable .)
    MUL_ELEM        reduce using rule 32 (expression -> variable .)
    TRANSPOSE       reduce using rule 32 (expression -> variable .)
    STL             reduce using rule 32 (expression -> variable .)
    STR             reduce using rule 32 (expression -> variable .)
    AND             reduce using rule 32 (expression -> variable .)
    LESS            reduce using rule 32 (expression -> variable .)
    GREATER         reduce using rule 32 (expression -> variable .)
    COMMA           reduce using rule 32 (expression -> variable .)
    NL              reduce using rule 32 (expression -> variable .)
    RBRACKET        reduce using rule 32 (expression -> variable .)
    BEGINIF         reduce using rule 32 (expression -> variable .)
    BEGIN           reduce using rule 32 (expression -> variable .)
    R_FIGBRACKET    reduce using rule 32 (expression -> variable .)
    COLON           reduce using rule 32 (expression -> variable .)
    BEGINFOR        reduce using rule 32 (expression -> variable .)


state 51

    (33) expression -> const .

    PLUS            reduce using rule 33 (expression -> const .)
    MINUS           reduce using rule 33 (expression -> const .)
    MUL_MATRIX      reduce using rule 33 (expression -> const .)
    MUL_ELEM        reduce using rule 33 (expression -> const .)
    TRANSPOSE       reduce using rule 33 (expression -> const .)
    STL             reduce using rule 33 (expression -> const .)
    STR             reduce using rule 33 (expression -> const .)
    AND             reduce using rule 33 (expression -> const .)
    LESS            reduce using rule 33 (expression -> const .)
    GREATER         reduce using rule 33 (expression -> const .)
    COMMA           reduce using rule 33 (expression -> const .)
    NL              reduce using rule 33 (expression -> const .)
    RBRACKET        reduce using rule 33 (expression -> const .)
    BEGINIF         reduce using rule 33 (expression -> const .)
    BEGIN           reduce using rule 33 (expression -> const .)
    R_FIGBRACKET    reduce using rule 33 (expression -> const .)
    COLON           reduce using rule 33 (expression -> const .)
    BEGINFOR        reduce using rule 33 (expression -> const .)


state 52

    (34) expression -> math_expression .

    PLUS            reduce using rule 34 (expression -> math_expression .)
    MINUS           reduce using rule 34 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 34 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 34 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 34 (expression -> math_expression .)
    STL             reduce using rule 34 (expression -> math_expression .)
    STR             reduce using rule 34 (expression -> math_expression .)
    AND             reduce using rule 34 (expression -> math_expression .)
    LESS            reduce using rule 34 (expression -> math_expression .)
    GREATER         reduce using rule 34 (expression -> math_expression .)
    COMMA           reduce using rule 34 (expression -> math_expression .)
    NL              reduce using rule 34 (expression -> math_expression .)
    RBRACKET        reduce using rule 34 (expression -> math_expression .)
    BEGINIF         reduce using rule 34 (expression -> math_expression .)
    BEGIN           reduce using rule 34 (expression -> math_expression .)
    R_FIGBRACKET    reduce using rule 34 (expression -> math_expression .)
    COLON           reduce using rule 34 (expression -> math_expression .)
    BEGINFOR        reduce using rule 34 (expression -> math_expression .)


state 53

    (47) const -> TRUE .

    PLUS            reduce using rule 47 (const -> TRUE .)
    MINUS           reduce using rule 47 (const -> TRUE .)
    MUL_MATRIX      reduce using rule 47 (const -> TRUE .)
    MUL_ELEM        reduce using rule 47 (const -> TRUE .)
    TRANSPOSE       reduce using rule 47 (const -> TRUE .)
    STL             reduce using rule 47 (const -> TRUE .)
    STR             reduce using rule 47 (const -> TRUE .)
    AND             reduce using rule 47 (const -> TRUE .)
    LESS            reduce using rule 47 (const -> TRUE .)
    GREATER         reduce using rule 47 (const -> TRUE .)
    COMMA           reduce using rule 47 (const -> TRUE .)
    NL              reduce using rule 47 (const -> TRUE .)
    RBRACKET        reduce using rule 47 (const -> TRUE .)
    BEGINIF         reduce using rule 47 (const -> TRUE .)
    BEGIN           reduce using rule 47 (const -> TRUE .)
    R_FIGBRACKET    reduce using rule 47 (const -> TRUE .)
    COLON           reduce using rule 47 (const -> TRUE .)
    BEGINFOR        reduce using rule 47 (const -> TRUE .)


state 54

    (48) const -> FALSE .

    PLUS            reduce using rule 48 (const -> FALSE .)
    MINUS           reduce using rule 48 (const -> FALSE .)
    MUL_MATRIX      reduce using rule 48 (const -> FALSE .)
    MUL_ELEM        reduce using rule 48 (const -> FALSE .)
    TRANSPOSE       reduce using rule 48 (const -> FALSE .)
    STL             reduce using rule 48 (const -> FALSE .)
    STR             reduce using rule 48 (const -> FALSE .)
    AND             reduce using rule 48 (const -> FALSE .)
    LESS            reduce using rule 48 (const -> FALSE .)
    GREATER         reduce using rule 48 (const -> FALSE .)
    COMMA           reduce using rule 48 (const -> FALSE .)
    NL              reduce using rule 48 (const -> FALSE .)
    RBRACKET        reduce using rule 48 (const -> FALSE .)
    BEGINIF         reduce using rule 48 (const -> FALSE .)
    BEGIN           reduce using rule 48 (const -> FALSE .)
    R_FIGBRACKET    reduce using rule 48 (const -> FALSE .)
    COLON           reduce using rule 48 (const -> FALSE .)
    BEGINFOR        reduce using rule 48 (const -> FALSE .)


state 55

    (49) const -> INT_DEC .

    PLUS            reduce using rule 49 (const -> INT_DEC .)
    MINUS           reduce using rule 49 (const -> INT_DEC .)
    MUL_MATRIX      reduce using rule 49 (const -> INT_DEC .)
    MUL_ELEM        reduce using rule 49 (const -> INT_DEC .)
    TRANSPOSE       reduce using rule 49 (const -> INT_DEC .)
    STL             reduce using rule 49 (const -> INT_DEC .)
    STR             reduce using rule 49 (const -> INT_DEC .)
    AND             reduce using rule 49 (const -> INT_DEC .)
    LESS            reduce using rule 49 (const -> INT_DEC .)
    GREATER         reduce using rule 49 (const -> INT_DEC .)
    COMMA           reduce using rule 49 (const -> INT_DEC .)
    NL              reduce using rule 49 (const -> INT_DEC .)
    RBRACKET        reduce using rule 49 (const -> INT_DEC .)
    BEGINIF         reduce using rule 49 (const -> INT_DEC .)
    BEGIN           reduce using rule 49 (const -> INT_DEC .)
    R_FIGBRACKET    reduce using rule 49 (const -> INT_DEC .)
    COLON           reduce using rule 49 (const -> INT_DEC .)
    BEGINFOR        reduce using rule 49 (const -> INT_DEC .)


state 56

    (50) const -> INT_BIN .

    PLUS            reduce using rule 50 (const -> INT_BIN .)
    MINUS           reduce using rule 50 (const -> INT_BIN .)
    MUL_MATRIX      reduce using rule 50 (const -> INT_BIN .)
    MUL_ELEM        reduce using rule 50 (const -> INT_BIN .)
    TRANSPOSE       reduce using rule 50 (const -> INT_BIN .)
    STL             reduce using rule 50 (const -> INT_BIN .)
    STR             reduce using rule 50 (const -> INT_BIN .)
    AND             reduce using rule 50 (const -> INT_BIN .)
    LESS            reduce using rule 50 (const -> INT_BIN .)
    GREATER         reduce using rule 50 (const -> INT_BIN .)
    COMMA           reduce using rule 50 (const -> INT_BIN .)
    NL              reduce using rule 50 (const -> INT_BIN .)
    RBRACKET        reduce using rule 50 (const -> INT_BIN .)
    BEGINIF         reduce using rule 50 (const -> INT_BIN .)
    BEGIN           reduce using rule 50 (const -> INT_BIN .)
    R_FIGBRACKET    reduce using rule 50 (const -> INT_BIN .)
    COLON           reduce using rule 50 (const -> INT_BIN .)
    BEGINFOR        reduce using rule 50 (const -> INT_BIN .)


state 57

    (40) math_expression -> SUM . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 83


state 58

    (43) math_expression -> DENY . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 84
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 59

    (63) assigment -> variable ASSIGMENT . expression
    (64) assigment -> variable ASSIGMENT . L_FIGBRACKET decl_list R_FIGBRACKET
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    L_FIGBRACKET    shift and go to state 86
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    variable                       shift and go to state 50
    expression                     shift and go to state 85
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 60

    (65) for -> FOR VARIABLE . EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> FOR VARIABLE . EQ expression COLON expression BEGIN NL stmt_list END

    EQ              shift and go to state 87


state 61

    (67) if -> IF math_expression . BEGINIF NL stmt_list ENDIF
    (68) if -> IF math_expression . BEGIN NL stmt_list END
    (34) expression -> math_expression .

    BEGINIF         shift and go to state 88
    BEGIN           shift and go to state 89
    PLUS            reduce using rule 34 (expression -> math_expression .)
    MINUS           reduce using rule 34 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 34 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 34 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 34 (expression -> math_expression .)
    STL             reduce using rule 34 (expression -> math_expression .)
    STR             reduce using rule 34 (expression -> math_expression .)
    AND             reduce using rule 34 (expression -> math_expression .)
    LESS            reduce using rule 34 (expression -> math_expression .)
    GREATER         reduce using rule 34 (expression -> math_expression .)


state 62

    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 63

    (58) operation -> MOVE LBRACKET . math_expression RBRACKET
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN

    SUM             shift and go to state 57
    DENY            shift and go to state 58
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56

    math_expression                shift and go to state 90
    expression                     shift and go to state 62
    variable                       shift and go to state 50
    const                          shift and go to state 51

state 64

    (77) function -> return_list EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> return_list EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    FUNCTION        shift and go to state 91


state 65

    (69) return_list -> return_list COMMA . type VARIABLE
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    type                           shift and go to state 92
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 66

    (78) function -> FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (80) function -> FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 93


state 67

    (11) declaration -> type VARIABLE EQ . expression
    (12) declaration -> type VARIABLE EQ . L_FIGBRACKET decl_list R_FIGBRACKET
    (81) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> type VARIABLE EQ . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    L_FIGBRACKET    shift and go to state 95
    FUNCTION        shift and go to state 96
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 94
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 68

    (75) call_list -> call_list COMMA . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 97
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 69

    (52) variable -> VARIABLE LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 98


state 70

    (56) index -> expression .
    (53) ind_exp -> expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    RBRACKET        reduce using rule 56 (index -> expression .)
    COMMA           reduce using rule 53 (ind_exp -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 71

    (57) index -> ind_exp . COMMA ind_exp

    COMMA           shift and go to state 99


state 72

    (54) ind_exp -> COLON .

    COMMA           reduce using rule 54 (ind_exp -> COLON .)
    RBRACKET        reduce using rule 54 (ind_exp -> COLON .)


state 73

    (35) math_expression -> expression PLUS . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 100
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 74

    (36) math_expression -> expression MINUS . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 101
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 75

    (37) math_expression -> expression MUL_MATRIX . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 102
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 76

    (38) math_expression -> expression MUL_ELEM . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 103
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 77

    (39) math_expression -> expression TRANSPOSE .

    PLUS            reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    MINUS           reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    MUL_MATRIX      reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    MUL_ELEM        reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    STL             reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    STR             reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    AND             reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    LESS            reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    GREATER         reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    COMMA           reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    NL              reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    BEGINIF         reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    BEGIN           reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    RBRACKET        reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    R_FIGBRACKET    reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    COLON           reduce using rule 39 (math_expression -> expression TRANSPOSE .)
    BEGINFOR        reduce using rule 39 (math_expression -> expression TRANSPOSE .)


state 78

    (41) math_expression -> expression STL .

    PLUS            reduce using rule 41 (math_expression -> expression STL .)
    MINUS           reduce using rule 41 (math_expression -> expression STL .)
    MUL_MATRIX      reduce using rule 41 (math_expression -> expression STL .)
    MUL_ELEM        reduce using rule 41 (math_expression -> expression STL .)
    TRANSPOSE       reduce using rule 41 (math_expression -> expression STL .)
    STL             reduce using rule 41 (math_expression -> expression STL .)
    STR             reduce using rule 41 (math_expression -> expression STL .)
    AND             reduce using rule 41 (math_expression -> expression STL .)
    LESS            reduce using rule 41 (math_expression -> expression STL .)
    GREATER         reduce using rule 41 (math_expression -> expression STL .)
    COMMA           reduce using rule 41 (math_expression -> expression STL .)
    NL              reduce using rule 41 (math_expression -> expression STL .)
    BEGINIF         reduce using rule 41 (math_expression -> expression STL .)
    BEGIN           reduce using rule 41 (math_expression -> expression STL .)
    RBRACKET        reduce using rule 41 (math_expression -> expression STL .)
    R_FIGBRACKET    reduce using rule 41 (math_expression -> expression STL .)
    COLON           reduce using rule 41 (math_expression -> expression STL .)
    BEGINFOR        reduce using rule 41 (math_expression -> expression STL .)


state 79

    (42) math_expression -> expression STR .

    PLUS            reduce using rule 42 (math_expression -> expression STR .)
    MINUS           reduce using rule 42 (math_expression -> expression STR .)
    MUL_MATRIX      reduce using rule 42 (math_expression -> expression STR .)
    MUL_ELEM        reduce using rule 42 (math_expression -> expression STR .)
    TRANSPOSE       reduce using rule 42 (math_expression -> expression STR .)
    STL             reduce using rule 42 (math_expression -> expression STR .)
    STR             reduce using rule 42 (math_expression -> expression STR .)
    AND             reduce using rule 42 (math_expression -> expression STR .)
    LESS            reduce using rule 42 (math_expression -> expression STR .)
    GREATER         reduce using rule 42 (math_expression -> expression STR .)
    COMMA           reduce using rule 42 (math_expression -> expression STR .)
    NL              reduce using rule 42 (math_expression -> expression STR .)
    BEGINIF         reduce using rule 42 (math_expression -> expression STR .)
    BEGIN           reduce using rule 42 (math_expression -> expression STR .)
    RBRACKET        reduce using rule 42 (math_expression -> expression STR .)
    R_FIGBRACKET    reduce using rule 42 (math_expression -> expression STR .)
    COLON           reduce using rule 42 (math_expression -> expression STR .)
    BEGINFOR        reduce using rule 42 (math_expression -> expression STR .)


state 80

    (44) math_expression -> expression AND . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 104
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 81

    (45) math_expression -> expression LESS . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 105
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 82

    (46) math_expression -> expression GREATER . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 106
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 83

    (40) math_expression -> SUM LBRACKET . expression RBRACKET
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 107
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 84

    (43) math_expression -> DENY expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 43 (math_expression -> DENY expression .)
    NL              reduce using rule 43 (math_expression -> DENY expression .)
    BEGINIF         reduce using rule 43 (math_expression -> DENY expression .)
    BEGIN           reduce using rule 43 (math_expression -> DENY expression .)
    RBRACKET        reduce using rule 43 (math_expression -> DENY expression .)
    R_FIGBRACKET    reduce using rule 43 (math_expression -> DENY expression .)
    COLON           reduce using rule 43 (math_expression -> DENY expression .)
    BEGINFOR        reduce using rule 43 (math_expression -> DENY expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! MINUS           [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! MUL_MATRIX      [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! MUL_ELEM        [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! TRANSPOSE       [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! STL             [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! STR             [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! AND             [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! LESS            [ reduce using rule 43 (math_expression -> DENY expression .) ]
  ! GREATER         [ reduce using rule 43 (math_expression -> DENY expression .) ]


state 85

    (63) assigment -> variable ASSIGMENT expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    NL              reduce using rule 63 (assigment -> variable ASSIGMENT expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 86

    (64) assigment -> variable ASSIGMENT L_FIGBRACKET . decl_list R_FIGBRACKET
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    L_FIGBRACKET    shift and go to state 108
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    variable                       shift and go to state 50
    decl_list                      shift and go to state 109
    expr_list                      shift and go to state 110
    expression                     shift and go to state 111
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 87

    (65) for -> FOR VARIABLE EQ . expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> FOR VARIABLE EQ . expression COLON expression BEGIN NL stmt_list END
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 112
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 88

    (67) if -> IF math_expression BEGINIF . NL stmt_list ENDIF

    NL              shift and go to state 113


state 89

    (68) if -> IF math_expression BEGIN . NL stmt_list END

    NL              shift and go to state 114


state 90

    (58) operation -> MOVE LBRACKET math_expression . RBRACKET
    (34) expression -> math_expression .

    RBRACKET        shift and go to state 115
    PLUS            reduce using rule 34 (expression -> math_expression .)
    MINUS           reduce using rule 34 (expression -> math_expression .)
    MUL_MATRIX      reduce using rule 34 (expression -> math_expression .)
    MUL_ELEM        reduce using rule 34 (expression -> math_expression .)
    TRANSPOSE       reduce using rule 34 (expression -> math_expression .)
    STL             reduce using rule 34 (expression -> math_expression .)
    STR             reduce using rule 34 (expression -> math_expression .)
    AND             reduce using rule 34 (expression -> math_expression .)
    LESS            reduce using rule 34 (expression -> math_expression .)
    GREATER         reduce using rule 34 (expression -> math_expression .)


state 91

    (77) function -> return_list EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> return_list EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 116


state 92

    (69) return_list -> return_list COMMA type . VARIABLE

    VARIABLE        shift and go to state 117


state 93

    (78) function -> FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (80) function -> FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (71) func_list -> . func_list COMMA func
    (72) func_list -> . func
    (73) func -> . type VARIABLE
    (74) func -> . type VARIABLE EQ const
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    RBRACKET        shift and go to state 119
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    func_list                      shift and go to state 118
    func                           shift and go to state 120
    type                           shift and go to state 121
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 94

    (11) declaration -> type VARIABLE EQ expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    NL              reduce using rule 11 (declaration -> type VARIABLE EQ expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 95

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET . decl_list R_FIGBRACKET
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    L_FIGBRACKET    shift and go to state 108
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    decl_list                      shift and go to state 122
    expr_list                      shift and go to state 110
    expression                     shift and go to state 111
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 96

    (81) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> type VARIABLE EQ FUNCTION . VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END

    VARIABLE        shift and go to state 123


state 97

    (75) call_list -> call_list COMMA expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 75 (call_list -> call_list COMMA expression .)
    NL              reduce using rule 75 (call_list -> call_list COMMA expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 98

    (52) variable -> VARIABLE LBRACKET index RBRACKET .

    ASSIGMENT       reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    PLUS            reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MINUS           reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_MATRIX      reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    MUL_ELEM        reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    TRANSPOSE       reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STL             reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    STR             reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    AND             reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    LESS            reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    GREATER         reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COMMA           reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    NL              reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    RBRACKET        reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINIF         reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGIN           reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    R_FIGBRACKET    reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    COLON           reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)
    BEGINFOR        reduce using rule 52 (variable -> VARIABLE LBRACKET index RBRACKET .)


state 99

    (57) index -> ind_exp COMMA . ind_exp
    (53) ind_exp -> . expression
    (54) ind_exp -> . COLON
    (55) ind_exp -> .
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    COLON           shift and go to state 72
    RBRACKET        reduce using rule 55 (ind_exp -> .)
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    ind_exp                        shift and go to state 124
    expression                     shift and go to state 125
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 100

    (35) math_expression -> expression PLUS expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 35 (math_expression -> expression PLUS expression .)
    NL              reduce using rule 35 (math_expression -> expression PLUS expression .)
    BEGINIF         reduce using rule 35 (math_expression -> expression PLUS expression .)
    BEGIN           reduce using rule 35 (math_expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 35 (math_expression -> expression PLUS expression .)
    R_FIGBRACKET    reduce using rule 35 (math_expression -> expression PLUS expression .)
    COLON           reduce using rule 35 (math_expression -> expression PLUS expression .)
    BEGINFOR        reduce using rule 35 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! STL             [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! STR             [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 35 (math_expression -> expression PLUS expression .) ]


state 101

    (36) math_expression -> expression MINUS expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 36 (math_expression -> expression MINUS expression .)
    NL              reduce using rule 36 (math_expression -> expression MINUS expression .)
    BEGINIF         reduce using rule 36 (math_expression -> expression MINUS expression .)
    BEGIN           reduce using rule 36 (math_expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 36 (math_expression -> expression MINUS expression .)
    R_FIGBRACKET    reduce using rule 36 (math_expression -> expression MINUS expression .)
    COLON           reduce using rule 36 (math_expression -> expression MINUS expression .)
    BEGINFOR        reduce using rule 36 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! MUL_ELEM        [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! TRANSPOSE       [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! STL             [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! STR             [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 36 (math_expression -> expression MINUS expression .) ]


state 102

    (37) math_expression -> expression MUL_MATRIX expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    NL              reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    BEGINIF         reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    BEGIN           reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    RBRACKET        reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    R_FIGBRACKET    reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    COLON           reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    BEGINFOR        reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MINUS           [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_MATRIX      [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! MUL_ELEM        [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! TRANSPOSE       [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STL             [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! STR             [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! AND             [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! LESS            [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]
  ! GREATER         [ reduce using rule 37 (math_expression -> expression MUL_MATRIX expression .) ]


state 103

    (38) math_expression -> expression MUL_ELEM expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    NL              reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    BEGINIF         reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    BEGIN           reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    RBRACKET        reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    R_FIGBRACKET    reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    COLON           reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    BEGINFOR        reduce using rule 38 (math_expression -> expression MUL_ELEM expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! MINUS           [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_MATRIX      [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! MUL_ELEM        [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! TRANSPOSE       [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! STL             [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! STR             [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! AND             [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! LESS            [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]
  ! GREATER         [ reduce using rule 38 (math_expression -> expression MUL_ELEM expression .) ]


state 104

    (44) math_expression -> expression AND expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 44 (math_expression -> expression AND expression .)
    NL              reduce using rule 44 (math_expression -> expression AND expression .)
    BEGINIF         reduce using rule 44 (math_expression -> expression AND expression .)
    BEGIN           reduce using rule 44 (math_expression -> expression AND expression .)
    RBRACKET        reduce using rule 44 (math_expression -> expression AND expression .)
    R_FIGBRACKET    reduce using rule 44 (math_expression -> expression AND expression .)
    COLON           reduce using rule 44 (math_expression -> expression AND expression .)
    BEGINFOR        reduce using rule 44 (math_expression -> expression AND expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! MUL_MATRIX      [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! MUL_ELEM        [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! TRANSPOSE       [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! STL             [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! STR             [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 44 (math_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 44 (math_expression -> expression AND expression .) ]


state 105

    (45) math_expression -> expression LESS expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 45 (math_expression -> expression LESS expression .)
    NL              reduce using rule 45 (math_expression -> expression LESS expression .)
    BEGINIF         reduce using rule 45 (math_expression -> expression LESS expression .)
    BEGIN           reduce using rule 45 (math_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 45 (math_expression -> expression LESS expression .)
    R_FIGBRACKET    reduce using rule 45 (math_expression -> expression LESS expression .)
    COLON           reduce using rule 45 (math_expression -> expression LESS expression .)
    BEGINFOR        reduce using rule 45 (math_expression -> expression LESS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! MUL_MATRIX      [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! MUL_ELEM        [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! TRANSPOSE       [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! STL             [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! STR             [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! AND             [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 45 (math_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 45 (math_expression -> expression LESS expression .) ]


state 106

    (46) math_expression -> expression GREATER expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL_MATRIX resolved as shift
  ! shift/reduce conflict for MUL_ELEM resolved as shift
  ! shift/reduce conflict for TRANSPOSE resolved as shift
  ! shift/reduce conflict for STL resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
    COMMA           reduce using rule 46 (math_expression -> expression GREATER expression .)
    NL              reduce using rule 46 (math_expression -> expression GREATER expression .)
    BEGINIF         reduce using rule 46 (math_expression -> expression GREATER expression .)
    BEGIN           reduce using rule 46 (math_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 46 (math_expression -> expression GREATER expression .)
    R_FIGBRACKET    reduce using rule 46 (math_expression -> expression GREATER expression .)
    COLON           reduce using rule 46 (math_expression -> expression GREATER expression .)
    BEGINFOR        reduce using rule 46 (math_expression -> expression GREATER expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82

  ! PLUS            [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! MUL_MATRIX      [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! MUL_ELEM        [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! TRANSPOSE       [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! STL             [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! STR             [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! AND             [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 46 (math_expression -> expression GREATER expression .) ]


state 107

    (40) math_expression -> SUM LBRACKET expression . RBRACKET
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    RBRACKET        shift and go to state 126
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 108

    (13) decl_list -> L_FIGBRACKET . expr_list R_FIGBRACKET
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expr_list                      shift and go to state 127
    expression                     shift and go to state 111
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 109

    (64) assigment -> variable ASSIGMENT L_FIGBRACKET decl_list . R_FIGBRACKET
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 128
    COMMA           shift and go to state 129


state 110

    (15) decl_list -> expr_list .
    (16) expr_list -> expr_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    R_FIGBRACKET    reduce using rule 15 (decl_list -> expr_list .)
    COMMA           shift and go to state 130

  ! COMMA           [ reduce using rule 15 (decl_list -> expr_list .) ]


state 111

    (17) expr_list -> expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 17 (expr_list -> expression .)
    R_FIGBRACKET    reduce using rule 17 (expr_list -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 112

    (65) for -> FOR VARIABLE EQ expression . COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> FOR VARIABLE EQ expression . COLON expression BEGIN NL stmt_list END
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    COLON           shift and go to state 131
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 113

    (67) if -> IF math_expression BEGINIF NL . stmt_list ENDIF
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 132
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 114

    (68) if -> IF math_expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 133
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 115

    (58) operation -> MOVE LBRACKET math_expression RBRACKET .

    NL              reduce using rule 58 (operation -> MOVE LBRACKET math_expression RBRACKET .)


state 116

    (77) function -> return_list EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> return_list EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 134


state 117

    (69) return_list -> return_list COMMA type VARIABLE .

    EQ              reduce using rule 69 (return_list -> return_list COMMA type VARIABLE .)
    COMMA           reduce using rule 69 (return_list -> return_list COMMA type VARIABLE .)


state 118

    (78) function -> FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (71) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 135
    COMMA           shift and go to state 136


state 119

    (80) function -> FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 137


state 120

    (72) func_list -> func .

    RBRACKET        reduce using rule 72 (func_list -> func .)
    COMMA           reduce using rule 72 (func_list -> func .)


state 121

    (73) func -> type . VARIABLE
    (74) func -> type . VARIABLE EQ const

    VARIABLE        shift and go to state 138


state 122

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list . R_FIGBRACKET
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 139
    COMMA           shift and go to state 129


state 123

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> type VARIABLE EQ FUNCTION VARIABLE . LBRACKET RBRACKET BEGIN NL stmt_list END

    LBRACKET        shift and go to state 140


state 124

    (57) index -> ind_exp COMMA ind_exp .

    RBRACKET        reduce using rule 57 (index -> ind_exp COMMA ind_exp .)


state 125

    (53) ind_exp -> expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    RBRACKET        reduce using rule 53 (ind_exp -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 126

    (40) math_expression -> SUM LBRACKET expression RBRACKET .

    PLUS            reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_MATRIX      reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    MUL_ELEM        reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    TRANSPOSE       reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STL             reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    STR             reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    AND             reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    LESS            reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    NL              reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINIF         reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    R_FIGBRACKET    reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    COLON           reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)
    BEGINFOR        reduce using rule 40 (math_expression -> SUM LBRACKET expression RBRACKET .)


state 127

    (13) decl_list -> L_FIGBRACKET expr_list . R_FIGBRACKET
    (16) expr_list -> expr_list . COMMA expression

    R_FIGBRACKET    shift and go to state 141
    COMMA           shift and go to state 130


state 128

    (64) assigment -> variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 64 (assigment -> variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET .)


state 129

    (14) decl_list -> decl_list COMMA . L_FIGBRACKET decl_list R_FIGBRACKET

    L_FIGBRACKET    shift and go to state 142


state 130

    (16) expr_list -> expr_list COMMA . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 143
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 131

    (65) for -> FOR VARIABLE EQ expression COLON . expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> FOR VARIABLE EQ expression COLON . expression BEGIN NL stmt_list END
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    expression                     shift and go to state 144
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 132

    (67) if -> IF math_expression BEGINIF NL stmt_list . ENDIF
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    ENDIF           shift and go to state 145
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 133

    (68) if -> IF math_expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 146
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 134

    (77) function -> return_list EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> return_list EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (71) func_list -> . func_list COMMA func
    (72) func_list -> . func
    (73) func -> . type VARIABLE
    (74) func -> . type VARIABLE EQ const
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    RBRACKET        shift and go to state 148
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    func_list                      shift and go to state 147
    func                           shift and go to state 120
    type                           shift and go to state 121
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 135

    (78) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 149


state 136

    (71) func_list -> func_list COMMA . func
    (73) func -> . type VARIABLE
    (74) func -> . type VARIABLE EQ const
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    func                           shift and go to state 150
    type                           shift and go to state 121
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 137

    (80) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 151


state 138

    (73) func -> type VARIABLE .
    (74) func -> type VARIABLE . EQ const

    RBRACKET        reduce using rule 73 (func -> type VARIABLE .)
    COMMA           reduce using rule 73 (func -> type VARIABLE .)
    EQ              shift and go to state 152


state 139

    (12) declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .

    NL              reduce using rule 12 (declaration -> type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET .)


state 140

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET . RBRACKET BEGIN NL stmt_list END
    (71) func_list -> . func_list COMMA func
    (72) func_list -> . func
    (73) func -> . type VARIABLE
    (74) func -> . type VARIABLE EQ const
    (18) type -> . int
    (19) type -> . bool
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    RBRACKET        shift and go to state 154
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    type                           shift and go to state 121
    func_list                      shift and go to state 153
    func                           shift and go to state 120
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 141

    (13) decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .

    R_FIGBRACKET    reduce using rule 13 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)
    COMMA           reduce using rule 13 (decl_list -> L_FIGBRACKET expr_list R_FIGBRACKET .)


state 142

    (14) decl_list -> decl_list COMMA L_FIGBRACKET . decl_list R_FIGBRACKET
    (13) decl_list -> . L_FIGBRACKET expr_list R_FIGBRACKET
    (14) decl_list -> . decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET
    (15) decl_list -> . expr_list
    (16) expr_list -> . expr_list COMMA expression
    (17) expr_list -> . expression
    (32) expression -> . variable
    (33) expression -> . const
    (34) expression -> . math_expression
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN
    (35) math_expression -> . expression PLUS expression
    (36) math_expression -> . expression MINUS expression
    (37) math_expression -> . expression MUL_MATRIX expression
    (38) math_expression -> . expression MUL_ELEM expression
    (39) math_expression -> . expression TRANSPOSE
    (40) math_expression -> . SUM LBRACKET expression RBRACKET
    (41) math_expression -> . expression STL
    (42) math_expression -> . expression STR
    (43) math_expression -> . DENY expression
    (44) math_expression -> . expression AND expression
    (45) math_expression -> . expression LESS expression
    (46) math_expression -> . expression GREATER expression

    L_FIGBRACKET    shift and go to state 108
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56
    SUM             shift and go to state 57
    DENY            shift and go to state 58

    decl_list                      shift and go to state 155
    expr_list                      shift and go to state 110
    expression                     shift and go to state 111
    variable                       shift and go to state 50
    const                          shift and go to state 51
    math_expression                shift and go to state 52

state 143

    (16) expr_list -> expr_list COMMA expression .
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    COMMA           reduce using rule 16 (expr_list -> expr_list COMMA expression .)
    R_FIGBRACKET    reduce using rule 16 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 144

    (65) for -> FOR VARIABLE EQ expression COLON expression . BEGINFOR NL stmt_list ENDFOR
    (66) for -> FOR VARIABLE EQ expression COLON expression . BEGIN NL stmt_list END
    (35) math_expression -> expression . PLUS expression
    (36) math_expression -> expression . MINUS expression
    (37) math_expression -> expression . MUL_MATRIX expression
    (38) math_expression -> expression . MUL_ELEM expression
    (39) math_expression -> expression . TRANSPOSE
    (41) math_expression -> expression . STL
    (42) math_expression -> expression . STR
    (44) math_expression -> expression . AND expression
    (45) math_expression -> expression . LESS expression
    (46) math_expression -> expression . GREATER expression

    BEGINFOR        shift and go to state 156
    BEGIN           shift and go to state 157
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MUL_MATRIX      shift and go to state 75
    MUL_ELEM        shift and go to state 76
    TRANSPOSE       shift and go to state 77
    STL             shift and go to state 78
    STR             shift and go to state 79
    AND             shift and go to state 80
    LESS            shift and go to state 81
    GREATER         shift and go to state 82


state 145

    (67) if -> IF math_expression BEGINIF NL stmt_list ENDIF .

    NL              reduce using rule 67 (if -> IF math_expression BEGINIF NL stmt_list ENDIF .)


state 146

    (68) if -> IF math_expression BEGIN NL stmt_list END .

    NL              reduce using rule 68 (if -> IF math_expression BEGIN NL stmt_list END .)


state 147

    (77) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (71) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 158
    COMMA           shift and go to state 136


state 148

    (79) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 159


state 149

    (78) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 160


state 150

    (71) func_list -> func_list COMMA func .

    RBRACKET        reduce using rule 71 (func_list -> func_list COMMA func .)
    COMMA           reduce using rule 71 (func_list -> func_list COMMA func .)


state 151

    (80) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 161
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 152

    (74) func -> type VARIABLE EQ . const
    (47) const -> . TRUE
    (48) const -> . FALSE
    (49) const -> . INT_DEC
    (50) const -> . INT_BIN

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    INT_DEC         shift and go to state 55
    INT_BIN         shift and go to state 56

    const                          shift and go to state 162

state 153

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list . RBRACKET BEGIN NL stmt_list END
    (71) func_list -> func_list . COMMA func

    RBRACKET        shift and go to state 163
    COMMA           shift and go to state 136


state 154

    (82) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 164


state 155

    (14) decl_list -> decl_list COMMA L_FIGBRACKET decl_list . R_FIGBRACKET
    (14) decl_list -> decl_list . COMMA L_FIGBRACKET decl_list R_FIGBRACKET

    R_FIGBRACKET    shift and go to state 165
    COMMA           shift and go to state 129


state 156

    (65) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR . NL stmt_list ENDFOR

    NL              shift and go to state 166


state 157

    (66) for -> FOR VARIABLE EQ expression COLON expression BEGIN . NL stmt_list END

    NL              shift and go to state 167


state 158

    (77) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 168


state 159

    (79) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 169


state 160

    (78) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 170
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 161

    (80) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 171
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 162

    (74) func -> type VARIABLE EQ const .

    RBRACKET        reduce using rule 74 (func -> type VARIABLE EQ const .)
    COMMA           reduce using rule 74 (func -> type VARIABLE EQ const .)


state 163

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET . BEGIN NL stmt_list END

    BEGIN           shift and go to state 172


state 164

    (82) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 173


state 165

    (14) decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .

    R_FIGBRACKET    reduce using rule 14 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)
    COMMA           reduce using rule 14 (decl_list -> decl_list COMMA L_FIGBRACKET decl_list R_FIGBRACKET .)


state 166

    (65) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL . stmt_list ENDFOR
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 174
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 167

    (66) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    stmt_list                      shift and go to state 175
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 168

    (77) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 176


state 169

    (79) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 177
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 170

    (78) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 178
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 171

    (80) function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 80 (function -> FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 172

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN . NL stmt_list END

    NL              shift and go to state 179


state 173

    (82) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    type                           shift and go to state 11
    stmt_list                      shift and go to state 180
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 174

    (65) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list . ENDFOR
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    ENDFOR          shift and go to state 181
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 175

    (66) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 182
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 176

    (77) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    stmt_list                      shift and go to state 183
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 177

    (79) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 184
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 178

    (78) function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 78 (function -> FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 179

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL . stmt_list END
    (2) stmt_list -> . stmt_list statement
    (3) stmt_list -> . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    type                           shift and go to state 11
    stmt_list                      shift and go to state 185
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 180

    (82) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 186
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    type                           shift and go to state 11
    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 181

    (65) for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .

    NL              reduce using rule 65 (for -> FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR .)


state 182

    (66) for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .

    NL              reduce using rule 66 (for -> FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END .)


state 183

    (77) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 187
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    return_list                    shift and go to state 21
    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    type                           shift and go to state 11
    variable                       shift and go to state 13
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 184

    (79) function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 79 (function -> return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 185

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list . END
    (2) stmt_list -> stmt_list . statement
    (4) statement -> . declaration NL
    (5) statement -> . assigment NL
    (6) statement -> . for NL
    (7) statement -> . if NL
    (8) statement -> . operation NL
    (9) statement -> . function NL
    (10) statement -> . function_call NL
    (11) declaration -> . type VARIABLE EQ expression
    (12) declaration -> . type VARIABLE EQ L_FIGBRACKET decl_list R_FIGBRACKET
    (63) assigment -> . variable ASSIGMENT expression
    (64) assigment -> . variable ASSIGMENT L_FIGBRACKET decl_list R_FIGBRACKET
    (65) for -> . FOR VARIABLE EQ expression COLON expression BEGINFOR NL stmt_list ENDFOR
    (66) for -> . FOR VARIABLE EQ expression COLON expression BEGIN NL stmt_list END
    (67) if -> . IF math_expression BEGINIF NL stmt_list ENDIF
    (68) if -> . IF math_expression BEGIN NL stmt_list END
    (58) operation -> . MOVE LBRACKET math_expression RBRACKET
    (59) operation -> . RIGHT
    (60) operation -> . LEFT
    (61) operation -> . WALL
    (62) operation -> . EXIT
    (77) function -> . return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (78) function -> . FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (79) function -> . return_list EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (80) function -> . FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (81) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END
    (82) function -> . type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END
    (83) function_call -> . VARIABLE
    (84) function_call -> . VARIABLE call_list
    (18) type -> . int
    (19) type -> . bool
    (51) variable -> . VARIABLE
    (52) variable -> . VARIABLE LBRACKET index RBRACKET
    (69) return_list -> . return_list COMMA type VARIABLE
    (70) return_list -> . type VARIABLE
    (20) int -> . INT
    (21) int -> . CINT
    (22) int -> . VINT
    (23) int -> . MINT
    (24) int -> . CVINT
    (25) int -> . CMINT
    (26) bool -> . BOOL
    (27) bool -> . CBOOL
    (28) bool -> . VBOOL
    (29) bool -> . MBOOL
    (30) bool -> . CVBOOL
    (31) bool -> . CMBOOL

    END             shift and go to state 188
    FOR             shift and go to state 14
    IF              shift and go to state 15
    MOVE            shift and go to state 16
    RIGHT           shift and go to state 17
    LEFT            shift and go to state 18
    WALL            shift and go to state 19
    EXIT            shift and go to state 20
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 12
    INT             shift and go to state 25
    CINT            shift and go to state 26
    VINT            shift and go to state 27
    MINT            shift and go to state 28
    CVINT           shift and go to state 29
    CMINT           shift and go to state 30
    BOOL            shift and go to state 31
    CBOOL           shift and go to state 32
    VBOOL           shift and go to state 33
    MBOOL           shift and go to state 34
    CVBOOL          shift and go to state 35
    CMBOOL          shift and go to state 36

    type                           shift and go to state 11
    statement                      shift and go to state 37
    declaration                    shift and go to state 4
    assigment                      shift and go to state 5
    for                            shift and go to state 6
    if                             shift and go to state 7
    operation                      shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    variable                       shift and go to state 13
    return_list                    shift and go to state 21
    int                            shift and go to state 23
    bool                           shift and go to state 24

state 186

    (82) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 82 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET RBRACKET BEGIN NL stmt_list END .)


state 187

    (77) function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 77 (function -> return_list EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)


state 188

    (81) function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .

    NL              reduce using rule 81 (function -> type VARIABLE EQ FUNCTION VARIABLE LBRACKET func_list RBRACKET BEGIN NL stmt_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 84 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 84 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 84 resolved as shift
WARNING: shift/reduce conflict for STL in state 84 resolved as shift
WARNING: shift/reduce conflict for STR in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 100 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 100 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 100 resolved as shift
WARNING: shift/reduce conflict for STL in state 100 resolved as shift
WARNING: shift/reduce conflict for STR in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 101 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 101 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 101 resolved as shift
WARNING: shift/reduce conflict for STL in state 101 resolved as shift
WARNING: shift/reduce conflict for STR in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 102 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 102 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 102 resolved as shift
WARNING: shift/reduce conflict for STL in state 102 resolved as shift
WARNING: shift/reduce conflict for STR in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 103 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 103 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 103 resolved as shift
WARNING: shift/reduce conflict for STL in state 103 resolved as shift
WARNING: shift/reduce conflict for STR in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 104 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 104 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 104 resolved as shift
WARNING: shift/reduce conflict for STL in state 104 resolved as shift
WARNING: shift/reduce conflict for STR in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 105 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 105 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 105 resolved as shift
WARNING: shift/reduce conflict for STL in state 105 resolved as shift
WARNING: shift/reduce conflict for STR in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MUL_MATRIX in state 106 resolved as shift
WARNING: shift/reduce conflict for MUL_ELEM in state 106 resolved as shift
WARNING: shift/reduce conflict for TRANSPOSE in state 106 resolved as shift
WARNING: shift/reduce conflict for STL in state 106 resolved as shift
WARNING: shift/reduce conflict for STR in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 110 resolved as shift
